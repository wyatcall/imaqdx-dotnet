<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NationalInstruments.Vision</name>
    </assembly>
    <members>
        <member name="T:NationalInstruments.Vision.Analysis.CharacterInfo">
            <summary>
            Provides information about a trained character.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterInfo.GetInternalImage(NationalInstruments.Vision.VisionImage)">
            <summary>
            Retrieves the internal representation that NI Vision uses to match objects to this character. 
            </summary>
            <param name="destination">The resulting image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterInfo.GetCharacterImage(NationalInstruments.Vision.VisionImage)">
            <summary>
            Retrieves the image used to train this character.
            </summary>
            <param name="destination">The resulting image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterInfo.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterInfo.IsReferenceCharacter">
            <summary>
            Gets or sets whether the character is the reference character for the character class. 
            </summary>
            <value>
            This property is true if the character is the reference character for the character class.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterInfo.CharacterValue">
            <summary>
            Gets or sets the character value of the corresponding character in the character set. 
            </summary>
            <value>
            Set this property to change the character value.
            </value>
            <remarks>
            Retrieves the character value of the corresponding character in the character set. Set this property to change the character value.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CharacterInfoCollection">
            <summary>
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the CharacterInfo at the index entry from this CharacterInfoCollection.
            </summary>
            <param name="index">
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterInfoCollection.Clear">
            <summary>
            Removes all CharacterInfo objects from this CharacterInfoCollection.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterInfoCollection.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrSession">
            <summary>
            The OCR session on which the method operates.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.#ctor">
            <summary>
            Initializes a new instance of the OcrSession class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OcrSession class.
            </summary>
            <param name="fileName">
            The name of the OCR file to read.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.#ctor(System.String,NationalInstruments.Vision.Analysis.OcrReadMode)">
            <summary>
            Initializes a new instance of the OcrSession class.
            </summary>
            <param name="fileName">
            The name of the OCR file to read.
            </param>
            <param name="mode">
            Specifies what OCR information to read. The default is All, which specifies 
            both the character set data and the session properties are read from file. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.ReadFile(System.String)">
            <summary>
            Reads a character set from the file specified by fileName.
            </summary>
            <param name="fileName">
            The name of the OCR file to read.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.ReadFile(System.String,NationalInstruments.Vision.Analysis.OcrReadMode)">
            <summary>
            Reads a character set from the file specified by fileName.
            </summary>
            <param name="fileName">
            The name of the OCR file to read.
            </param>
            <param name="mode">
            Specifies what OCR information to read. The default is All, which specifies 
            both the character set data and the session properties are read from file. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.ReadFile2(System.String)">
            <summary>
            Reads a character set from the file specified by fileName.
            </summary>
            <param name="fileName">
            The name of the OCR file to read.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.ReadFile2(System.String,NationalInstruments.Vision.Analysis.OcrReadMode)">
            <summary>
            Reads a character set from the file specified by fileName.
            </summary>
            <param name="fileName">
            The name of the OCR file to read.
            </param>
            <param name="mode">
            Specifies what OCR information to read. The default is All, which specifies 
            both the character set data and the session properties are read from file. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.WriteFile(System.String)">
            <summary>
            Stores the trained character set in the file specified by fileName.
            </summary>
            <param name="fileName">
            The name of the file.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.WriteFile2(System.String)">
            <summary>
            Stores the trained character set in the file specified by fileName.
            </summary>
            <param name="fileName">
            The name of the file.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.ReadText(NationalInstruments.Vision.VisionImage)">
            <summary>
            Reads the text from the image. 
            </summary>
            <param name="image">
            The image to read the text from.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ReadTextReport" crefType="Unqualified"/>
            object containing information about the text read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.ReadText(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Reads the text from the image. 
            </summary>
            <param name="image">
            The image to read the text from.
            </param>
            <param name="roi">
            The ROI containing the image to read text from.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ReadTextReport" crefType="Unqualified"/>
            object containing information about the text read.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Train(NationalInstruments.Vision.VisionImage,System.String)">
            <summary>
            Assigns character values to the objects identified in the image. The newly trained characters are appended to the existing trained character set. An image can contain no more than 255 objects.
            </summary>
            <param name="source">
            The image containing the objects to be identified.
            </param>
            <param name="characterValue">
            The value to assign to objects identified in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Train(NationalInstruments.Vision.VisionImage,System.String,System.Int32)">
            <summary>
            Assigns character values to the objects identified in the image. The newly trained characters are appended to the existing trained character set. An image can contain no more than 255 objects.
            </summary>
            <param name="source">
            The image containing the objects to be identified.
            </param>
            <param name="characterValue">
            The value to assign to objects identified in the image.
            </param>
            <param name="index">
            The index of the object that you want to train in the set of objects that are identified.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Train(NationalInstruments.Vision.VisionImage,System.String,System.Int32,NationalInstruments.Vision.Roi)">
            <summary>
            Assigns character values to the objects identified in the image. The newly trained characters are appended to the existing trained character set. An image can contain no more than 255 objects.
            </summary>
            <param name="source">
            The image containing the objects to be identified.
            </param>
            <param name="characterValue">
            The value to assign to objects identified in the image.
            </param>
            <param name="index">
            The index of the object that you want to train in the set of objects that are identified.
            </param>
            <param name="roi">
            The ROI containing the image to read text from.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Train2(NationalInstruments.Vision.VisionImage,System.String)">
            <summary>
            Assigns character values to the objects identified in the image. The newly trained characters are appended to the existing trained character set. An image can contain no more than 255 objects.
            </summary>
            <param name="source">
            The image containing the objects to be identified.
            </param>
            <param name="characterValue">
            The value to assign to objects identified in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Train2(NationalInstruments.Vision.VisionImage,System.String,System.Int32)">
            <summary>
            Assigns character values to the objects identified in the image. The newly trained characters are appended to the existing trained character set. An image can contain no more than 255 objects.
            </summary>
            <param name="source">
            The image containing the objects to be identified.
            </param>
            <param name="characterValue">
            The value to assign to objects identified in the image.
            </param>
            <param name="index">
            The index of the object that you want to train in the set of objects that are identified.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Train2(NationalInstruments.Vision.VisionImage,System.String,System.Int32,NationalInstruments.Vision.Roi)">
            <summary>
            Assigns character values to the objects identified in the image. The newly trained characters are appended to the existing trained character set. An image can contain no more than 255 objects.
            </summary>
            <param name="source">
            The image containing the objects to be identified.
            </param>
            <param name="characterValue">
            The value to assign to objects identified in the image.
            </param>
            <param name="index">
            The index of the object that you want to train in the set of objects that are identified.
            </param>
            <param name="roi">
            The ROI containing the image to read text from.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.VerifyText(NationalInstruments.Vision.VisionImage,System.String)">
            <summary>
            Verifies the accuracy of the text in the image. For each character, 
            the method checks for the existence of a reference character for 
            the expected character class and compares the character from the 
            image to the reference character. 
            </summary>
            <param name="image">
            The source image for this operation.
            </param>
            <param name="expectedText">
            The expected character values in the image.
            </param>
            <returns>
            A collection of verification scores for the patterns in the image. If a reference 
            character does not exist for the character class of a character, the method sets 
            the score corresponding to that character to 0.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.VerifyText(NationalInstruments.Vision.VisionImage,System.String,NationalInstruments.Vision.Roi)">
            <summary>
            Verifies the accuracy of the text in the image. For each character, 
            the method checks for the existence of a reference character for 
            the expected character class and compares the character from the 
            image to the reference character. 
            </summary>
            <param name="image">
            The source image for this operation.
            </param>
            <param name="expectedText">
            The expected character values in the image.
            </param>
            <param name="roi">
            The ROI that the method performs this operation on. Pass null or Nothing to use 
            the entire image for this operation. If the ROI has multiple contours, each contour 
            is interpreted as a character in the image. If the ROI only has one contour, 
            the method searches the ROI for text. 
            </param>
            <returns>
            A collection of verification scores for the patterns in the image. If a reference 
            character does not exist for the character class of a character, the method sets 
            the score corresponding to that character to 0.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.VerifyPatterns(NationalInstruments.Vision.VisionImage,System.String[])">
            <summary>
            Verifies the accuracy of the text in the image. For each pattern, 
            the method checks for the existence of a reference character for 
            the expected character class and compares the character from the 
            image to the reference character. 
            </summary>
            <param name="image">
            The source image for this operation.
            </param>
            <param name="expectedPatterns">
            The array of expected patterns in the image.
            </param>
            <returns>
            A collection of verification scores for the patterns in the image. If a reference 
            character does not exist for the character class of a character, the method sets 
            the score corresponding to that character to 0.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.VerifyPatterns(NationalInstruments.Vision.VisionImage,System.String[],NationalInstruments.Vision.Roi)">
            <summary>
            Verifies the accuracy of the text in the image. For each pattern, 
            the method checks for the existence of a reference character for 
            the expected character class and compares the character from the 
            image to the reference character. 
            </summary>
            <param name="image">
            The source image for this operation.
            </param>
            <param name="expectedPatterns">
            The array of expected patterns in the image.
            </param>
            <param name="roi">
            The ROI that the method performs this operation on. Pass null or Nothing to use 
            the entire image for this operation. If the ROI has multiple contours, each contour 
            is interpreted as a pattern location in the image. If the ROI only has one contour, 
            the method searches the ROI for the expected patterns. 
            </param>
            <returns>
            A collection of verification scores for the patterns in the image. If a reference 
            character does not exist for the character class of a character, the method sets 
            the score corresponding to that character to 0.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Equals(NationalInstruments.Vision.Analysis.OcrSession)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified OcrSession.
            </summary>
            <param name="other">
            A OcrSession instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified OcrSession.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of OcrSession
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSession.Dispose">
            <summary>
            Releases all resources used by the OcrSession. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSession.CharacterInfo">
            <summary>
            Gets information about the trained character set. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSession.ReadTextOptions">
            <summary>
            Gets the configuration settings used during the reading process.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSession.SpacingOptions">
            <summary>
            Gets the spacing settings for the characters in the image.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSession.ProcessingOptions">
            <summary>
            Gets how images are processed before training or reading characters.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSession.Description">
            <summary>
            Gets or sets a description of the OcrSession. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierSession">
            <summary>
            Assigns images or feature vectors to classes based on how the classifier has been trained.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.CreateFromFile(System.String)">
            <summary>
            Creates an instance of a ClassifierSession object from a specified classifier session file.
            </summary>
            <param name="fileName">
            The name of the specified classifier session file.
            </param>
            <returns>A ClassifierSession containing the data in the classifier session file.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.ReadFile(System.String)">
            <summary>
            Reads classifier information from a file.
            </summary>
            <param name="fileName">The file to read from.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.ReadFile(System.String,NationalInstruments.Vision.Analysis.ReadClassifierFileMode)">
            <summary>
            Reads classifier information from a file.
            </summary>
            <param name="fileName">The file to read from.
            </param>
            <param name="mode">The mode to read the file in.  You can read the whole file, just the samples, or just the properties.</param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.WriteFile(System.String)">
            <summary>
            Writes this session to a file.
            </summary>
            <param name="fileName">
            The name of the file.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.WriteFile(System.String,NationalInstruments.Vision.Analysis.WriteClassifierFileMode)">
            <summary>
            Writes this session to a file.
            </summary>
            <param name="fileName">
            The name of the file.
            </param>
            <param name="mode">The mode to write the file in.  You can write the whole file or a compact version of the file that can only train after being read.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.GetAccuracy">
            <summary>
            Reports on the accuracy and predictive value of the classifier.
            </summary>
            <returns>A ClassifierAccuracyReport containing information about the accuracy and predictive value of the classifier.</returns>
            <remarks>
            The classifier must be trained for this method to work.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.Classify(NationalInstruments.Vision.VisionImage)">
            <summary>
            Classifies the given image.
            </summary>
            <param name="image">
            The image to classify.
            </param>
            <returns>A ClassifierReport containing the results of the classification.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.Classify(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Classifies the given image.
            </summary>
            <param name="image">
            The image to classify.
            </param>
            <param name="roi">
            The region of interest in the image.
            </param>
            <returns>A ClassifierReport containing the results of the classification.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.TrainNearestNeighbor">
            <summary>
            Trains the classifier to use the Nearest Neighbor engine, and configures the options the engine uses for classification.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.TrainNearestNeighbor(NationalInstruments.Vision.Analysis.NearestNeighborOptions)">
            <summary>
            Trains the classifier to use the Nearest Neighbor engine, and configures the options the engine uses for classification.
            </summary>
            <param name="options">The options to use when training.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.TrainNearestNeighbor(NationalInstruments.Vision.Analysis.NearestNeighborOptions,System.Boolean)">
            <summary>
            Trains the classifier to use the Nearest Neighbor engine, and configures the options the engine uses for classification.
            </summary>
            <param name="options">The options to use when training.
            </param>
            <param name="getTrainingReport">Whether to perform a training report.
            </param>
            <returns>If getTrainingReport is <see langword="true"/>, returns a NearestNeighborTrainingReport containing information about the training process.  Otherwise, returns <see langword="null"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.Dispose">
            <summary>Releases all resources used by the ClassifierSession.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSession.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Classifier Session and optionally releases the managed resources. 
            </summary>
            <param name="disposing">
            </param>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierSession.Description">
            <summary>
            Gets or sets a description of images or feature vectors for ClassifierSession.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierSession.Type">
            <summary>
            Gets or sets the type of the classifier.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierSession.EngineType">
            <summary>
            Gets or sets the type of engine this classifier has been trained with.
            </summary>
            <value>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            EngineNearestNeighbor—This classifier has been trained with the Nearest Neighbor engine.
            </description>
            		</item>
            		<item>
            			<description>
            EngineNone—This classifier has not been trained yet, and so has no engine.
            </description>
            		</item>
            	</list>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierSession.NearestNeighborOptions">
            <summary>
            Gets the options the engine uses for classification.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleClassifierSession">
            <summary>
            Get options from a particle classifier session. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierSession.#ctor">
            <summary>
            Initializes a new instance of the ParticleClassifierSession class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParticleClassifierSession class.
            </summary>
            <param name="fileName">
            The name of the classifier file to read.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierSession.AddSample(NationalInstruments.Vision.VisionImage,System.String)">
            <summary>
            Adds a sample to a classifier. 
            </summary>
            <param name="image">
            The image to add to the classifier.
            </param>
            <param name="sampleClass">
            The class to which the sample belongs.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierSession.AddSample(NationalInstruments.Vision.VisionImage,System.String,NationalInstruments.Vision.Roi)">
            <summary>
            Adds a sample to a classifier. 
            </summary>
            <param name="image">
            The image to add to the classifier.
            </param>
            <param name="sampleClass">
            The class to which the sample belongs.
            </param>
            <param name="roi">
            The ROI containing the sample to add. Each contour of roi must be a rectangle, 
            rotated rectangle, oval, annulus, or closed contour. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierSession.Equals(NationalInstruments.Vision.Analysis.ClassifierSession)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierSession.
            </summary>
            <param name="other">
            A ClassifierSession instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierSession.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierSession.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClassifierSession
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierSession.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierSession.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierSession.Samples">
            <summary>
            Gets information about about a sample in a classifier.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierSession.ClassifierOptions">
            <summary>
            Gets the options used to classify particles. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierSession.PreprocessingOptions">
            <summary>
            Gets the options used to process particles before classification. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColorClassifierSession">
            <summary>
            The color classifier session on which the method operates.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.#ctor">
            <summary>
            Initializes a new instance of a ColorClassifierSession class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of a ColorClassifierSession class.
            </summary>
            <param name="fileName">
            The name of the classifier file to read.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.AddSample(NationalInstruments.Vision.VisionImage,System.String)">
            <summary>
            Adds a sample to a classifier. 
            </summary>
            <param name="image">
            The image to add to the classifier.
            </param>
            <param name="sampleClass">
            The class to which the sample belongs.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.AddSample(NationalInstruments.Vision.VisionImage,System.String,NationalInstruments.Vision.Roi)">
            <summary>
            Adds a sample to a classifier. 
            </summary>
            <param name="image">
            The image to add to the classifier.
            </param>
            <param name="sampleClass">
            The class to which the sample belongs.
            </param>
            <param name="roi">
            The ROI containing the sample to add. Each contour of roi must be a rectangle, 
            rotated rectangle, oval, annulus, or closed contour. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.ClassifyAdvanced(NationalInstruments.Vision.VisionImage)">
            <summary>
            Classifies a color image.
            </summary>
            <param name="image">
            The image to classify.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced" crefType="Unqualified"/>
            object containing the results of classification.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.ClassifyAdvanced(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Classifies a color image.
            </summary>
            <param name="image">
            The image to classify.
            </param>
            <param name="roi">
            The ROI containing the image to classify. Each contour of roi must be a rectangle, 
            rotated rectangle, oval, annulus, or closed contour. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced" crefType="Unqualified"/>
            object containing the results of classification.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.SupervisedColorSegmentation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Segments a color image using trained samples.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="labelImage">
            Label Image is a reference to the label image. 
            </param>
            <returns>
            Collection of ROILabel objects.
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.SupervisedColorSegmentation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32)">
            <summary>
            Segments a color image using trained samples.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="labelImage">
            Label Image is a reference to the label image. 
            </param>
            <param name="maxDistance">
            Maximum Distance is the maximum allowed color distance to group the pixel windows. 
            Valid values are 0 to 1000. A value of 0 represents a conservative search strategy 
            and a value of 1000 represents an aggressive search strategy.
            </param>
            <returns>
            Collection of ROILabel objects.
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.SupervisedColorSegmentation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32)">
            <summary>
            Segments a color image using trained samples.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="labelImage">
            Label Image is a reference to the label image. 
            </param>
            <param name="maxDistance">
            Maximum Distance is the maximum allowed color distance to group the pixel windows. 
            Valid values are 0 to 1000. A value of 0 represents a conservative search strategy 
            and a value of 1000 represents an aggressive search strategy.
            </param>
            <param name="minIdentificationScore">
            Min Identification Score is the minimum identification score required to group 
            the pixel. Valid values are 0 to 1000.
            </param>
            <returns>
            Collection of ROILabel objects.
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.SupervisedColorSegmentation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ROILabel})">
            <summary>
            Segments a color image using trained samples.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="labelImage">
            Label Image is a reference to the label image. 
            </param>
            <param name="maxDistance">
            Maximum Distance is the maximum allowed color distance to group the pixel windows. 
            Valid values are 0 to 1000. A value of 0 represents a conservative search strategy 
            and a value of 1000 represents an aggressive search strategy.
            </param>
            <param name="minIdentificationScore">
            Min Identification Score is the minimum identification score required to group 
            the pixel. Valid values are 0 to 1000.
            </param>
            <param name="labelsIn">
            Labels In is a Collection of ROILabel class objects having class names and labels that 
            you want to segment.
            </param>
            <returns>
            Collection of ROILabel objects.
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.SupervisedColorSegmentation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ROILabel},NationalInstruments.Vision.Analysis.ColorSegmentationOptions)">
            <summary>
            Segments a color image using trained samples.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="labelImage">
            Label Image is a reference to the label image. 
            </param>
            <param name="maxDistance">
            Maximum Distance is the maximum allowed color distance to group the pixel windows. 
            Valid values are 0 to 1000. A value of 0 represents a conservative search strategy 
            and a value of 1000 represents an aggressive search strategy.
            </param>
            <param name="minIdentificationScore">
            Min Identification Score is the minimum identification score required to group 
            the pixel. Valid values are 0 to 1000.
            </param>
            <param name="labelsIn">
            Labels In is a Collection of ROILabel class objects having class names and labels that 
            you want to segment.
            </param>
            <param name="segmentOptions">
            Specifies the parameters used to configure the color segmentation algorithm.
            </param>
            <returns>
            Collection of ROILabel objects.
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.SupervisedColorSegmentation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ROILabel},NationalInstruments.Vision.Analysis.ColorSegmentationOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Segments a color image using trained samples.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="labelImage">
            Label Image is a reference to the label image. 
            </param>
            <param name="maxDistance">
            Maximum Distance is the maximum allowed color distance to group the pixel windows. 
            Valid values are 0 to 1000. A value of 0 represents a conservative search strategy 
            and a value of 1000 represents an aggressive search strategy.
            </param>
            <param name="minIdentificationScore">
            Min Identification Score is the minimum identification score required to group 
            the pixel. Valid values are 0 to 1000.
            </param>
            <param name="labelsIn">
            Labels In is a Collection of ROILabel class objects having class names and labels that 
            you want to segment.
            </param>
            <param name="segmentOptions">
            Specifies the parameters used to configure the color segmentation algorithm.
            </param>
            <param name="roi">
            Specifies the region of interest specifying the location of the sample in the image. 
            The ROI must be one or more closed contours. If ROI Descriptor is empty or not connected,
            the entire image is considered to be the region.
            </param>
            <returns>
            Collection of ROILabel objects.
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.GetColorSegmentationMaxDistance(NationalInstruments.Vision.Analysis.ColorSegmentationOptions,NationalInstruments.Vision.Analysis.SegmentationDistanceLevel)">
            <summary>
            Gets the maximum distance allowed to group classes in color image segmentation
            </summary>
            <param name="segmentOptions">
            Specifies the parameters used to configure the color segmentation algorithm.
            </param>
            <param name="distLevel">
            Level Type specifies the sensitivity of Maximum Distance.
            </param>
            <returns>
            Maximun distance which is allowed between pixel windows.
            </returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.Equals(NationalInstruments.Vision.Analysis.ClassifierSession)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorClassifierSession.
            </summary>
            <param name="other">
            A ColorClassifierSession instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorClassifierSession.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ColorClassifierSession
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierSession.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorClassifierSession.Samples">
            <summary>
            Gets a collection of classifier sample objects.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorClassifierSession.ClassifierOptions">
            <summary>
            Gets the options used to process the color classifier before classification.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession">
            <summary>
            The Texture Defect classifier session on which the method operates.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.#ctor">
            <summary>
            Initializes a new instance of a TextureClassifierSession class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TextureClassifierSession class.
            </summary>
            <param name="fileName">
            The name of the classifier file to read.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.AddSample(NationalInstruments.Vision.VisionImage,System.String)">
            <summary>
            Adds a sample to a classifier. 
            </summary>
            <param name="image">
            The image to add to the classifier.
            </param>
            <param name="sampleClass">
            The class to which the sample belongs.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.AddSample(NationalInstruments.Vision.VisionImage,System.String,NationalInstruments.Vision.Roi)">
            <summary>
            Adds a sample to a classifier. 
            </summary>
            <param name="image">
            The image to add to the classifier.
            </param>
            <param name="sampleClass">
            The class to which the sample belongs.
            </param>
            <param name="roi">
            The ROI containing the sample to add. Each contour of roi must be a rectangle, 
            rotated rectangle, oval, annulus, or closed contour. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.ClassifyAdvanced(NationalInstruments.Vision.VisionImage)">
            <summary>
            Classifies a color image.
            </summary>
            <param name="image">
            The image to classify.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced" crefType="Unqualified"/>
            object containing the results of classification.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.ClassifyAdvanced(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Classifies a color image.
            </summary>
            <param name="image">
            The image to classify.
            </param>
            <param name="roi">
            The ROI containing the image to classify. Each contour of roi must be a rectangle, 
            rotated rectangle, oval, annulus, or closed contour. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced" crefType="Unqualified"/>
            object containing the results of classification.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.DetectTextureDefect(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,System.Char,System.Double)">
            <summary>
            Detects defects in textured images.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="destinationImage">
            Image Dst is a reference to the destination image. 
            </param>
            <param name="initialStepSize">
            Initial Step Size specifies the offset, in pixels, by which the classifier should reposition 
            the window during the initial defect detection phase. Values range from 0 to the smallest window 
            dimension. The default value of 0 indicates no overlap between windows. A small, non-zero step 
            size processes the image in more detail, but increases the time required to process the image.
            </param>
            <param name="finalStepSize">
            Final Step Size specifies the offset, in pixels, by which the classifier should reposition the 
            window during the final detect detection phase. The default value of 1 indicates that the classifier 
            will reposition the window by 1 pixel as it searches for defects.The window is positioned only on 
            pixels detected as defects in the initial defect detection phase. A smaller, non-zero step size 
            processes the image in more detail, but increases the time required to process the image. This value
            must be smaller than the Initial Step Size if the Initial Step Size is set to a value greater than zero.
            </param>
            <param name="defaultPixelValue">
            Defect Pixel Value is the value used to replace defect pixels in the image.
            </param>
            <param name="minClassificationScore">
            Min. Defect Identification Score is the value used to determine if a pixel in the image is a 
            defect. The pixel is classified as a defect if the identification score is greater than or equal to this value.
            </param>
            <returns>
            Nothing.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.DetectTextureDefect(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,System.Char,System.Double,NationalInstruments.Vision.Roi)">
            <summary>
            Detects defects in textured images.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="destinationImage">
            Image Dst is a reference to the destination image. 
            </param>
            <param name="initialStepSize">
            Initial Step Size specifies the offset, in pixels, by which the classifier should reposition 
            the window during the initial defect detection phase. Values range from 0 to the smallest window 
            dimension. The default value of 0 indicates no overlap between windows. A small, non-zero step 
            size processes the image in more detail, but increases the time required to process the image.
            </param>
            <param name="finalStepSize">
            Final Step Size specifies the offset, in pixels, by which the classifier should reposition the 
            window during the final detect detection phase. The default value of 1 indicates that the classifier 
            will reposition the window by 1 pixel as it searches for defects.The window is positioned only on 
            pixels detected as defects in the initial defect detection phase. A smaller, non-zero step size 
            processes the image in more detail, but increases the time required to process the image. This value
            must be smaller than the Initial Step Size if the Initial Step Size is set to a value greater than zero.
            </param>
            <param name="defectPixelValue">
            Defect Pixel Value is the value used to replace defect pixels in the image.
            </param>
            <param name="minClassificationScore">
            Min. Defect Identification Score is the value used to determine if a pixel in the image is a 
            defect. The pixel is classified as a defect if the identification score is greater than or equal to this value.
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to detect defects.
            </param>
            <returns>
            Nothing.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.Equals(NationalInstruments.Vision.Analysis.ClassifierSession)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified TextureDefectClassifierSession.
            </summary>
            <param name="other">
            A TextureDefectClassifierSession instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified TextureDefectClassifierSession.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of TextureDefectClassifierSession
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.TextureDefectClassifierOptions">
            <summary>
            Gets Texture defect classifier options.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.TextureDefectClassifierSession.Samples">
            <summary>
            Gets a collection of classifier sample objects.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CustomClassifierSession">
            <summary>
            Adds a sample to this CustomClassifierSession.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.#ctor">
            <summary>
            Initializes a new instance of the CustomClassifierSession class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CustomClassifierSession class.
            </summary>
            <param name="fileName">
            The file name of the classifier file to read in.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.AddSample(System.Collections.ObjectModel.Collection{System.Double},System.String)">
            <summary>
            Adds a sample to this CustomClassifierSession.
            </summary>
            <param name="featureVector">
            The feature to add.
            </param>
            <param name="sampleClass">
            The class of this feature.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.AddSample(System.Collections.ObjectModel.Collection{System.Double},System.String,NationalInstruments.Vision.VisionImage)">
            <summary>
            Adds a sample to this CustomClassifierSession.
            </summary>
            <param name="featureVector">
            The feature to add.
            </param>
            <param name="sampleClass">
            The class of this feature.
            </param>
            <param name="thumbnailImage">
            A thumbnail image to associate with this feature.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.AddSample(System.Collections.ObjectModel.Collection{System.Double},System.String,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Adds a sample to this CustomClassifierSession.
            </summary>
            <param name="featureVector">
            The feature to add.
            </param>
            <param name="sampleClass">
            The class of this feature.
            </param>
            <param name="thumbnailImage">
            A thumbnail image to associate with this feature.
            </param>
            <param name="thumbnailRoi">An ROI on the thumbnail image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.Classify(System.Collections.ObjectModel.Collection{System.Double})">
            <summary>
            Classifies the feature vector.
            </summary>
            <param name="featureVector">
            </param>
            <returns>
            A ClassifierReport containing the results of the classification.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.ClassifyAdvanced(System.Collections.ObjectModel.Collection{System.Double})">
            <summary>
            Classifies the feature vector, returning an advanced report.
            </summary>
            <param name="featureVector">
            </param>
            <returns>
             A ClassifierReportAdvanced containing the results of the classification.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.Equals(NationalInstruments.Vision.Analysis.ClassifierSession)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierSession.
            </summary>
            <param name="other">
            A ClassifierSession instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierSession.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClassifierSession and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSession.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CustomClassifierSession.Samples">
            <summary>
            The samples that this CustomClassifierSession contains.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierSampleCollection">
            <summary>
            Provides a collection of classifier sample objects. It contains one item for each sample in the classifier.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSampleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ClassifierSample object at the specified index from the ClassifierSampleCollection collection.
            </summary>
            <param name="index">
            The location of the ClassifierSample object.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSampleCollection.Clear">
            <summary>
            Removes all items from the collection. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSampleCollection.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CustomClassifierSampleCollection">
            <summary>
            Provides a collection of CustomClassifierSample objects.  
            </summary>
            <remarks>
            Each collection contains one item for each sample in the custom classifier.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSampleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the CustomClassifierSample object at the specified index from the CustomClassifierSampleCollection collection.
            </summary>
            <param name="index">
            The location of the CustomClassifierSample object.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSampleCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSampleCollection.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.Algorithms">
            <summary>
            Summary description for Algorithms.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.AbsoluteDifference(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Subtracts one image from another and returns the absolute value of the difference.
            </summary>
            <param name="sourceA">
            The first input image.
            </param>
            <param name="sourceB">
            The second input image.
            </param>
            <param name="destination">
            The resulting image. The destination image can be one of the source images.
            </param>
            <remarks>
            Use this method with image types U8, I16, Sgl, and Rgb32. The image type of <format type="italics">sourceB</format> depends on the image type of <format type="italics">sourceA</format>, as follows:
            <list type="bullet">
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is U8, <format type="italics">sourceB</format> must be U8, I16, Sgl, or Rgb.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is I16 or Sgl, <format type="italics">sourceB</format> must be U8, I16, or Sgl.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is Rgb, <format type="italics">sourceB</format> must be Rgb or U8.
            </description>
            		</item>
            	</list>
            If <format type="italics">sourceB</format> is of an image type that contains more bits per pixel than <format type="italics">sourceA</format>, <format type="italics">sourceB</format> and <format type="italics">destination</format> must be the same type of image. Otherwise, <format type="italics">sourceA</format> and <format type="italics">destination</format> must be the same type of image.
             This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Find the absolute difference between the image in i and the image
            ' in imageViewer1
            ' Do the operation inplace (store the result in i)
            Algorithms.AbsoluteDifference(imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // Find the absolute difference between the image in i and the image
            // in imageViewer1
            // Do the operation inplace (store the result in i)
            Algorithms.AbsoluteDifference(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.AbsoluteDifference(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>Subtracts a constant from an image and returns the absolute value of the difference.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="value">
            The pixel value.
            </param>
            <param name="destination">
            The resulting image. The destination image can be one of the source images.
            </param>
            <remarks>
            Use this method with image types U8, I16, Sgl, and Rgb32. The destination image and source image must be the same type of image. This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Add a constant to an image in imageViewer1.
            ' Store the result in i
            Algorithms.AbsoluteDifference(imageViewer1.Image, New PixelValue(50), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // Add a constant to an image in imageViewer1.
            // Store the result in i
            Algorithms.AbsoluteDifference(imageViewer1.Image, new PixelValue(50), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Add(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Adds an image to an image.
            </summary>
            <param name="sourceA">
            The first input image.
            </param>
            <param name="sourceB">
            The second input image.
            </param>
            <param name="destination">
            The resulting image. This image can be one of the source images.
            </param>
            <remarks>
            Use this method with image types U8, I16, Sgl, and Rgb32. The image type of <format type="italics">sourceB</format> depends on the image type of <format type="italics">sourceA</format>, as follows:
            <list type="bullet">
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is U8, <format type="italics">sourceB</format> must be U8, I16, Sgl, or Rgb32.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is I16 or Sgl, <format type="italics">sourceB</format> must be U8, I16, or Sgl.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is Rgb32, <format type="italics">sourceB</format> must be Rgb32 or U8.
            </description>
            		</item>
            	</list>
            If <format type="italics">sourceB</format> is of an image type that contains more bits per pixel than <format type="italics">sourceA</format>, <format type="italics">sourceB</format> and <format type="italics">destination</format> must be the same type of image. Otherwise, <format type="italics">sourceA</format> and <format type="italics">destination</format> must be the same type of image.
             This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Add image i to the image in imageViewer1. 
            ' Do the addition inplace (store the result in i) 
            Algorithms.Add(imageViewer1.Image, i, i) 
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // Add image i to the image in imageViewer1. 
            // Do the addition inplace (store the result in i) 
            Algorithms.Add(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Add(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Adds a constant to an image.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="value">
            The pixel value to add to the image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Sgl, and Rgb32. The destination image and source image must be the same type of image. This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            ' Add a constant to an image in imageViewer1. 
            ' Store the result in i 
            Algorithms.Add(imageViewer1.Image, New PixelValue(50), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            // Add a constant to an image in imageViewer1. 
            // Store the result in i 
            Algorithms.Add(imageViewer1.Image, new PixelValue(50), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Average(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the average of two source images.
            </summary>
            <param name="sourceA">
            The first input image.
            </param>
            <param name="sourceB">
            The second input image.
            </param>
            <param name="destination">
            The resulting image. It can be one of the source images.
            </param>
            <remarks>
            Use this method with image types U8, I16, and Sgl. If <format type="italics">sourceB</format> is an image type that contains more bits per pixel than <format type="italics">sourceA</format>, <format type="italics">sourceB</format> and <format type="italics">destination</format> must be the same type of image. Otherwise <format type="italics">sourceA</format> and <format type="italics">destination</format> must be the same type of image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Average a constant and an image in Viewer1.
            ' Store the result in i
            Algorithms.Average (imageViewer1.Image, 50, i)
             
            ' Average image i and the image in Viewer1.
            ' Do the averaging inplace (store the result in i)
            Algorithms.Average (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            // Average a constant and an image in Viewer1.
            // Store the result in i
            Algorithms.Average(imageViewer1.Image, 50, i);
                
            // Average image i and the image in Viewer1.
            // Do the averaging inplace (store the result in i)
            Algorithms.Average(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Average(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the average of an image and a constant.
            </summary>
            <param name="source">
            The first input image.
            </param>
            <param name="value">
            The constant value. Constants are rounded down if <format type="italics">source</format> is encoded as an integer.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, and Sgl.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Average a constant and an image in Viewer1.
            ' Store the result in i
            Algorithms.Average (imageViewer1.Image, 50, i)
             
            ' Average image i and the image in Viewer1.
            ' Do the averaging inplace (store the result in i)
            Algorithms.Average (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            // Average a constant and an image in Viewer1.
            // Store the result in i
            Algorithms.Average(imageViewer1.Image, 50, i);
                
            // Average image i and the image in Viewer1.
            // Do the averaging inplace (store the result in i)
            Algorithms.Average(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Divide(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            </summary>
            <param name="sourceA">The first input image.
            </param>
            <param name="sourceB">The second input image.
            </param>
            <param name="destination">The resulting image. It can be one of the source images.
            </param>
            <remarks>
            Use this method with image types U8, I16, and Single. The image type of <format type="italics">sourceB</format> depends on the image type of <format type="italics">sourceA</format>, as follows:
            <list type="bullet">
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is a U8 image, <format type="italics">sourceB</format> must be a U8 image.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is an I16 image, <format type="italics">sourceB</format> must be a U8 or I16 image.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is an Single image, <format type="italics">sourceB</format> must be a U8, I16, or Single image.
            </description>
            		</item>
            	</list>
            If <format type="italics">sourceB</format> is of an image type that contains more bits per pixel than <format type="italics">sourceA</format>, <format type="italics">sourceB</format> and <format type="italics">destination</format> must be the same type of image. Otherwise, <format type="italics">sourceA</format> and <format type="italics">destination</format> must be the same type of image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Divide the image in Viewer1 by a constant
            ' Store the result in i
            Algorithms.Divide (imageViewer1.Image, New PixelValue(50), i)
             
            ' Divide the image in Viewer1 by the image in i
            ' Do the division inplace (store the result in i)
            Algorithms.Divide (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            // Divide the image in Viewer1 by a constant
            // Store the result in i
            Algorithms.Divide(imageViewer1.Image, new PixelValue(50), i);
                
            // Divide the image in Viewer1 by the image in i
            // Do the division inplace (store the result in i)
            Algorithms.Divide(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Divide(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Divides an image by an image or a constant.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="value">
            The pixel value to divide the image by.
            </param>
            <param name="destination">The resulting image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">source</format> and <format type="italics">destination</format> must be the same type of image. You cannot divide an image by zero. If you set <format type="italics">value</format> to 0, the method automatically replaces it with 1.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Max(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the maximum of the pixel values of two images and copies the larger pixel value into the 
            destination pixel.
            </summary>
            <param name="sourceA">
            The first source image. 
            </param>
            <param name="sourceB">
            The second source image, which must be the same type of image as <format type="italics">sourceA</format>.
            </param>
            <param name="destination">
            The destination image. 
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. 
            <para>
            This method copies the larger pixel value of the two 
            source pixels into the destination for each pixel. 
            </para>
            	<para>
            If <format type="italics">sourceB</format> is of a type that contains more bits per 
            pixel than <format type="italics">sourceA</format>, <format type="italics">sourceB</format> and 
            <format type="italics">destination</format> must be the same type of image. Otherwise, 
            <format type="italics">sourceA</format> and <format type="italics">destination</format> must be the 
            same type of image.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Find the max of the pixels image i and the image in Viewer1.
            'Store the result in i
            Algorithms.Max (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Find the max of the pixels image i and the image in Viewer1.
            //Store the result in i
            Algorithms.Max(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Max(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the maximum of a pixel value and a constant and copies the larger pixel value into the 
            destination pixel.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="value">
            The pixel value to use in the computation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            <para>
            This method copies the source image to the destination in the following manner: If the source image pixel
            value is greater than the given constant, the method copies the source pixel to the destination. Otherwise, 
            the method copies the constant value to the destination.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Find the max of a constant and the image in Viewer1.
            'Store the result in i
            Algorithms.Max (imageViewer1.Image, New PixelValue (50), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Find the max of a constant and the image in Viewer1.
            //Store the result in i
            Algorithms.Max(imageViewer1.Image, new PixelValue(50), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Min(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the minimum of the pixel values of two images and copies the smaller pixel value into the 
            destination pixel.
            </summary>
            <param name="sourceA">
            The first source image.
            </param>
            <param name="sourceB">
            The second source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. 
            <para>
            This method copies the smaller pixel value of the two source pixels into the destination for each pixel.
            </para>
            	<para>
            If <format type="italics">sourceB</format> is of a type that contains more bits per 
            pixel than <format type="italics">sourceA</format>, <format type="italics">sourceB</format> and 
            <format type="italics">destination</format> must be the same type of image. Otherwise, 
            <format type="italics">sourceA</format> and <format type="italics">destination</format> must be the 
            same type of image.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Find the min of the pixels image i and the image in Viewer1.
            'Store the result in i
            Algorithms.Min (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Find the min of the pixels image i and the image in Viewer1.
            //Store the result in i
            Algorithms.Min(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Min(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the minimum between a pixel value and a constant and copies the value to the destination pixel. 
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="value">
            The pixel value to use in the computation.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. 
            <para>
            This method copies the source image to the destination 
            in the following manner: If the source image pixel value is less than the given constant, the function 
            copies the source pixel to the destination. Otherwise the function copies the constant value to the 
            destination.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Find the min of a constant and the image in Viewer1.
            'Store the result in i
            Algorithms.Min (imageViewer1.Image, New PixelValue (50), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Find the min of a constant and the image in Viewer1.
            //Store the result in i
            Algorithms.Min(imageViewer1.Image, new PixelValue(50), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Modulo(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Takes the modulo of an image by an image.
            </summary>
            <param name="sourceA">
            The first image to modulo divide. 
            </param>
            <param name="sourceB">
            The second image to modulo divide.
            </param>
            <param name="destination">
            THe destination image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images.
            <para>
            		<format type="italics">sourceA</format> and <format type="italics">destination</format> must be the 
            same type of image. The image type of <format type="italics">sourceB</format> depends on the type 
            of <format type="italics">sourceA</format>, as follows:
            </para>
            	<list type="bullet">
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is U8, <format type="italics">sourceB</format> must be U8.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is I16, <format type="italics">sourceB</format> must be I16 or U8.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is Single, <format type="italics">sourceB</format> must be Single, I16, or U8.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is Rgb32, <format type="italics">sourceB</format> must be Rgb32 or U8.
            </description>
            		</item>
            	</list>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Modulo divide the image in Viewer1 by the image in i
            'Store the result in i
            Algorithms.Modulo (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Modulo divide the image in Viewer1 by the image in i
            //Store the result in i
            Algorithms.Modulo(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Modulo(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Takes the modulo of an image by a constant.
            </summary>
            <param name="source">
            The image to be modulo divided by the scalar constant.
            </param>
            <param name="value">
            The pixel value to use as the divisor in the operation.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Modulo divide the image in Viewer1 by a constant
            'Store the result in i
            Algorithms.Modulo (imageViewer1.Image, New PixelValue (50), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Modulo divide the image in Viewer1 by a constant
            //Store the result in i
            Algorithms.Modulo(imageViewer1.Image, new PixelValue(50), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Multiply(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Multiplies an image by an image.
            </summary>
            <param name="sourceA">
            The first image to multiply.
            </param>
            <param name="sourceB">
            The second image to multiply.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images.
            <para>
            	The image type of <format type="italics">sourceB</format> depends on the type 
            of <format type="italics">sourceA</format>, as follows:
            </para>
            	<list type="bullet">
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is U8, <format type="italics">sourceB</format> must be U8, I16, 
            Single, or Rgb32.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is I16 or Single, <format type="italics">sourceB</format> must be U8, 
            I16, or Single.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is Rgb32, <format type="italics">sourceB</format> must be Rgb32 or U8.
            </description>
            		</item>
            	</list>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Multiply the image in Viewer1 by the image in i
            'Store the result in i
            Algorithms.Multiply (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Multiply the image in Viewer1 by the image in i
            //Store the result in i
            Algorithms.Multiply(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Multiply(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Multiplies each pixel in an image by a constant. 
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="value">
            The pixel value by which to multiply.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MultiplyDivide(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Double)">
            <summary>
            Computes a ratio between two source images.
            </summary>
            <param name="sourceA">
            The first input image.
            </param>
            <param name="sourceB">
            The second input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="value">
            The value by which the method multiplies the first image. The default is 255.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images. All images must be the same type.
            <para>
            The method finds the ratio by multiplying each pixel value in the first source image by a constant. 
            The method divides the result of the multiplication by the corresponding pixel in the second source 
            image. The final result is stored in the destination image.
            <para>
            You can use this method to correct a background if the background is lighter than the image. In a 
            background correction, the first source image is the acquired image and the second source image is 
            the background image.
            </para>
            	</para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Perform a MultiplyDivide operation using the images on Viewer1 and Viewer2.
            'Store the result in i
            Algorithms.MultiplyDivide (imageViewer1.Image, imageViewer2.Image, i, 30)
             
            'Perform a MultiplyDivide operation using the images on Viewer1 and i.
            'Store the result in i
            Algorithms.MultiplyDivide (imageViewer1.Image, i, i, 10)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Perform a MultiplyDivide operation using the images on Viewer1 and Viewer2.
            //Store the result in i
            Algorithms.MultiplyDivide(imageViewer1.Image, imageViewer2.Image, i, 30);
                
            //Perform a MultiplyDivide operation using the images on Viewer1 and i.
            //Store the result in i
            Algorithms.MultiplyDivide(imageViewer1.Image, i, i, 10);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Subtract(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Subtracts an image from an image.
            </summary>
            <param name="sourceA">
            The first input image.
            </param>
            <param name="sourceB">
            The second input image.
            </param>
            <param name="destination">
            The destination image. 
            </param>
            <remarks>
            Use this method with U8, I16, Single, or Rgb32 images.
            <para>
            		<format type="italics">sourceA</format> and <format type="italics">destination</format> must of the 
            same type of image. The type of <format type="italics">sourceB</format> depends on the type of 
            <format type="italics">sourceA</format>, as follows:
            </para>
            	<list type="bullet">
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is U8, <format type="italics">sourceB</format> must 
            be U8.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is I16, <format type="italics">sourceB</format> must 
            be I16 or U8.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is Single, <format type="italics">sourceB</format> must 
            be Single, I16, or U8.
            </description>
            		</item>
            		<item>
            			<description>
            If <format type="italics">sourceA</format> is Rgb32, <format type="italics">sourceB</format> must 
            be Rgb32 or U8.
            </description>
            		</item>
            	</list>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Subtract image i from the image in Viewer1
            'Do the subtraction in-place (store the result in i)
            Algorithms.Subtract (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Subtract image i from the image in Viewer1
            //Do the subtraction in-place (store the result in i)
            Algorithms.Subtract(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Subtract(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Subtracts each pixel in an image by a constant. 
            </summary>
            <param name="source">
            The image from which the function subtracts a scalar constant. 
            </param>
            <param name="value">
            The value to subtract from the source image pixels.
            </param>
            <param name="destination">
            The destination image. 
            </param>
            <remarks>
            Use this method with U8, I16, Single, or Rgb32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Subtract a constant from an image in Viewer1
            'Store the result in i
            Algorithms.Subtract (imageViewer1.Image, New PixelValue(50), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Subtract a constant from an image in Viewer1
            //Store the result in i
            Algorithms.Subtract(imageViewer1.Image, new PixelValue(50), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.AnnulusContour)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.AnnulusContour,NationalInstruments.Vision.Analysis.ConcentricRakeDirection)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <param name="direction">Specifies the direction in which the method searches for edges along the concentric paths. You can search in either a clockwise or counterclockwise direction. The default is CounterClockwise.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ConcentricRakeDirection)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <param name="direction">Specifies the direction in which the method searches for edges along the concentric paths. You can search in either a clockwise or counterclockwise direction. The default is CounterClockwise.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.AnnulusContour,NationalInstruments.Vision.Analysis.ConcentricRakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <param name="direction">Specifies the direction in which the method searches for edges along the concentric paths. You can search in either a clockwise or counterclockwise direction. The default is CounterClockwise.
            </param>
            <param name="process">Determines the type of search. The method can return the first edge, both the first and the last edge, or all edges found along each concentric path. The default is All.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ConcentricRakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <param name="direction">Specifies the direction in which the method searches for edges along the concentric paths. You can search in either a clockwise or counterclockwise direction. The default is CounterClockwise.
            </param>
            <param name="process">Determines the type of search. The method can return the first edge, both the first and the last edge, or all edges found along each concentric path. The default is All.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.AnnulusContour,NationalInstruments.Vision.Analysis.ConcentricRakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <param name="direction">Specifies the direction in which the method searches for edges along the concentric paths. You can search in either a clockwise or counterclockwise direction. The default is CounterClockwise.
            </param>
            <param name="process">Determines the type of search. The method can return the first edge, both the first and the last edge, or all edges found along each concentric path. The default is All.
            </param>
            <param name="stepSize">The radial distance in pixels between the concentric paths. The default is 5.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ConcentricRakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <param name="direction">Specifies the direction in which the method searches for edges along the concentric paths. You can search in either a clockwise or counterclockwise direction. The default is CounterClockwise.
            </param>
            <param name="process">Determines the type of search. The method can return the first edge, both the first and the last edge, or all edges found along each concentric path. The default is All.
            </param>
            <param name="stepSize">The radial distance in pixels between the concentric paths. The default is 5.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.AnnulusContour,NationalInstruments.Vision.Analysis.ConcentricRakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <param name="direction">Specifies the direction in which the method searches for edges along the concentric paths. You can search in either a clockwise or counterclockwise direction. The default is CounterClockwise.
            </param>
            <param name="process">Determines the type of search. The method can return the first edge, both the first and the last edge, or all edges found along each concentric path. The default is All.
            </param>
            <param name="stepSize">The radial distance in pixels between the concentric paths. The default is 5.
            </param>
            <param name="edgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel analysis of the edges.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This example assumes that you have an annulus selected on the viewer.
            'Only look for the first rising edge.
            Dim EdgeOptions As New EdgeOptions(EdgePolaritySearchMode.Rising)
            Dim Report As ConcentricRakeReport
            Report = Algorithms.ConcentricRake(imageViewer1.Image, imageViewer1.Roi, ConcentricRakeDirection.Clockwise, EdgeProcess.First, 5, EdgeOptions)
            'Overlay the search arcs
            For Each arcInfo As SearchArcInfo In Report.SearchArcs
                imageViewer1.Image.Overlays.[Default].AddArc(arcInfo.Arc)
            Next
            'Overlay the points found on the image.
            For Each EdgeInfo As EdgeInfo In Report.FirstEdges
                imageViewer1.Image.Overlays.[Default].AddOval(New OvalContour(EdgeInfo.Position.X - 2, EdgeInfo.Position.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.PaintValue)
            Next
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //This example assumes that you have an annulus selected on the viewer.
            //Only look for the first rising edge.
            EdgeOptions edgeOptions = new EdgeOptions(EdgePolaritySearchMode.Rising);
            ConcentricRakeReport report;
            report = Algorithms.ConcentricRake(imageViewer1.Image, imageViewer1.Roi, ConcentricRakeDirection.Clockwise, EdgeProcess.First, 5, edgeOptions)
            //Overlay the search arcs
            foreach (SearchArcInfo arcInfo in report.SearchArcs) {
                imageViewer1.Image.Overlays.Default.AddArc(arcInfo.Arc)
            }
            //Overlay the points found on the image.
            foreach (EdgeInfo edgeInfo in report.FirstEdges) {
                imageViewer1.Image.Overlays.Default.AddOval(new OvalContour(edgeInfo.Position.X - 2, edgeInfo.Position.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.PaintValue)
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConcentricRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ConcentricRakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds edges along concentric circular or angular paths in the image. Edges are determined based on their contrast and slope.</summary>
            <param name="image">
            The input image.
            </param>
            <param name="annulus">Describes the bounding annular region within which the concentric paths are defined.
            </param>
            <param name="direction">Specifies the direction in which the method searches for edges along the concentric paths. You can search in either a clockwise or counterclockwise direction. The default is CounterClockwise.
            </param>
            <param name="process">Determines the type of search. The method can return the first edge, both the first and the last edge, or all edges found along each concentric path. The default is All.
            </param>
            <param name="stepSize">The radial distance in pixels between the concentric paths. The default is 5.
            </param>
            <param name="edgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel analysis of the edges.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport" crefType="Unqualified"/> object with the results of the concentric rake.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the concentric rake:
            <image src="conrake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectPeaksOrValleys(System.Double[],NationalInstruments.Vision.Analysis.PeakOrValley)">
            <summary>
            Finds the location, amplitude, and second derivative of peaks or valleys in the input array.
            </summary>
            <param name="dataArray">
            The input array.
            </param>
            <param name="mode">
            Determines whether to search for peaks or valleys.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PeakValleyReportItem" crefType="Unqualified"/> objects about each peak or valley found. On failure, an exception is thrown.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectPeaksOrValleys(System.Double[],NationalInstruments.Vision.Analysis.PeakOrValley,NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions)">
            <summary>
            Finds the location, amplitude, and second derivative of peaks or valleys in the input array.
            </summary>
            <param name="dataArray">
            The input array.
            </param>
            <param name="mode">
            Determines whether to search for peaks or valleys.
            </param>
            <param name="options">Options the method uses for detecting peaks and valleys.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PeakValleyReportItem" crefType="Unqualified"/> objects about each peak or valley found. On failure, an exception is thrown.</returns>
            <remarks>
            The method is based on an algorithm that fits a quadratic polynomial to a sequential groups 
            of data points. Set the <see cref="P:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.Width" crefType="Unqualified"/> 
            property in the <format type="italics">options</format> property to specify the number of data points to use in the fit. For each peak or valley, 
            the method tests the quadratic fit against the <see cref="P:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.Threshold" crefType="Unqualified"/> 
            value in the <format type="italics">options</format> property. The method ignores peaks with values lower than the Threshold and valleys with 
            troughs higher than Threshold.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Private Sub Run_Click()
                ' This example requires you to draw a region on Viewer1
                ' before you execute this piece of code.
                Dim ProfileReport As RoiProfileReport
                Dim PeakValleyReport As Collection(Of PeakValleyReportItem)
                Dim Index As Integer
                ' Find the profile of the regions on Viewer1.
                ProfileReport = Algorithms.RoiProfile (imageViewer1.Image, imageViewer1.Roi)
                ' Extract the profile array
                Dim ProfileData As Collection(Of Double) = ProfileReport.Report.ProfileData
                Dim ProfileDataArray(ProfileData.Count) As Double
                ProfileData.CopyTo (ProfileDataArray, 0)
                ' Find the location, amplitude and, derivatives of the peaks
                ' along this profile
                PeakValleyReport = Algorithms.DetectPeaksOrValleys (ProfileDataArray, PeakOrValley.Peaks, New DetectPeaksOrValleysOptions (100, 3))
                ' Overlay the points where peaks were found
                For Each ReportItem As PeakValleyReportItem In PeakValleyReport
                    ' Find the index into the ProfileDataArray where the peak was found. This index corresponds
                    ' to the index of the points in ProfileReport.Pixels
                    Index = Math.Round (ReportItem.Position)
                    ' Draw a circular point at ProfileReport.Pixels(Index) -- the point nearest
                    ' to where the peak was found.
                    Dim Point As PointContour = ProfileReport.Pixels(Index)
                    imageViewer1.Image.Overlays.Default.AddOval (New OvalContour (Point.X - 2, Point.Y - 2, 5, 5), Rgb32Value.GreenColor, DrawingMode.PaintValue)
                Next
            End Sub
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            private void run_Click(object sender, EventArgs e) {
                // This example requires you to draw a region on Viewer1
                // before you execute this piece of code.
                RoiProfileReport profileReport;
                Collection&lt;PeakValleyReportItem&gt; peakValleyReport;
                // Find the profile of the regions on Viewer1.
                profileReport = Algorithms.RoiProfile (imageViewer1.Image, imageViewer1.Roi);
                // Extract the profile array
                Collection&lt;double&gt; profileData = profileReport.Report.ProfileData;
                double[] profileDataArray = new double[profileData.Count];
                profileData.CopyTo (profileDataArray, 0);
                // Find the location, amplitude and, derivatives of the peaks
                // along this profile
                peakValleyReport = Algorithms.DetectPeaksOrValleys (profileDataArray, PeakOrValley.Peaks, new DetectPeaksOrValleysOptions (100, 3));
                // Overlay the points where peaks were found
                foreach (PeakValleyReportItem reportItem in peakValleyReport) {
                    // Find the index into the profileDataArray where the peak was found. This index corresponds
                    // to the index of the points in profileReport.Pixels
                    int index = Math.Round (reportItem.Position);
                    // Draw a circular point at profileReport.Pixels(Index) -- the point nearest
                    // to where the peak was found.
                    PointContour point = profileReport.Pixels(Index);
                    imageViewer1.Image.Overlays.Default.AddOval (new OvalContour (point.X - 2, point.Y - 2, 5, 5), Rgb32Value.GreenColor, DrawingMode.PaintValue);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectRotation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.PointContour,System.Int32)">
            <summary>
            Detects the rotational shift between two images, usually a reference image containing a part at a known orientation and another image containing the part in an unknown orientation.
            </summary>
            <param name="reference">
            The reference image.
            </param>
            <param name="test">
            The test image.
            </param>
            <param name="referenceCenter">
            The center of the circle in the reference image.
            </param>
            <param name="testCenter">
            The center of the circle in the test image.
            </param>
            <param name="radius">
            The radius of the circle used to detect rotation.
            </param>
            <returns>
            A non-zero value that specifies the rotational shift between the reference image and the test image. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with image types U8, I16, and Single. The method extracts pixel values around a circular region in the reference image and compares these values to the same region in the test image. The algorithm looks for the rotational shift between those two samples.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectRotation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.PointContour,System.Int32,System.Double)">
            <summary>
            Detects the rotational shift between two images, usually a reference image containing a part at a known orientation and another image containing the part in an unknown orientation.
            </summary>
            <param name="reference">
            The reference image.
            </param>
            <param name="test">
            The test image.
            </param>
            <param name="referenceCenter">
            The center of the circle in the reference image.
            </param>
            <param name="testCenter">
            The center of the circle in the test image.
            </param>
            <param name="radius">
            The radius of the circle used to detect rotation.
            </param>
            <param name="precision">The sampling period, in degrees, of the pixel values extracted from the circular region. The sampling period directly affects the speed of the method. If the sampling period is high (the number of samples along the circular region are few), the processing speed increases at the cost of reduced accuracy in the computed rotational shift. The method generates an error if the sampling period is less than or equal to 0.
            </param>
            <returns>
            A non-zero value that specifies the rotational shift between the reference image and the test image. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with image types U8, I16, and Single. The method extracts pixel values around a circular region in the reference image and compares these values to the same region in the test image. The algorithm looks for the rotational shift between those two samples.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i as New VisionImage
            Dim testCenter as New PointContour
            Dim referenceCenter as New PointContour
            Dim angle as Double
             
            ' Load the test image into i
             
            ' Set the test and reference centers 
            referenceCenter.Initialize (imageViewer1.Image.Width/2, imageViewer1.Image.Height/2)
            testCenter.Initialize (i.Width/2, i.Height/2)
             
            ' Detect the rotational shift between the image on Viewer1 and i
            angle = Algorithms.DetectRotation (imageViewer1.Image, i, referenceCenter, testCenter, 10, angle)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            PointContour testCenter = new PointContour();
            PointContour referenceCenter = new PointContour();
            double angle = 0;
                
            // Load the test image into i
              
            // Set the test and reference centers 
            referenceCenter.initialize(imageViewer1.Image.width / 2, imageViewer1.Image.height / 2);
            testCenter.Initialize(i.width / 2, i.height / 2);
                
            // Detect the rotational shift between the image on Viewer1 and i
            angle = Algorithms.DetectRotation(imageViewer1.Image, i, referenceCenter, testCenter, 10, angle);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.EdgeTool(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Finds edges along an ROI in an image.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The ROI to find edges along.
            </param>
            <returns>
            An EdgeReport with information about the detected edges. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.EdgeTool(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.EdgeProcess)">
            <summary>
            Finds edges along an ROI in an image.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The ROI to find edges along.
            </param>
            <param name="process">
            The type of search. The method can return the first edge, both the first edge and the last edge, all edges 
            found along the search path, or the strongest edge found along the search path. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.EdgeProcess.All" crefType="PartiallyQualified"/>.
            </param>
            <returns>
            An EdgeReport with information about the detected edges. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.EdgeTool(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.EdgeProcess,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds edges along an ROI in an image.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The ROI to find edges along.
            </param>
            <param name="process">
            The type of search. The method can return the first edge, both the first edge and the last edge, all edges 
            found along the search path, or the strongest edge found along the search path. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.EdgeProcess.All" crefType="PartiallyQualified"/>.
            </param>
            <param name="options">
            The parameters that are used to compute the edge profile and detect edges. 
            </param>
            <returns>
            An EdgeReport with information about the detected edges. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.EdgeTool(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.EdgeProcess,NationalInstruments.Vision.Analysis.EdgeOptions,System.Boolean)">
            <summary>
            Finds edges along an ROI in an image.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The ROI to find edges along.
            </param>
            <param name="process">
            The type of search. The method can return the first edge, both the first edge and the last edge, all edges 
            found along the search path, or the strongest edge found along the search path. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.EdgeProcess.All" crefType="PartiallyQualified"/>.
            </param>
            <param name="options">
            The parameters that are used to compute the edge profile and detect edges. 
            </param>
            <param name="reverseDirection">
            Set to True to reverse the direction that the ROI traverses to find edges. The default is False.
            </param>
            <returns>
            An EdgeReport with information about the detected edges. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Find the edges along the image in imageViewer1, using the ROI in imageViewer1.
            Dim Report As EdgeReport = Algorithms.EdgeTool (imageViewer1.Image, imageViewer1.Roi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Find the edges along the image in imageViewer1, using the ROI in imageViewer1.
            EdgeReport report = Algorithms.EdgeTool(imageViewer1.Image, imageViewer1.Roi);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Detects straight edges inside an ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <returns>
            A FindEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindEdgeOptions)">
            <summary>
            Detects straight edges inside an ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <param name="findEdgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel 
            analysis of the edges.
            </param>
            <returns>
            A FindEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindEdgeOptions,NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            Detects straight edges inside an ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <param name="findEdgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel 
            analysis of the edges.
            </param>
            <param name="transform">
            Specifies how to transform the location of the edge detection based on the difference between the reference 
            coordinate system and the measurement coordinate system.
            </param>
            <returns>
            A FindEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            ' Find the edges in the image in Viewer1 in a particular rectangle.
            Dim Report As FindEdgeReport = Algorithms.FindEdge(imageViewer1.Image, New Roi(New Shape() {New RectangleContour(10, 0, 80, 80)})
             
            ' Overlay the found lines on the image.
            For Each Edge As StraightEdgeReportItem In Report.StraightEdges
                imageViewer1.Image.Overlays.Default.AddLine(Edge.StraightEdge)
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Find the edges in the image in Viewer1 in a particular rectangle.
            FindEdgeReport report = Algorithms.FindEdge(imageViewer1.Image, new Roi(new Shape[] {new RectangleContour(10, 0, 80, 80)});
             
            // Overlay the found lines on the image.
            foreach (StraightEdgeReportItem edge in report.StraightEdges) {
                imageViewer1.Image.Overlays.Default.AddLine(edge.StraightEdge)
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindTransformRectangle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Computes a coordinate transform based on the position of an object in a search area of an image. The method 
            uses the location and orientation of the coordinate system it finds to create the reference system of a 
            coordinate transform or to update the measurement system of an existing coordinate transform.
            </summary>
            <param name="image">
            The image which the method uses to compute the coordinate transform. 
            </param>
            <param name="roi">
            Defines the area within which the edge detection is performed.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FindTransformReport" crefType="Unqualified"/> object containing the 
            axes that were located.
            </returns>
            <remarks>
            This method uses the following algorithm. First the method determines the position of the main axis of the 
            coordinate system. It locates the intersection points between a set of parallel search lines, or rake, 
            and the edge of an object. The method determines the intersection points based on their contrast, width, and 
            steepness. The method calculates a best-fit line using the points found. This line defines the main axis of the 
            coordinate system. The method then locates the intersection points between a set of parallel search lines that 
            are perpendicular to the main axis and the edge of the object. It calculates a hit-line to the object from the 
            edge closest to the search area detected and perpendicular to the main axis. This line defines the secondary axis 
            of the coordinate system. The intersection between the main axis and secondary axis is the origin of the 
            coordinate system.
            <para>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindTransformRectangle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindTransformMode)">
            <summary>
            Computes a coordinate transform based on the position of an object in a search area of an image. The method 
            uses the location and orientation of the coordinate system it finds to create the reference system of a 
            coordinate transform or to update the measurement system of an existing coordinate transform.
            </summary>
            <param name="image">
            The image which the method uses to compute the coordinate transform. 
            </param>
            <param name="roi">
            Defines the area within which the edge detection is performed.
            </param>
            <param name="mode">
            Specifies how the method updates the coordinate transform. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.FindTransformMode.FindReference" crefType="PartiallyQualified"/>
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FindTransformReport" crefType="Unqualified"/> object containing the 
            axes that were located.
            </returns>
            <remarks>
            This method uses the following algorithm. First the method determines the position of the main axis of the 
            coordinate system. It locates the intersection points between a set of parallel search lines, or rake, 
            and the edge of an object. The method determines the intersection points based on their contrast, width, and 
            steepness. The method calculates a best-fit line using the points found. This line defines the main axis of the 
            coordinate system. The method then locates the intersection points between a set of parallel search lines that 
            are perpendicular to the main axis and the edge of the object. It calculates a hit-line to the object from the 
            edge closest to the search area detected and perpendicular to the main axis. This line defines the secondary axis 
            of the coordinate system. The intersection between the main axis and secondary axis is the origin of the 
            coordinate system. 
            <para>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindTransformRectangle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindTransformMode,NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            Computes a coordinate transform based on the position of an object in a search area of an image. The method 
            uses the location and orientation of the coordinate system it finds to create the reference system of a 
            coordinate transform or to update the measurement system of an existing coordinate transform.
            </summary>
            <param name="image">
            The image which the method uses to compute the coordinate transform. 
            </param>
            <param name="roi">
            Defines the area within which the edge detection is performed.
            </param>
            <param name="mode">
            Specifies how the method updates the coordinate transform. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.FindTransformMode.FindReference" crefType="PartiallyQualified"/>
            </param>
            <param name="transform">
            Specifies how to transform pixel coordinates based on the difference between the reference coordinate system 
            and the measurement coordinate system.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FindTransformReport" crefType="Unqualified"/> object containing the 
            axes that were located.
            </returns>
            <remarks>
            This method uses the following algorithm. First the method determines the position of the main axis of the 
            coordinate system. It locates the intersection points between a set of parallel search lines, or rake, 
            and the edge of an object. The method determines the intersection points based on their contrast, width, and 
            steepness. The method calculates a best-fit line using the points found. This line defines the main axis of the 
            coordinate system. The method then locates the intersection points between a set of parallel search lines that 
            are perpendicular to the main axis and the edge of the object. It calculates a hit-line to the object from the 
            edge closest to the search area detected and perpendicular to the main axis. This line defines the secondary axis 
            of the coordinate system. The intersection between the main axis and secondary axis is the origin of the 
            coordinate system.
            <para>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindTransformRectangle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindTransformMode,NationalInstruments.Vision.Analysis.CoordinateTransform,NationalInstruments.Vision.Analysis.FindTransformRectOptions)">
            <summary>
            Computes a coordinate transform based on the position of an object in a search area of an image. The method 
            uses the location and orientation of the coordinate system it finds to create the reference system of a 
            coordinate transform or to update the measurement system of an existing coordinate transform.
            </summary>
            <param name="image">
            The image which the method uses to compute the coordinate transform. 
            </param>
            <param name="roi">
            Defines the area within which the edge detection is performed.
            </param>
            <param name="mode">
            Specifies how the method updates the coordinate transform. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.FindTransformMode.FindReference" crefType="PartiallyQualified"/>
            </param>
            <param name="transform">
            Specifies how to transform pixel coordinates based on the difference between the reference coordinate system 
            and the measurement coordinate system.
            </param>
            <param name="findTransformRectOptions">
            Specifies options for detecting edges along search lines in the ROI and for overlaying search information.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FindTransformReport" crefType="Unqualified"/> object containing the 
            axes that were located.
            </returns>
            <remarks>
            This method uses the following algorithm. First the method determines the position of the main axis of the 
            coordinate system. It locates the intersection points between a set of parallel search lines, or rake, 
            and the edge of an object. The method determines the intersection points based on their contrast, width, and 
            steepness. The method calculates a best-fit line using the points found. This line defines the main axis of the 
            coordinate system. The method then locates the intersection points between a set of parallel search lines that 
            are perpendicular to the main axis and the edge of the object. It calculates a hit-line to the object from the 
            edge closest to the search area detected and perpendicular to the main axis. This line defines the secondary axis 
            of the coordinate system. The intersection between the main axis and secondary axis is the origin of the 
            coordinate system.
            <para>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Find the transformation in the image in Viewer1.
            Dim Report As FindTransformReport = Algorithms.FindTransformRectangle (imageViewer1.Image, imageViewer1.Roi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Find the transformation in the image in Viewer1.
            FindTransformReport report = Algorithms.FindTransformRectangle(imageViewer1.Image, imageViewer1.Roi);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindTransformRectangles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi)">
            <summary>
            Computes a coordinate transform based on the position of an object in a search area of an image. The method uses 
            the location and orientation of the coordinate system it finds to create the reference system of a 
            coordinate transform or to update the measurement system of an existing coordinate transform.
            </summary>
            <param name="image">
            The image which the method uses to compute the coordinate transform. 
            </param>
            <param name="primaryRoi">
            Defines the area within which the edge detection is performed for the primary axis. 
            </param>
            <param name="secondaryRoi">
            Defines the area within which the edge detection is performed for the secondary axis. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FindTransformReport" crefType="Unqualified"/> object containing the 
            axes that were located.
            </returns>
            <remarks>
            This method uses the following algorithm. First the method determines the position of the main axis of the 
            coordinate system. It locates the intersection points between a set of parallel search lines in the primary 
            rectangle and the edge of an object. The method determines the intersection points based on their contrast, 
            width, and steepness. The method calculates a best-fit line through the points found. This line defines the 
            main axis of the coordinate system. The process is repeated perpendicularly in the secondary rectangle in 
            order to locate the secondary axis. The intersection between the main axis and the secondary axis is the origin 
            of the coordinate system.
            <para>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindTransformRectangles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindTransformMode)">
            <summary>
            Computes a coordinate transform based on the position of an object in a search area of an image. The method uses 
            the location and orientation of the coordinate system it finds to create the reference system of a 
            coordinate transform or to update the measurement system of an existing coordinate transform.
            </summary>
            <param name="image">
            The image which the method uses to compute the coordinate transform. 
            </param>
            <param name="primaryRoi">
            Defines the area within which the edge detection is performed for the primary axis. 
            </param>
            <param name="secondaryRoi">
            Defines the area within which the edge detection is performed for the secondary axis. 
            </param>
            <param name="mode">
            Specifies how the method updates the coordinate transform. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.FindTransformMode.FindReference" crefType="PartiallyQualified"/>
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FindTransformReport" crefType="Unqualified"/> object containing the 
            axes that were located.
            </returns>
            <remarks>
            This method uses the following algorithm. First the method determines the position of the main axis of the 
            coordinate system. It locates the intersection points between a set of parallel search lines in the primary 
            rectangle and the edge of an object. The method determines the intersection points based on their contrast, 
            width, and steepness. The method calculates a best-fit line through the points found. This line defines the 
            main axis of the coordinate system. The process is repeated perpendicularly in the secondary rectangle in 
            order to locate the secondary axis. The intersection between the main axis and the secondary axis is the origin 
            of the coordinate system.
            <para>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindTransformRectangles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindTransformMode,NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            Computes a coordinate transform based on the position of an object in a search area of an image. The method uses 
            the location and orientation of the coordinate system it finds to create the reference system of a 
            coordinate transform or to update the measurement system of an existing coordinate transform.
            </summary>
            <param name="image">
            The image which the method uses to compute the coordinate transform. 
            </param>
            <param name="primaryRoi">
            Defines the area within which the edge detection is performed for the primary axis. 
            </param>
            <param name="secondaryRoi">
            Defines the area within which the edge detection is performed for the secondary axis. 
            </param>
            <param name="mode">
            Specifies how the method updates the coordinate transform. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.FindTransformMode.FindReference" crefType="PartiallyQualified"/>
            </param>
            <param name="transform">
            Specifies how to transform pixel coordinates based on the difference between the reference coordinate system 
            and the measurement coordinate system.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FindTransformReport" crefType="Unqualified"/> object containing the 
            axes that were located.
            </returns>
            <remarks>
            This method uses the following algorithm. First the method determines the position of the main axis of the 
            coordinate system. It locates the intersection points between a set of parallel search lines in the primary 
            rectangle and the edge of an object. The method determines the intersection points based on their contrast, 
            width, and steepness. The method calculates a best-fit line through the points found. This line defines the 
            main axis of the coordinate system. The process is repeated perpendicularly in the secondary rectangle in 
            order to locate the secondary axis. The intersection between the main axis and the secondary axis is the origin 
            of the coordinate system.
            <para>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindTransformRectangles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindTransformMode,NationalInstruments.Vision.Analysis.CoordinateTransform,NationalInstruments.Vision.Analysis.FindTransformRectsOptions)">
            <summary>
            Computes a coordinate transform based on the position of an object in a search area of an image. The method uses 
            the location and orientation of the coordinate system it finds to create the reference system of a 
            coordinate transform or to update the measurement system of an existing coordinate transform.
            </summary>
            <param name="image">
            The image which the method uses to compute the coordinate transform. 
            </param>
            <param name="primaryRoi">
            Defines the area within which the edge detection is performed for the primary axis. 
            </param>
            <param name="secondaryRoi">
            Defines the area within which the edge detection is performed for the secondary axis. 
            </param>
            <param name="mode">
            Specifies how the method updates the coordinate transform. The default is 
            <see cref="F:NationalInstruments.Vision.Analysis.FindTransformMode.FindReference" crefType="PartiallyQualified"/>
            </param>
            <param name="transform">
            Specifies how to transform pixel coordinates based on the difference between the reference coordinate system 
            and the measurement coordinate system.
            </param>
            <param name="findTransformRectsOptions">
            Specifies options for detecting edges along search lines in the ROI and for overlaying search information.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FindTransformReport" crefType="Unqualified"/> object containing the 
            axes that were located.
            </returns>
            <remarks>
            This method uses the following algorithm. First the method determines the position of the main axis of the 
            coordinate system. It locates the intersection points between a set of parallel search lines in the primary 
            rectangle and the edge of an object. The method determines the intersection points based on their contrast, 
            width, and steepness. The method calculates a best-fit line through the points found. This line defines the 
            main axis of the coordinate system. The process is repeated perpendicularly in the secondary rectangle in 
            order to locate the secondary axis. The intersection between the main axis and the secondary axis is the origin 
            of the coordinate system.
            <para>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Set up the ROIs.
            Dim primaryRoi As New Roi(New Shape() {New RectangleContour(0, 0, 80, 80)})
            Dim secondaryRoi As New Roi(New Shape() {New RectangleContour(150, 0, 80, 80)})
             
            'Find the transformation in the image in Viewer1.
            Dim Report As FindTransformReport = Algorithms.FindTransformRectangles (imageViewer1.Image, primaryRoi, secondaryRoi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Set up the ROIs.
            Roi primaryRoi = new Roi(new Shape[] {new RectangleContour(0, 0, 80, 80)});
            Roi secondaryRoi = new Roi(new Shape[] {new RectangleContour(150, 0, 80, 80)});
             
            //Find the transformation in the image in Viewer1.
            FindTransformReport report = Algorithms.FindTransformRectangles(imageViewer1.Image, primaryRoi, secondaryRoi);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Finds edges along a set of parallel lines defined inside a rectangular region. Edges are determined based on their 
            contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangle or rotated rectangular region within which the edge detection is performed.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.RakeReport" crefType="Unqualified"/> object containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the rake:
            <image src="rake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.RakeDirection)">
            <summary>
            Finds edges along a set of parallel lines defined inside a rectangular region. Edges are determined based on their 
            contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangle or rotated rectangular region within which the edge detection is performed.
            </param>
            <param name="direction">
            Defines the direction along which edges are searched for along the lines. The default is RakeDirection.LeftToRight.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.RakeReport" crefType="Unqualified"/> object containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the rake:
            <image src="rake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.RakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess)">
            <summary>
            Finds edges along a set of parallel lines defined inside a rectangular region. Edges are determined based on their 
            contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangle or rotated rectangular region within which the edge detection is performed.
            </param>
            <param name="direction">
            Defines the direction along which edges are searched for along the lines. The default is RakeDirection.LeftToRight.
            </param>
            <param name="process">
            Determines the type of search. The method can return the first edge, both the first and the last edge, all edges, or the
            best edge found along the paths. The default is All.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.RakeReport" crefType="Unqualified"/> object containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the rake:
            <image src="rake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.RakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32)">
            <summary>
            Finds edges along a set of parallel lines defined inside a rectangular region. Edges are determined based on their 
            contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangle or rotated rectangular region within which the edge detection is performed.
            </param>
            <param name="direction">
            Defines the direction along which edges are searched for along the lines. The default is RakeDirection.LeftToRight.
            </param>
            <param name="process">
            Determines the type of search. The method can return the first edge, both the first and the last edge, all edges, or the
            best edge found along the paths. The default is All.
            </param>
            <param name="stepSize">
            Defines the distance, in pixels, between the parallel lines inside the rectangular region. The default is 5.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.RakeReport" crefType="Unqualified"/> object containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the rake:
            <image src="rake.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.RakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds edges along a set of parallel lines defined inside a rectangular region. Edges are determined based on their 
            contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangle or rotated rectangular region within which the edge detection is performed.
            </param>
            <param name="direction">
            Defines the direction along which edges are searched for along the lines. The default is RakeDirection.LeftToRight.
            </param>
            <param name="process">
            Determines the type of search. The method can return the first edge, both the first and the last edge, all edges, or the
            best edge found along the paths. The default is All.
            </param>
            <param name="stepSize">
            Defines the distance, in pixels, between the parallel lines inside the rectangular region. The default is 5.
            </param>
            <param name="options">
            Defines the characteristics that the method uses to find the edges and the parameters it needs for 
            subpixel analysis of the edges.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.RakeReport" crefType="Unqualified"/> object containing information 
            about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the rake:
            <image src="rake.gif"/>
            </remarks>
            <example>
            	<code lang="VB.NET">
            [Visual Basic]
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This routine assumes that you have a rectangle or rotated rectangle selected on the viewer
             
            'Perform a rake. Find only the first edge along each line
            Dim Report As RakeReport = Algorithms.Rake (imageViewer1.Image, imageViewer1.Roi, RakeDirection.LeftToRight, EdgeProcess.First)
            'Overlay the search lines
            For Each LineInfo As SearchLineInfo In Report.SearchLines
                imageViewer1.Image.Overlays.Default.AddLine (LineInfo.Line, Rgb32Value.BlueColor)
            Next
            'Overlay edge points found
            For Each Edge As EdgeInfo In Report.FirstEdges
                Dim pt As PointContour = Edge.Position
                imageViewer1.Image.Overlays.Default.AddOval (New OvalContour(pt.X - 2, pt.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.DrawValue)
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // This routine assumes that you have a rectangle or rotated rectangle selected on the viewer
             
            // Perform a rake. Find only the first edge along each line
            RakeReport report = Algorithms.Rake(imageViewer1.Image, imageViewer1.Roi, RakeDirection.LeftToRight, EdgeProcess.First);
            // Overlay the search lines
            foreach (SearchLineInfo lineInfo in report.SearchLines) {
                imageViewer1.Image.Overlays.Default.AddLine(lineInfo.Line, Rgb32Value.BlueColor);
            }
            // Overlay edge points found
            foreach (EdgeInfo edge in report.FirstEdges) {
                PointContour pt = edge.Position;
                imageViewer1.Image.Overlays.Default.AddOval(New OvalContour(pt.X - 2, pt.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.DrawValue);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FirstEdgeRake(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.RakeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds edges along a set of parallel lines defined inside a rectangular region. Edges are determined based on their 
            contrast and slope. Only the first edge along each search line is returned.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangle or rotated rectangular region within which the edge detection is performed.
            </param>
            <param name="direction">
            Defines the direction along which edges are searched for along the lines. The default is RakeDirection.LeftToRight.
            </param>
            <param name="process">
            Determines the type of search. The method can return the first edge, both the first and the last edge, all edges, or the
            best edge found along the paths. The default is All.
            </param>
            <param name="stepSize">
            Defines the distance, in pixels, between the parallel lines inside the rectangular region. The default is 5.
            </param>
            <param name="options">
            Defines the characteristics that the method uses to find the edges and the parameters it needs for 
            subpixel analysis of the edges.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport" crefType="Unqualified"/> object containing information 
            about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the rake:
            <image src="rake.gif"/>
            </remarks>
            <example>
            	<code lang="VB.NET">
            [Visual Basic]
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This routine assumes that you have a rectangle or rotated rectangle selected on the viewer
             
            'Perform a rake. Find only the first edge along each line
            Dim Report As RakeReport = Algorithms.Rake (imageViewer1.Image, imageViewer1.Roi, RakeDirection.LeftToRight, EdgeProcess.First)
            'Overlay the search lines
            For Each LineInfo As SearchLineInfo In Report.SearchLines
                imageViewer1.Image.Overlays.Default.AddLine (LineInfo.Line, Rgb32Value.BlueColor)
            Next
            'Overlay edge points found
            For Each Edge As EdgeInfo In Report.FirstEdges
                Dim pt As PointContour = Edge.Position
                imageViewer1.Image.Overlays.Default.AddOval (New OvalContour(pt.X - 2, pt.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.DrawValue)
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // This routine assumes that you have a rectangle or rotated rectangle selected on the viewer
             
            // Perform a rake. Find only the first edge along each line
            RakeReport report = Algorithms.Rake(imageViewer1.Image, imageViewer1.Roi, RakeDirection.LeftToRight, EdgeProcess.First);
            // Overlay the search lines
            foreach (SearchLineInfo lineInfo in report.SearchLines) {
                imageViewer1.Image.Overlays.Default.AddLine(lineInfo.Line, Rgb32Value.BlueColor);
            }
            // Overlay edge points found
            foreach (EdgeInfo edge in report.FirstEdges) {
                PointContour pt = edge.Position;
                imageViewer1.Image.Overlays.Default.AddOval(New OvalContour(pt.X - 2, pt.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.DrawValue);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.SimpleEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Finds prominent edges along a collection of pixel coordinates. This method can return the first, 
            both the first and the last, or all the edges found.
            </summary>
            <param name="image">
            The image in which to find edges.
            </param>
            <param name="points">
            The ROI containing the path along which the method detects the edges.
            </param>
            <returns>
            A collection of PointContour objects containing the coordinates of the edge points.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            <para>
            You can use this method in conjunction with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method to 
            obtain the PointContours that define the path.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.SimpleEdge(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Finds prominent edges along a collection of pixel coordinates. This method can return the first, 
            both the first and the last, or all the edges found.
            </summary>
            <param name="image">
            The image in which to find edges.
            </param>
            <param name="points">
            The coordinates of the path along which the method detects the edges.
            </param>
            <returns>
            A collection of PointContour objects containing the coordinates of the edge points.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            <para>
            You can use this method in conjunction with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method to 
            obtain the PointContours that define the path.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.SimpleEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SimpleEdgeOptions)">
            <summary>
            Finds prominent edges along a collection of pixel coordinates. This method can return the first, 
            both the first and the last, or all the edges found.
            </summary>
            <param name="image">
            The image in which to find edges.
            </param>
            <param name="points">
            The ROI containing the path along which the method detects the edges.
            </param>
            <param name="options">
            Describes how you want the function to find edges. 
            </param>
            <returns>
            A collection of PointContour objects containing the coordinates of the edge points.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            <para>
            You can use this method in conjunction with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method to 
            obtain the PointContours that define the path.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.SimpleEdge(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.SimpleEdgeOptions)">
            <summary>
            Finds prominent edges along a collection of pixel coordinates. This method can return the first, 
            both the first and the last, or all the edges found.
            </summary>
            <param name="image">
            The image in which to find edges.
            </param>
            <param name="points">
            The coordinates of the path along which the method detects the edges.
            </param>
            <param name="options">
            Describes how you want the function to find edges. 
            </param>
            <returns>
            A collection of PointContour objects containing the coordinates of the edge points.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            <para>
            You can use this method in conjunction with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method to 
            obtain the PointContours that define the path.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Find the edge coordinates along a path defined by regions
            'on Viewer1 and display the coordinates on the image.
             
            'First, find the coordinates of the points along the path
            'defined by the regions on Viewer1
            Dim Profile As RoiProfileReport = Algorithms.RoiProfile (imageViewer1.Image, imageViewer1.Roi)
             
            'Find the edges along the selected path
            Dim EdgeCoordinates As Collection(Of PointContour) = Algorithms.SimpleEdge (imageViewer1.Image, Profile.Pixels)
             
            'Display the results
            For Each Pt As PointContour In EdgeCoordinates
                Dim oval As New OvalContour(Pt.X - 4, Pt.Y - 4, 8, 8)
                imageViewer1.Image.Overlays.Default.AddOval (oval, Rgb32Value.RedColor, DrawingMode.PaintValue)
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Find the edge coordinates along a path defined by regions
            // on Viewer1 and display the coordinates on the image.
             
            // First, find the coordinates of the points along the path
            // defined by the regions on Viewer1
            RoiProfileReport profile = Algorithms.RoiProfile(imageViewer1.Image, imageViewer1.Roi);
             
            // Find the edges along the selected path
            Collection&lt;PointContour&gt; edgeCoordinates = Algorithms.SimpleEdge (imageViewer1.Image, profile.Pixels);
             
            // Display the results
            foreach (PointContour pt in edgeCoordinates) {
                OvalContour oval = new OvalContour(pt.X - 4, pt.Y - 4, 8, 8);
                imageViewer1.Image.Overlays.Default.AddOval(oval, Rgb32Value.RedColor, DrawingMode.PaintValue);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Spoke(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Finds edges along radial lines specified inside an annular region. 
            The edges are determined based on their contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangular region the function looks in for the edges. The first contour of roi must be a rectangle or a rotated rectangle. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.SpokeReport" crefType="Unqualified"/> object 
            containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the spoke:
            <image src="spoke.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Spoke(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SpokeDirection)">
            <summary>
            Finds edges along radial lines specified inside an annular region. 
            The edges are determined based on their contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangular region the function looks in for the edges. The first contour of roi must be a rectangle or a rotated rectangle. 
            </param>
            <param name="direction">
            Defines the direction along which the edges are searched for. The default is OutsideToInside.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.SpokeReport" crefType="Unqualified"/> object 
            containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the spoke:
            <image src="spoke.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Spoke(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SpokeDirection,NationalInstruments.Vision.Analysis.EdgeProcess)">
            <summary>
            Finds edges along radial lines specified inside an annular region. 
            The edges are determined based on their contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangular region the function looks in for the edges. The first contour of roi must be a rectangle or a rotated rectangle. 
            </param>
            <param name="direction">
            Defines the direction along which the edges are searched for. The default is OutsideToInside.
            </param>
            <param name="process">
            Determines the type of search. The method can return the first edge, both the first and the last edge, 
            all edges, or the best edge found along the paths. The default is All.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.SpokeReport" crefType="Unqualified"/> object 
            containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the spoke:
            <image src="spoke.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Spoke(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SpokeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32)">
            <summary>
            Finds edges along radial lines specified inside an annular region. 
            The edges are determined based on their contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangular region the function looks in for the edges. The first contour of roi must be a rectangle or a rotated rectangle. 
            </param>
            <param name="direction">
            Defines the direction along which the edges are searched for. The default is OutsideToInside.
            </param>
            <param name="process">
            Determines the type of search. The method can return the first edge, both the first and the last edge, 
            all edges, or the best edge found along the paths. The default is All.
            </param>
            <param name="stepSize">
            Specifies the number of pixels between each search line. The default is 5.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.SpokeReport" crefType="Unqualified"/> object 
            containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the spoke:
            <image src="spoke.gif"/>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Spoke(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SpokeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds edges along radial lines specified inside an annular region. 
            The edges are determined based on their contrast and slope.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangular region the function looks in for the edges. The first contour of roi must be a rectangle or a rotated rectangle. 
            </param>
            <param name="direction">
            Defines the direction along which the edges are searched for. The default is OutsideToInside.
            </param>
            <param name="process">
            Determines the type of search. The method can return the first edge, both the first and the last edge, 
            all edges, or the best edge found along the paths. The default is All.
            </param>
            <param name="stepSize">
            Specifies the number of pixels between each search line. The default is 5.
            </param>
            <param name="options">
            Specifies the parameters that are used to compute the edge profile and detect edges. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.SpokeReport" crefType="Unqualified"/> object 
            containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the spoke:
            <image src="spoke.gif"/>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This routine assumes that you have an annulus selected on the viewer
             
            'Perform a spoke. Find only the first edge along each line
            Dim Report As SpokeReport = Algorithms.Spoke (imageViewer1.Image, imageViewer1.Roi, SpokeDirection.OutsideToInside, EdgeProcess.First, 10)
             
            'Overlay the search lines
            For Each LineInfo As SearchLineInfo In Report.SearchLines
                imageViewer1.Image.Overlays.Default.AddLine (LineInfo.Line, Rgb32Value.BlueColor)
            Next
            'Overlay edge points found
            For Each Edge As EdgeInfo In Report.FirstEdges
                Dim pt As PointContour = Edge.Position
                imageViewer1.Image.Overlays.Default.AddOval (New OvalContour(pt.X - 2, pt.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.DrawValue)
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // This routine assumes that you have an annulus selected on the viewer
             
            // Perform a spoke. Find only the first edge along each line
            SpokeReport report = Algorithms.Spoke(imageViewer1.Image, imageViewer1.Roi, SpokeDirection.OutsideToInside, EdgeProcess.First, 10);
             
            // Overlay the search lines
            foreach (SearchLineInfo lineInfo in report.SearchLines) {
                imageViewer1.Image.Overlays.Default.AddLine(lineInfo.Line, Rgb32Value.BlueColor);
            }
            // Overlay edge points found
            foreach (EdgeInfo edge in report.FirstEdges) {
                PointContour pt = edge.Position;
                imageViewer1.Image.Overlays.Default.AddOval(New OvalContour(pt.X - 2, pt.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.DrawValue);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FirstEdgeSpoke(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SpokeDirection,NationalInstruments.Vision.Analysis.EdgeProcess,System.Int32,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds edges along radial lines specified inside an annular region. 
            The edges are determined based on their contrast and slope.
            Finds and returns only the first edges for optimization.
            </summary>
            <param name="image">
            The image in which to find the edges.
            </param>
            <param name="roi">
            The rectangular region the function looks in for the edges. The first contour of roi must be a rectangle or a rotated rectangle. 
            </param>
            <param name="direction">
            Defines the direction along which the edges are searched for. The default is OutsideToInside.
            </param>
            <param name="process">
            Determines the type of search. The method can return the first edge, both the first and the last edge, 
            all edges, or the best edge found along the paths. The default is All.
            </param>
            <param name="stepSize">
            Specifies the number of pixels between each search line. The default is 5.
            </param>
            <param name="options">
            Specifies the parameters that are used to compute the edge profile and detect edges. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.SpokeReport" crefType="Unqualified"/> object 
            containing information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images. The following image illustrates the spoke:
            <image src="spoke.gif"/>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This routine assumes that you have an annulus selected on the viewer
             
            'Perform a spoke. Find only the first edge along each line
            Dim Report As SpokeReport = Algorithms.Spoke (imageViewer1.Image, imageViewer1.Roi, SpokeDirection.OutsideToInside, EdgeProcess.First, 10)
             
            'Overlay the search lines
            For Each LineInfo As SearchLineInfo In Report.SearchLines
                imageViewer1.Image.Overlays.Default.AddLine (LineInfo.Line, Rgb32Value.BlueColor)
            Next
            'Overlay edge points found
            For Each Edge As EdgeInfo In Report.FirstEdges
                Dim pt As PointContour = Edge.Position
                imageViewer1.Image.Overlays.Default.AddOval (New OvalContour(pt.X - 2, pt.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.DrawValue)
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // This routine assumes that you have an annulus selected on the viewer
             
            // Perform a spoke. Find only the first edge along each line
            SpokeReport report = Algorithms.Spoke(imageViewer1.Image, imageViewer1.Roi, SpokeDirection.OutsideToInside, EdgeProcess.First, 10);
             
            // Overlay the search lines
            foreach (SearchLineInfo lineInfo in report.SearchLines) {
                imageViewer1.Image.Overlays.Default.AddLine(lineInfo.Line, Rgb32Value.BlueColor);
            }
            // Overlay edge points found
            foreach (EdgeInfo edge in report.FirstEdges) {
                PointContour pt = edge.Position;
                imageViewer1.Image.Overlays.Default.AddOval(New OvalContour(pt.X - 2, pt.Y - 2, 5, 5), Rgb32Value.RedColor, DrawingMode.DrawValue);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SearchDirection)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <param name="direction">
            The direction to search for straight lines. The default is LeftToRight.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SearchDirection,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <param name="direction">
            The direction to search for straight lines. The default is LeftToRight.
            </param>
            <param name="edgeOptions">
            Specifies the parameters that are used to compute the edge profile and detect edges. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SearchDirection,NationalInstruments.Vision.Analysis.EdgeOptions,NationalInstruments.Vision.Analysis.StraightEdgeOptions)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <param name="direction">
            The direction to search for straight lines. The default is LeftToRight.
            </param>
            <param name="edgeOptions">
            Specifies the parameters that are used to compute the edge profile and detect edges. 
            </param>
            <param name="straightEdgeOptions">
            Specifies the options used to fit a line in <format type="italics">roi</format>. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Look for a horizontal edge in the image in viewer1, searching top to bottom.
            Dim Report As StraightEdgeReport = Algorithms.StraightEdge (imageViewer1.Image, imageViewer1.Roi, SearchDirection.TopToBottom)
             
            'Overlay the edges found on the image.
            For Each ReportItem As StraightEdgeReportItem In Report.StraightEdges
                imageViewer1.Image.Overlays.Default.AddLine (ReportItem.StraightEdge)
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Look for a horizontal edge in the image in viewer1, searching top to bottom.
            StraightEdgeReport report = Algorithms.StraightEdge(imageViewer1.Image, imageViewer1.Roi, SearchDirection.TopToBottom);
             
            // Overlay the edges found on the image.
            foreach (StraightEdgeReportItem reportItem in report.StraightEdges) {
                imageViewer1.Image.Overlays.Default.AddLine(reportItem.StraightEdge);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SearchDirection)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <param name="direction">
            The direction to search for straight lines. The default is LeftToRight.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SearchDirection,NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <param name="direction">
            The direction to search for straight lines. The default is LeftToRight.
            </param>
            <param name="edgeOptions">
            Specifies the parameters that are used to compute the edge profile and detect edges. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SearchDirection,NationalInstruments.Vision.Analysis.EdgeOptions,NationalInstruments.Vision.Analysis.StraightEdgeOptions)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <param name="direction">
            The direction to search for straight lines. The default is LeftToRight.
            </param>
            <param name="edgeOptions">
            Specifies the parameters that are used to compute the edge profile and detect edges. 
            </param>
            <param name="straightEdgeOptions">
            Specifies the options used to fit a line in <format type="italics">roi</format>. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.StraightEdge2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SearchDirection,NationalInstruments.Vision.Analysis.EdgeOptions,NationalInstruments.Vision.Analysis.StraightEdgeOptions,System.Boolean)">
            <summary>
            Finds straight edges inside an ROI in an image. 
            </summary>
            <param name="image">
            The image in which to find edges. 
            </param>
            <param name="roi">
            The ROI to find straight edges inside. The first contour of roi must be a rectangle, rotated rectangle, or a 
            4-sided closed contour. 
            </param>
            <param name="direction">
            The direction to search for straight lines. The default is LeftToRight.
            </param>
            <param name="edgeOptions">
            Specifies the parameters that are used to compute the edge profile and detect edges. 
            </param>
            <param name="straightEdgeOptions">
            Specifies the options used to fit a line in <format type="italics">roi</format>. 
            </param>
            <param name="optimizedMode">
            Specifies whether to use the optimized mode or not. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.StraightEdgeReport" crefType="Unqualified"/> object containing 
            information about the edges found.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Convolute(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Kernel)">
            <summary>
            Applies a linear filter to an image by convolving the image with a filtering kernel.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="kernel">
            The convolution matrix.
            </param>
            <remarks>This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16, and Sgl images. The source and the destination images must be the same type of image. The convolution matrix must have an odd width and height. The source image must have been created with a border capable of using the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is not important. This functions is optimized for MMX.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Convolute(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Kernel,NationalInstruments.Vision.VisionImage)">
            <summary>
            Applies a linear filter to an image by convolving the image with a filtering kernel.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="kernel">
            The convolution matrix.
            </param>
            <param name="mask">
            Specifies the region of the source image in which the method applies the convolution. The method applies the convolution to only those source pixels whose corresponding mask pixels are non-zero. Do not set this parameter if you want the method to convolve the entire image.
            </param>
            <remarks>This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16, and Sgl images. The source and the destination images must be the same type of image. <format type="italics">mask</format> must be a U8 image. The convolution matrix must have an odd width and height. The source image must have been created with a border capable of using the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is not important. This functions is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim k As New Kernel(KernelFamily.Gradient, 3, 2)
            ' Perform a convolution using a gradient filter on the image in Viewer1.
            ' Store the result in i.
            Algorithms.Convolute (imageViewer1.Image, i, k)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            Kernel k = new Kernel(KernelFamily.Gradient, 3, 2);
            // Perform a convolution using a gradient filter on the image in Viewer1.
            // Store the result in i.
            Algorithms.Convolute(imageViewer1.Image, i, k);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CannyEdgeFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Outlines edges in an image using the Canny algorithm, which is well-suited to images with poor signal-to-noise ratios.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The result of the processing.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CannyEdgeFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CannyOptions)">
            <summary>
            Outlines edges in an image using the Canny algorithm, which is well-suited to images with poor signal-to-noise ratios.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The result of the processing.
            </param>
            <param name="options">
            The options to use to perform the Canny algorithm.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Threshold the image in Viewer1 inplace.
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), True, 255)
             
            'Outline the edges of the image in Viewer1 and
            'store the results in i
            Algorithms.CannyEdgeFilter (imageViewer1.Image, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            //Threshold the image in Viewer1 inplace.
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), true, 255);
             
            //Outline the edges of the image in Viewer1 and
            //store the results in i
            Algorithms.CannyEdgeFilter(imageViewer1.Image, i);
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Correlate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the normalized cross correlation between the source image and the template image.
            </summary>
            <param name="source">
            The source image. The correlation modifies the border of the source image. The border must be at least half as large as the larger dimension of the template image.
            </param>
            <param name="template">
            The template image to correlate against the source.
            </param>
            <param name="destination">
            The resulting 8-bit image containing the cross correlation values normalized to lie in the range [0, 255]. A value of 255 indicates a very high correlation and a value of 0 indicates no correlation.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8 images. This method is optimized for MMX. However, MMX optimization is valid only when the width of the template image is a multiple of 4.
            Correlation is a time-intensive operation. You can reduce the time required to perform a correlation by keeping the template size small and reducing the search area in the source image using a RectangleContour.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Correlate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Computes the normalized cross correlation between the source image and the template image.
            </summary>
            <param name="source">
            The source image. The correlation modifies the border of the source image. The border must be at least half as large as the larger dimension of the template image.
            </param>
            <param name="template">
            The template image to correlate against the source.
            </param>
            <param name="destination">
            The resulting 8-bit image containing the cross correlation values normalized to lie in the range [0, 255]. A value of 255 indicates a very high correlation and a value of 0 indicates no correlation.
            </param>
            <param name="rectangle">
            Defines a rectangular region in the source image that is used for the correlation process. This parameter must contain 0 or 1 contours. If it contains 1 contour, it must be a RectangleContour. Correlation is applied to the entire image if RectangleContour.None is passed.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8 images. This method is optimized for MMX. However, MMX optimization is valid only when the width of the template image is a multiple of 4.
            Correlation is a time-intensive operation. You can reduce the time required to perform a correlation by keeping the template size small and reducing the search area in the source image using a RectangleContour.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Correlate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour)">
            <summary>
            Computes the normalized cross correlation between the source image and the template image.
            </summary>
            <param name="source">
            The source image. The correlation modifies the border of the source image. The border must be at least half as large as the larger dimension of the template image.
            </param>
            <param name="template">
            The template image to correlate against the source.
            </param>
            <param name="destination">
            The resulting 8-bit image containing the cross correlation values normalized to lie in the range [0, 255]. A value of 255 indicates a very high correlation and a value of 0 indicates no correlation.
            </param>
            <param name="rectangle">
            Defines a rectangular region in the source image that is used for the correlation process. Correlation is applied to the entire image if RectangleContour.None is passed.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8 images. This method is optimized for MMX. However, MMX optimization is valid only when the width of the template image is a multiple of 4.
            Correlation is a time-intensive operation. You can reduce the time required to perform a correlation by keeping the template size small and reducing the search area in the source image using a RectangleContour.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim patternImage As New VisionImage
            Dim i As New VisionImage
            Dim rectangle As New RectangleContour
             
            ' Populate patternImage and rectangle
            ' Correlate the patternImage with the image in Viewer1
            ' Store the results in i.
            Algorithms.Correlate (imageViewer1.Image, patternImage, i, rectangle)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage patternImage = new VisionImage();
            VisionImage i = new VisionImage();
            RectangleContour rectangle = new RectangleContour();
                
            // Populate patternImage and rectangle
            // Correlate the patternImage with the image in Viewer1
            // Store the results in i.
            Algorithms.Correlate(imageViewer1.Image, patternImage, i, rectangle);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.EdgeFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Hightlights the edges of an image.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images. <format type="italics">source</format> and 
            <format type="italics">destination</format> must be the same type of image. The source image must have a border 
            capable of supporting the size of the processing matrix. For example, a 3 x 3 matrix has a minimum border size of 1. 
            The border size of the destination image is not important.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.EdgeFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.OutlineMethod)">
            <summary>
            Hightlights the edges of an image.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="method">
            The type of edge-detection filter to use. The default is <see cref="F:NationalInstruments.Vision.Analysis.OutlineMethod.Difference" crefType="PartiallyQualified"/>.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images. <format type="italics">source</format> and 
            <format type="italics">destination</format> must be the same type of image. The source image must have a border 
            capable of supporting the size of the processing matrix. For example, a 3 x 3 matrix has a minimum border size of 1. 
            The border size of the destination image is not important.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.EdgeFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.OutlineMethod,System.Double)">
            <summary>
            Hightlights the edges of an image.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="method">
            The type of edge-detection filter to use. The default is <see cref="F:NationalInstruments.Vision.Analysis.OutlineMethod.Difference" crefType="PartiallyQualified"/>.
            </param>
            <param name="threshold">
            The minimum pixel value to appear in the resulting image. It is rare to use a value greater than 0 
            for this type of processing because the results from this processing are usually dark and are not dynamic. 
            This parameter has a default value of 0.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images. <format type="italics">source</format> and 
            <format type="italics">destination</format> must be the same type of image. The source image must have a border 
            capable of supporting the size of the processing matrix. For example, a 3 x 3 matrix has a minimum border size of 1. 
            The border size of the destination image is not important.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.EdgeFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.OutlineMethod,System.Double,NationalInstruments.Vision.VisionImage)">
            <summary>
            Hightlights the edges of an image.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="method">
            The type of edge-detection filter to use. The default is <see cref="F:NationalInstruments.Vision.Analysis.OutlineMethod.Difference" crefType="PartiallyQualified"/>.
            </param>
            <param name="threshold">
            The minimum pixel value to appear in the resulting image. It is rare to use a value greater than 0 
            for this type of processing because the results from this processing are usually dark and are not dynamic. 
            This parameter has a default value of 0.
            </param>
            <param name="mask">
            The mask to apply to the source image. The method processes only those pixels in the image whose corresponding 
            pixels in the mask are non-zero. Pass null or Nothing if you want to apply the filter to the entire image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images. <format type="italics">mask</format> must be a U8 image. <format type="italics">source</format> and 
            <format type="italics">destination</format> must be the same type of image. The source image must have a border 
            capable of supporting the size of the processing matrix. For example, a 3 x 3 matrix has a minimum border size of 1. 
            The border size of the destination image is not important.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim maskImage As New VisionImage
             
            ' Apply a Sobel filter to a portion of the image in Viewer1
            ' defined by regions selected on Viewer1.
            ' Store the result in i.
            Algorithms.RoiToMask (maskImage, imageViewer1.Roi)
            Algorithms.EdgeFilter (imageViewer1.Image, i, OutlineMethod.Sobel, 0, maskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            VisionImage maskImage = new VisionImage();
                
            // Apply a Sobel filter to a portion of the image in Viewer1
            // defined by regions selected on Viewer1.
            // Store the result in i.
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            Algorithms.EdgeFilter(imageViewer1.Image, i, OutlineMethod.Sobel, 0, maskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LowPass(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the interpixel variation between the pixel being processed and those pixels surrounding it. 
            If the pixel being processed has a variation greater than a specified percentage, it is set to the 
            average pixel value as calculated from the neighboring pixels.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8, I16, and Single images. The <format type="italics">source</format> and 
            <format type="italics">destination</format> images must be the same type of image.
            </para>
            	<para>
            The filter modifies the border of the source image. The source image must have been created with a border 
            capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, 
            a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is 
            not important.
            </para>
            	<para>
            This function is optimized for MMX.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LowPass(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LowPassOptions)">
            <summary>
            Calculates the interpixel variation between the pixel being processed and those pixels surrounding it. 
            If the pixel being processed has a variation greater than a specified percentage, it is set to the 
            average pixel value as calculated from the neighboring pixels.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="options">
            The options to use to filter the image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8, I16, and Single images. The <format type="italics">source</format> and 
            <format type="italics">destination</format> images must be the same type of image.
            </para>
            	<para>
            The filter modifies the border of the source image. The source image must have been created with a border 
            capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, 
            a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is 
            not important.
            </para>
            	<para>
            This function is optimized for MMX.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LowPass(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LowPassOptions,NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the interpixel variation between the pixel being processed and those pixels surrounding it. 
            If the pixel being processed has a variation greater than a specified percentage, it is set to the 
            average pixel value as calculated from the neighboring pixels.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="options">
            The options to use to filter the image.
            </param>
            <param name="mask">
            The region of the image where the convolution is applied. The method processes only those pixels in the 
            image whose corresponding pixels in the mask are non-zero. Pass null or Nothing for this parameter if 
            you want to filter the entire image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8, I16, and Single images. The <format type="italics">source</format> and 
            <format type="italics">destination</format> images must be the same type of image. 
            <format type="italics">mask</format> must be a U8 image.
            </para>
            	<para>
            The filter modifies the border of the source image. The source image must have been created with a border 
            capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, 
            a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is 
            not important.
            </para>
            	<para>
            This function is optimized for MMX.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim options as New LowPassOptions
            Dim maskImage As New VisionImage
             
            'Apply a low-pass filter to a portion of the image in Viewer1
            'defined by regions selected on Viewer1.
            'Store the result in i.
            Algorithms.RoiToMask (maskImage, imageViewer1.Roi)
            Algorithms.LowPass (imageViewer1.Image, i, options, maskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            LowPassOptions options = new LowPassOptions();
            VisionImage maskImage = new VisionImage();
                
            //Apply a low-pass filter to a portion of the image in Viewer1
            //defined by regions selected on Viewer1.
            //Store the result in i.
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            Algorithms.LowPass(imageViewer1.Image, i, options, maskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MedianFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Filters an image using a nonlinear filter. For each pixel, the algorithm takes the neighborhood 
            specified by the given filter sizes and replaces the pixel with the median value of the neighborhood.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            The filter modifies the border of the source image. The source image must have been created with a 
            border capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a 
            minimum border of 1, a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of 
            the destination image is not important.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MedianFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32)">
            <summary>
            Filters an image using a nonlinear filter. For each pixel, the algorithm takes the neighborhood 
            specified by the given filter sizes and replaces the pixel with the median value of the neighborhood.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="width">
            The width of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <param name="height">
            The height of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            The filter modifies the border of the source image. The source image must have been created with a 
            border capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a 
            minimum border of 1, a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of 
            the destination image is not important.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MedianFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,NationalInstruments.Vision.VisionImage)">
            <summary>
            Filters an image using a nonlinear filter. For each pixel, the algorithm takes the neighborhood 
            specified by the given filter sizes and replaces the pixel with the median value of the neighborhood.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="width">
            The width of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <param name="height">
            The height of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <param name="mask">
            The mask applied to the source image. The mask indicates the region in which the method applies the 
            median filter. The method processes only those pixels in the image whose corresponding pixels in 
            the mask are non-zero. Pass null or Nothing for this parameter if you want to apply the filter to 
            the entire image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8, I16, and Single images. <format type="italics">mask</format> must be a U8 image.
            </para>
            	<para>
            The filter modifies the border of the source image. The source image must have been created with a 
            border capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a 
            minimum border of 1, a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of 
            the destination image is not important.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim maskImage As New VisionImage
             
            'Apply a median filter to a portion of the image in Viewer1
            'defined by regions selected on Viewer1.
            'Store the result in i.
            Algorithms.RoiToMask (maskImage, imageViewer1.Roi)
            Algorithms.MedianFilter (imageViewer1.Image, i, 3, 3, maskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            VisionImage maskImage = new VisionImage();
                
            //Apply a median filter to a portion of the image in Viewer1
            //defined by regions selected on Viewer1.
            //Store the result in i.
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            Algorithms.MedianFilter(imageViewer1.Image, i, 3, 3, maskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.NthOrder(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Filters an image using a nonlinear filter. For each pixel, the algorithm takes the neighborhood specified by the 
            given filter sizes and replaces the pixel with the <format type="italics">n</format>th smallest value in the 
            neighborhood.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            	<para>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            The filter modifies the border of the source image. The connected source image must have been created with a 
            border capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, 
            a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is not important.
            This method is optimized for MMX.</para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.NthOrder(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32)">
            <summary>
            Filters an image using a nonlinear filter. For each pixel, the algorithm takes the neighborhood specified by the 
            given filter sizes and replaces the pixel with the <format type="italics">n</format>th smallest value in the 
            neighborhood.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="width">
            The width of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <param name="height">
            The height of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.</param>
            <remarks>
            	<para>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            The filter modifies the border of the source image. The connected source image must have been created with a 
            border capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, 
            a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is not important.
            This method is optimized for MMX.</para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.NthOrder(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,System.Int32)">
            <summary>
            Filters an image using a nonlinear filter. For each pixel, the algorithm takes the neighborhood specified by the 
            given filter sizes and replaces the pixel with the <format type="italics">n</format>th smallest value in the 
            neighborhood.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="width">
            The width of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <param name="height">
            The height of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <param name="n">
            Specifies which value in the neighborhood to place in the destination. Set <format type="italics">n</format> to 0 
            to select the smallest value in the neighborhood, set <format type="italics">n</format> to 1 to select the next 
            smallest value, and so on. The default is 4.
            </param>
            <remarks>
            	<para>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            The filter modifies the border of the source image. The connected source image must have been created with a 
            border capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, 
            a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is not important.
            This method is optimized for MMX.</para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.NthOrder(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,System.Int32,NationalInstruments.Vision.VisionImage)">
            <summary>
            Filters an image using a nonlinear filter. For each pixel, the algorithm takes the neighborhood specified by the 
            given filter sizes and replaces the pixel with the <format type="italics">n</format>th smallest value in the 
            neighborhood.
            </summary>
            <param name="source">
            The image to filter.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="width">
            The width of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <param name="height">
            The height of the rectangular neighborhood around the pixel on which the function operates. This number must be odd. 
            The default is 3.
            </param>
            <param name="n">
            Specifies which value in the neighborhood to place in the destination. Set <format type="italics">n</format> to 0 
            to select the smallest value in the neighborhood, set <format type="italics">n</format> to 1 to select the next 
            smallest value, and so on. The default is 4.
            </param>
            <param name="mask">
            The mask to apply to the source image. It indicates the region of the image in which the method applies the 
            NthOrder filter. The method processes only those pixels in the image whose corresponding pixels in the mask are 
            non-zero. Pass null or Nothing for this parameter if you want to filter the entire image.
            </param>
            <remarks>
            	<para>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            The filter modifies the border of the source image. The connected source image must have been created with a 
            border capable of supporting the size of the convolution matrix. A 3 x 3 matrix must have a minimum border of 1, 
            a 5 x 5 matrix must have a minimum border of 2, and so on. The border size of the destination image is not important.
            This method is optimized for MMX.</para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim maskImage As New VisionImage
             
            ' Apply a Nth order filter to a portion of the image in Viewer1
            ' defined by regions selected on Viewer1.
            ' Store the result in i.
            Algorithms.RoiToMask (maskImage, imageViewer1.Roi)
            Algorithms.NthOrder (imageViewer1.Image, i, 3, 3, 5, maskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            VisionImage maskImage = new VisionImage();
                
            // Apply a Nth order filter to a portion of the image in Viewer1
            // defined by regions selected on Viewer1.
            // Store the result in i.
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            Algorithms.NthOrder(imageViewer1.Image, i, 3, 3, 5, maskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DrawLine(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.LineContour,NationalInstruments.Vision.DrawingMode)">
            <summary>Draws a line on an image.
            </summary>
            <param name="source">The input image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="line">Defines the line to draw.
            </param>
            <param name="mode">Defines how to draw the line.
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DrawLine(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.LineContour,NationalInstruments.Vision.DrawingMode,NationalInstruments.Vision.PixelValue)">
            <summary>Draws a line on an image.
            </summary>
            <param name="source">The input image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="line">Defines the line to draw.
            </param>
            <param name="mode">Defines how to draw the line.
            </param>
            <param name="drawValue">
            The pixel value that the method uses for drawing.
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim l As New LineContour
             
            ' Draw a line (10,20) - (50,100) on the image in Viewer1.
            ' Store the result in i.
            l.Start.Initialize(10, 20)
            l.End.Initialize(50, 100)
            Algorithms.DrawLine (imageViewer.Image, i, l, DrawingMode.DrawValue, New PixelValue(255))
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            LineContour l = new LineContour();
                
            // Draw a line (10,20) - (50,100) on the image in Viewer1.
            // Store the result in i.
            l.Start.Initialize(10, 20);
            l.End.Initialize(50, 100);
            Algorithms.DrawLine(imageViewer.Image, i, l, DrawingMode.DrawValue, new PixelValue(255));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DrawOval(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.OvalContour,NationalInstruments.Vision.DrawingMode)">
            <summary>
            Draws an oval on an image.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="oval">
            Defines the oval to draw.
            </param>
            <param name="mode">
            Defines how to draw the oval.
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DrawOval(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.OvalContour,NationalInstruments.Vision.DrawingMode,NationalInstruments.Vision.PixelValue)">
            <summary>
            Draws an oval on an image.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="oval">
            Defines the oval to draw.
            </param>
            <param name="mode">
            Defines how to draw the oval.
            </param>
            <param name="drawValue">
            The pixel value that the method uses for drawing.
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim o As New OvalContour
             
            ' Draw an oval on the image in Viewer1.
            ' Store the result in i.
            o.Initialize (10, 20, 50, 100)
            Algorithms.DrawOval (imageViewer1.Image, i, o, DrawingMode.PaintInvert)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            OvalContour o = new OvalContour();
                
            // Draw an oval on the image in Viewer1.
            // Store the result in i.
            o.Initialize(10, 20, 50, 100);
            Algorithms.DrawOval(imageViewer1.Image, i, o, DrawingMode.PaintInvert);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DrawRectangle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour,NationalInstruments.Vision.DrawingMode)">
            <summary>Draws a rectangle on an image.</summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="rectangle">
            Defines the rectangle to draw.
            </param>
            <param name="mode">
            Defines how to draw the rectangle.
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DrawRectangle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour,NationalInstruments.Vision.DrawingMode,NationalInstruments.Vision.PixelValue)">
            <summary>Draws a rectangle on an image.</summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="rectangle">
            Defines the rectangle to draw.
            </param>
            <param name="mode">
            Defines how to draw the rectangle.
            </param>
            <param name="drawValue">The pixel value that the method uses for drawing.
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim r As New RectangleContour
             
            ' Draw a rectangle on the image in Viewer1.
            ' Store the result in i.
            r.Initialize (10, 20, 50, 100)
            Algorithms.DrawRectangle (imageViewer1.Image, i, r, DrawingMode.PaintValue, New PixelValue(128))
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            RectangleContour r = new RectangleContour();
                
            // Draw a rectangle on the image in Viewer1.
            // Store the result in i.
            r.Initialize(10, 20, 50, 100);
            Algorithms.DrawRectangle(imageViewer1.Image, i, r, DrawingMode.PaintValue, new PixelValue(128));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DrawText(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.String)">
            <summary>Draws text on an image.
            </summary>
            <param name="source">The input image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="point">The point where the method inserts the text.
            </param>
            <param name="text">The text that the method draws.
            </param>
            <returns>
            	<format type="bold">true</format> if the user supplied font name was used. <format type="bold">false</format> if the default font name was used.
            </returns>
            <remarks>
            Use this method with U8 and Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DrawText(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.String,NationalInstruments.Vision.Analysis.DrawTextOptions)">
            <summary>Draws text on an image.
            </summary>
            <param name="source">The input image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="point">The point where the method inserts the text.
            </param>
            <param name="text">The text that the method draws.
            </param>
            <param name="options">Describes how the method draws text.
            </param>
            <returns>
            	<format type="bold">true</format> if the user supplied font name was used. <format type="bold">false</format> if the default font name was used.
            </returns>
            <remarks>
            Use this method with U8 and RGB32 images. If the image type is U8, DrawTextOptions.Color must be grayscale.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            ' Draw text on the image in Viewer1 at the point (10, 20)
            Algorithms.DrawText (imageViewer1.Image, imageViewer1.Image, New PointContour (10, 20), "sample text")
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Draw text on the image in Viewer1 at the point (10, 20)
            Algorithms.DrawText (imageViewer1.Image, imageViewer1.Image, new PointContour (10, 20), "sample text");
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.InterlaceCombine(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Combines two field images to create a single frame image.
            </summary>
            <param name="sourceOdd">
            The odd field.
            </param>
            <param name="sourceEven">
            The even field.
            </param>
            <param name="destination">
            The resulting combined image.
            </param>
            <remarks>
            Use this method with all image types.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This example swaps every alternate row in the image on Viewer1
            Dim even As New VisionImage
            Dim odd As New VisionImage
             
            'First separate the even and odd frames of the image on Viewer1.
            Algorithms.InterlaceSeparate (imageViewer1.Image, odd, even)
             
            'Combine the even and odd frames so that the old odd is
            'the new even frame and the old even is the new odd frame.
            'Store the result in the image on Viewer1.
            Algorithms.InterlaceCombine (even, odd, imageViewer1.Image)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //This example swaps every alternate row in the image on Viewer1
             
            VisionImage even = new VisionImage();
            VisionImage odd = new VisionImage();
                
            //First separate the even and odd frames of the image on Viewer1.
            Algorithms.InterlaceSeparate(imageViewer1.Image, odd, even);
                
            //Combine the even and odd frames so that the old odd is
            //the new even frame and the old even is the new odd frame.
            //Store the result in the image on Viewer1.
            Algorithms.InterlaceCombine(even, odd, imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.InterlaceSeparate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Separates a frame image into two field images.
            </summary>
            <param name="source">
            The source frame to separate.
            </param>
            <param name="destinationOdd">
            The image into which the function places the odd field of the frame area.
            </param>
            <param name="destinationEven">
            The image into which the function places the even field of the frame area.
            </param>
            <remarks>
            Use this method with all image types.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This example swaps every alternate row in the image on Viewer1
            Dim even As New VisionImage
            Dim odd As New VisionImage
             
            'First separate the even and odd frames of the image on Viewer1.
            Algorithms.InterlaceSeparate (imageViewer1.Image, odd, even)
             
            'Combine the even and odd frames so that the old odd is
            'the new even frame and the old even is the new odd frame.
            'Store the result in the image on Viewer1.
            Algorithms.InterlaceCombine (even, odd, imageViewer1.Image)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //This example swaps every alternate row in the image on Viewer1
             
            VisionImage even = new VisionImage();
            VisionImage odd = new VisionImage();
                
            //First separate the even and odd frames of the image on Viewer1.
            Algorithms.InterlaceSeparate(imageViewer1.Image, odd, even);
                
            //Combine the even and odd frames so that the old odd is
            //the new even frame and the old even is the new odd frame.
            //Store the result in the image on Viewer1.
            Algorithms.InterlaceCombine(even, odd, imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RejectBorder(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Eliminates particles that touch the border of an image.
            </summary>
            <param name="source">
            The source image. If the image has a border, the method sets all border pixel values to 0.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            <para>
            		<format type="italics">source</format> and <format type="italics">destination</format> must be U8 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RejectBorder(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Eliminates particles that touch the border of an image.
            </summary>
            <param name="source">
            The source image. If the image has a border, the method sets all border pixel values to 0.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are 
            touching. Set this parameter to Connectivity4 to use connectivity-4 to determine whether particles 
            are touching. The default is Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            <para>
            		<format type="italics">source</format> and <format type="italics">destination</format> must be U8 images.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            'Reject the particles touching the border of the image in Viewer1.
            'Store the result in i.
            Algorithms.RejectBorder (imageViewer1.Image, i, Connectivity.Connectivity8)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            //Reject the particles touching the border of the image in Viewer1.
            //Store the result in i.
            Algorithms.RejectBorder(imageViewer1.Image, i, Connectivity.Connectivity8);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FillHoles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Fills holes in particles. The method fills the holes with a pixel value of 1.
            </summary>
            <param name="source">
            The image containing particles with holes to fill.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with U8 images. The method does not fill areas touching the edge of the image that 
            appear to be holes because these areas could be either holes or areas of concavity. This function 
            is optimized for MMX.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FillHoles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Fills holes in particles. The method fills the holes with a pixel value of 1.
            </summary>
            <param name="source">
            The image containing particles with holes to fill.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are 
            touching. Set this parameter to Connectivity4 to use connectivity-4 to determine whether particles 
            are touching. The default is Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <remarks>
            Use this method with U8 images. The method does not fill areas touching the edge of the image that 
            appear to be holes because these areas could be either holes or areas of concavity. This function 
            is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Threshold the image on Viewer1 inplace.
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), True, 255)
             
            ' Fill the holes in the image on Viewer1 that have connectivity-4 and
            ' store the result in i.
            Algorithms.FillHoles (imageViewer1.Image, i, Connectivity.Connectivity4)
             
            ' Fill the holes in the image on Viewer1 that have connectivity-8.
            ' Do this operation in place (Store the result in the image on Viewer1).
            Algorithms.FillHoles (imageViewer1.Image, imageViewer1.Image, Connectivity.Connectivity8)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            // Threshold the image on Viewer1 inplace.
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), true, 255);
                
            // Fill the holes in the image on Viewer1 that have connectivity-4 and
            // store the result in i.
            Algorithms.FillHoles(imageViewer1.Image, i, Connectivity.Connectivity4);
                
            // Fill the holes in the image on Viewer1 that have connectivity-8.
            // Do this operation in place (Store the result in the image on Viewer1).
            Algorithms.FillHoles(imageViewer1.Image, imageViewer1.Image, Connectivity.Connectivity8);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RemoveParticle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Eliminates or keeps particles resistant to a specified number of erosions. The particles that are kept are 
            exactly the same as those found in the original source image.
            </summary>
            <param name="source">
            The image in which to remove the particles.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            <para>
            Use this method with U8 images.
            </para>
            	<para>
            The source image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            destination image is not important.
            </para>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RemoveParticle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32)">
            <summary>
            Eliminates or keeps particles resistant to a specified number of erosions. The particles that are kept are 
            exactly the same as those found in the original source image.
            </summary>
            <param name="source">
            The image in which to remove the particles.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="erosions">
            The number of erosions to perform. The default is 2.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            <para>
            Use this method with U8 images.
            </para>
            	<para>
            The source image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            destination image is not important.
            </para>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RemoveParticle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Analysis.SizeToKeep)">
            <summary>
            Eliminates or keeps particles resistant to a specified number of erosions. The particles that are kept are 
            exactly the same as those found in the original source image.
            </summary>
            <param name="source">
            The image in which to remove the particles.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="erosions">
            The number of erosions to perform. The default is 2.
            </param>
            <param name="sizeType">
            Specifies whether to keep small particles or large particles.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            <para>
            Use this method with U8 images.
            </para>
            	<para>
            The source image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            destination image is not important.
            </para>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RemoveParticle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Analysis.SizeToKeep,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Eliminates or keeps particles resistant to a specified number of erosions. The particles that are kept are 
            exactly the same as those found in the original source image.
            </summary>
            <param name="source">
            The image in which to remove the particles.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="erosions">
            The number of erosions to perform. The default is 2.
            </param>
            <param name="sizeType">
            Specifies whether to keep small particles or large particles.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are 
            touching. Set this parameter to Connectivity4 to use connectivity-4 to determine whether particles 
            are touching. The default is Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            <para>
            Use this method with U8 images.
            </para>
            	<para>
            The source image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            destination image is not important.
            </para>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RemoveParticle(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Analysis.SizeToKeep,NationalInstruments.Vision.Analysis.Connectivity,NationalInstruments.Vision.Analysis.StructuringElement)">
            <summary>
            Eliminates or keeps particles resistant to a specified number of erosions. The particles that are kept are 
            exactly the same as those found in the original source image.
            </summary>
            <param name="source">
            The image in which to remove the particles.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="erosions">
            The number of erosions to perform. The default is 2.
            </param>
            <param name="sizeType">
            Specifies whether to keep small particles or large particles.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are 
            touching. Set this parameter to Connectivity4 to use connectivity-4 to determine whether particles 
            are touching. The default is Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <param name="element">
            Describes the structuring element applied to the image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            <para>
            Use this method with U8 images.
            </para>
            	<para>
            The source image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            destination image is not important.
            </para>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            'Find the particles resistant to 3 erosions in the image in Viewer1.
            'Store the result in i.
            Algorithms.RemoveParticle (imageViewer1.Image, i, 3)
            'Remove all particles with connectivity-4 resistant to 3 erosions in i.
            'Do the operation in place (store the result in i)
            Algorithms.RemoveParticle (i, i, 3, SizeToKeep.KeepLarge, Connectivity.Connectivity4)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            //Find the particles resistant to 3 erosions in the image in Viewer1.
            //Store the result in i.
            Algorithms.RemoveParticle(imageViewer1.Image, i, 3);
            //Remove all particles with connectivity-4 resistant to 3 erosions in i.
            //Do the operation in place (store the result in i)
            Algorithms.RemoveParticle(i, i, 3, SizeToKeep.KeepLarge, Connectivity.Connectivity4);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphology(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyMethod)">
            <summary>
            Applies morphological transformations to gray level images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="method">
            The type of morphological transformation procedure to use.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this 
            method.
            <para>
            Use this method with U8, I16, and Single images. <format type="italics">source</format> and 
            <format type="italics">destination</format> must be the same type of image. 
            </para>
            	<para>
            This function is optimized for MMX.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphology(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyMethod,NationalInstruments.Vision.Analysis.StructuringElement)">
            <summary>
            Applies morphological transformations to gray level images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="method">
            The type of morphological transformation procedure to use.
            </param>
            <param name="element">
            Describes the structuring element applied to the image. The default is 3 x 3.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this 
            method.
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format> and <format type="italics">destination</format> must be the same type of 
            image. The calculation modifies the border of the source image. The source image for a morphological 
            transformation must have been created with a border capable of supporting the size of the structuring element. 
            A 3 x 3 structuring element requires a minimal border of 1, a 5 x 5 structuring element requires a minimal border 
            of 2, and so on. The border size of the destination image is not important.
            </para>
            	<para>
            A structuring element must have odd-sized dimensions so that it contains a central pixel. If one of the dimensions for the structuring element is even, the function does not take into account the odd boundary, farthest out on the matrix. For example, if the input structuring element is 6 × 4 (Width = 6 and Height = 4), the actual processing is performed at 5 x 3. Both the sixth line and the fourth row are ignored. The processing speed is correlated with the size of the structuring element. For example, a 3 x 3 structuring element processes nine pixels, and a 5 × 5 structuring element processes 25 pixels.
            </para>
            	<para>
            This function is optimized for MMX.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim element As New StructuringElement
             
            'Perform a POpen operation on the image in Viewer1.
            'Store the result in i.
            Algorithms.GrayMorphology (imageViewer1.Image, i, MorphphologyMethod.POpen, element)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            StructuringElement element = new StructuringElement();
                
            //Perform a POpen operation on the image in Viewer1.
            //Store the result in i.
            Algorithms.GrayMorphology(imageViewer1.Image, i, MorphphologyMethod.POpen, element);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvexHull(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>Computes the convex envelope for each particle in the source image.
            </summary>
            <param name="source">The image containing the particles whose convex envelopes the method calculates.
            </param>
            <param name="destination">The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16, and floating point images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvexHull(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>Computes the convex envelope for each particle in the source image.
            </summary>
            <param name="source">The image containing the particles whose convex envelopes the method calculates.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="connectivity">Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are touching. Set this parameter to Connectivity4
            to use connectivity-4 to determine whether particles are touching. The default is Connectivity8. Refer to the <format type="italics">NI Vision Concepts Help</format> for more information about connectivity.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16, and floating point images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim j As New VisionImage
            ' Threshold the image in Viewer1 and store the results in i
            Algorithms.Threshold (imageViewer1.Image, i, new Range(128, 255), True, 255)
            ' Find the convex envelope of the particles in i.
            ' Store the result in j.
            Algorithms.ConvexHull (i, j)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            VisionImage j = new VisionImage();
            // Threshold the image in Viewer1 and store the results in i
            Algorithms.Threshold(imageViewer1.Image, i, new Range(128, 255), true, 255);
            // Find the convex envelope of the particles in i.
            // Store the result in j.
            Algorithms.ConvexHull(i, j);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Danielsson(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a very accurate distance map based on the Danielsson distance algorithm. The method encodes the pixel value of a particle as a function of the distance of the pixel from the particle perimeter. For a faster but less precise algorithm, use the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Distance(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
            <param name="source">
            The image that the method uses to compute the distance map.
            </param>
            <param name="destination">
            The image that contains the result.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8 and I16 images. This method modifies the border of the source image. The border must be at least one pixel wide.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports NationalInstruments.Vision.WindowForms
             
            ' This example assumes you have two viewers on your form.
            Dim i As New VisionImage
             
            ' Threshold the image in Viewer1 and store the results in i.
            Algorithms.Threshold (imageViewer1.Image, i, New Range(128, 255), True, 255)
             
            ' Create a distance map of i using the Danielsson algorithm.
            ' Store the result in the image in Viewer2.
            Algorithms.Danielsson (i, imageViewer2.Image)
             
            ' View the results on Viewer2 using a binary palette.
            imageViewer2.Palette.Type = PaletteType.Binary
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using NationalInstruments.Vision.WindowForms;
             
            // This example assumes you have two viewers on your form.
             
            VisionImage i = new VisionImage();
                
            // Threshold the image in Viewer1 and store the results in i.
            Algorithms.Threshold(imageViewer1.Image, i, new Range(128, 255), true, 255);
                
            // Create a distance map of i using the Danielsson algorithm.
            // Store the result in the image in Viewer2.
            Algorithms.Danielsson(i, imageViewer2.Image);
                
            // View the results on Viewer2 using a binary palette.
            imageViewer2.Palette.Type = PaletteType.Binary;
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindCircles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Separates overlapping circular objects and classifies them based on their radius, surface area, and perimeter. 
            Starting from a binary image, this method finds the radius and center of the circular objects even when multiple 
            circular objects overlap. In addition, this method can trace the circles in the destination image. It 
            constructs and uses a Danielsson distance map to determine the radius of each object.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CircleReport" crefType="Unqualified"/> objects 
            containing the measurements for circles found.
            </returns>
            <remarks>
            Use this method with U8 images. This method operates on circles with radii less than or equal to 256 pixels.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindCircles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Range)">
            <summary>
            Separates overlapping circular objects and classifies them based on their radius, surface area, and perimeter. 
            Starting from a binary image, this method finds the radius and center of the circular objects even when multiple 
            circular objects overlap. In addition, this method can trace the circles in the destination image. It 
            constructs and uses a Danielsson distance map to determine the radius of each object.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="radiusRange">
            The minimum and maximum values for the radius, in pixels, of the circle to detect. Circles with 
            radii outside of this value do not appear in the <format type="italics">destination</format> image 
            or in the collection of CircleReports. The default value is (1, 10).
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CircleReport" crefType="Unqualified"/> objects 
            containing the measurements for circles found.
            </returns>
            <remarks>
            Use this method with U8 images. This method operates on circles with radii less than or equal to 
            256 pixels.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'This example requires you to have a ListBox named List1 on the form.
            Dim i As New VisionImage
            Dim j As New Integer
             
            'Threshold the image in Viewer1 inplace.
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), True, 255)
             
            'Separate and classify circular objects in the image in Viewer1
            'and store the results in i
            Dim Reports As Collection(Of CircleReport) = Algorithms.FindCircles (imageViewer1.Image, i, New Range(1, 100))
             
            'Display the areas in the ListBox
            List1.Items.Clear()
            For Each Report As CircleReport In Reports
                List1.Items.Add(Report.Area)
            Next
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // This example requires you to have a ListBox named List1 on the form.
            VisionImage i = new VisionImage();
            int j;
             
            // Threshold the image in Viewer1 inplace.
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), true, 255);
             
            // Separate and classify circular objects in the image in Viewer1
            // and store the results in i
            Collection&lt;CircleReport&gt; reports = Algorithms.FindCircles(imageViewer1.Image, i, new Range(1, 100));
             
            // Display the areas in the ListBox
            List1.Items.Clear();
            foreach (CircleReport report in reports) {
                List1.Items.Add(report);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Label(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Labels the particles in a binary image by applying a unique value to all pixels within a particle. 
            This value is encoded in 8 or 16 bits, depending on the image type. The method can label 255 particles 
            in an 8-bit image and 65,535 particles in a 16-bit image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <returns>
            The number of particles that the method detected.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method. Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Label(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Labels the particles in a binary image by applying a unique value to all pixels within a particle. 
            This value is encoded in 8 or 16 bits, depending on the image type. The method can label 255 particles 
            in an 8-bit image and 65,535 particles in a 16-bit image.
            </summary>
            <param name="source">
            The source image. The labeling process modifies the border of the source image. The border must be at 
            least one pixel wide if you use Connectivity4 or two pixels wide if you use Connectivity8. 
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="connectivity">Set this parameter to Connectivity8 to use connectivity-8 to determine 
            whether particles are touching. Set this parameter to Connectivity4 to use connectivity-4 to 
            determine whether particles are touching. The default is Connectivity8. Refer to the 
            <format type="italics">NI Vision Concepts Help</format> for more information about connectivity.
            </param>
            <returns>
            The number of particles that the method detected.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method. Use this method with U8, I16, and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports NationalInstruments.Vision.WindowsForms
             
            Dim i As New VisionImage
             
            'Threshold the image in Viewer1
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), True, 255) 
             
            'Label the image in Viewer1 and store the result in i
            Algorithms.Label (imageViewer1.Image, i)
             
            'Label the image in Viewer1 using Connectivity4
            'and store the result in the image in Viewer2.
            'View the results in Viewer2 using a binary palette
            Algorithms.Label (imageViewer1.Image, imageViewer2.Image, Connectivity.Connectivity4)
            imageViewer2.Palette.Type = PaletteType.Binary
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using NationalInstruments.Vision.WindowsForms;
             
            VisionImage i = new VisionImage();
                
            //Threshold the image in Viewer1
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), true, 255);
                
            //Label the image in Viewer1 and store the result in i
            Algorithms.Label(imageViewer1.Image, i);
                
            //Label the image in Viewer1 using Connectivity4
            //and store the result in the image in Viewer2.
            //View the results in Viewer2 using a binary palette
            Algorithms.Label(imageViewer1.Image, imageViewer2.Image, Connectivity.Connectivity4);
            imageViewer2.Palette.Type = PaletteType.Binary;
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Morphology(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyMethod)">
            <summary>
            Applies morphological transformations to binary images. 
            </summary>
            <param name="source">
            The image on which the method performs the morphological operations.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="method">
            The type of morphological transformation to use.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the 
            image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method 
            before using this method.
            <para>
            The <format type="italics">source</format> and <format type="italics">destination</format> images must be U8 images.
            </para>
            	<para>
            The <format type="italics">source</format> image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            <format type="italics">destination</format> image is not important.
            </para>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Morphology(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyMethod,NationalInstruments.Vision.Analysis.StructuringElement)">
            <summary>
            Applies morphological transformations to binary images. 
            </summary>
            <param name="source">
            The image on which the method performs the morphological operations.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="method">
            The type of morphological transformation to use.
            </param>
            <param name="element">
            The structuring element used in the operation. Pass null or Nothing for  this parameter if you do not 
            want a custom structuring element. 
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the 
            image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method 
            before using this method.
            <para>
            The <format type="italics">source</format> and <format type="italics">destination</format> images must be U8 images.
            </para>
            	<para>
            The <format type="italics">source</format> image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            <format type="italics">destination</format> image is not important.
            </para>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports NationalInstruments.Vision.WindowsForms
             
            Dim i As New VisionImage
                
            'Threshold the image in Viewer1 to make it a binary image.
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range (128, 255), True, 255)
                
            'Perform a POpen operation on the image in Viewer1.
            'Store the result in i.
            Algorithms.Morphology (imageViewer1.Image, i, MorphologyMethod.POpen)
                
            'Display the result in Viewer2 using a binary palette.
            imageViewer2.Palette.Type = PaletteType.Binary
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using NationalInstruments.Vision.WindowsForms;
             
            VisionImage i = new VisionImage();
                
            //Threshold the image in Viewer1 to make it a binary image.
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), true, 255);
                
            //Perform a POpen operation on the image in Viewer1.
            //Store the result in i.
            Algorithms.Morphology(imageViewer1.Image, i, MorphologyMethod.POpen);
                
            //Display the result in Viewer2 using a binary palette.
            imageViewer2.Palette.Type = PaletteType.Binary;
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Segmentation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Starting from a labeled image, calculates the zones of influence between particles. Each labeled 
            particle dilates/grows until the particles reach their neighbors, at which time this growth is stopped.
            Before calling this method, you must label the particles with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Label(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
            <param name="source">
            The image to segment.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8 and I16 images.
            </para>
            	<para>
            The segmentation modifies the border of the source image. The border must be at least one pixel wide.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports NationalInstruments.Vision.WindowsForms
             
            Dim i As New VisionImage
            'Threshold the image in Viewer1.
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), True, 255)
             
            'Label the image in Viewer1 and store the result in i.
            Algorithms.Label (imageViewer1.Image, i)
             
            'Segment the image in i.
            'Do the operation in-place (Store the result in i).
            Algorithms.Segmentation (i, i)
             
            'View i in Viewer2 using a binary palette.
            imageViewer2.Attach (i)
            imageViewer2.Palette.Type = PaletteType.Binary
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using NationalInstruments.Vision.WindowsForms;
             
            VisionImage i = new VisionImage();
            //Threshold the image in Viewer1.
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), true, 255);
             
            //Label the image in Viewer1 and store the result in i.
            Algorithms.Label(imageViewer1.Image, i);
             
            //Segment the image in i.
            //Do the operation in-place (Store the result in i).
            Algorithms.Segmentation(i, i);
             
            //View i in Viewer2 using a binary palette.
            imageViewer2.Attach(i);
            imageViewer2.Palette.Type = PaletteType.Binary;
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Separation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Separates touching particles, particularly small isthmuses found between particles. After performing 
            the erosion, the algorithm reconstructs the image. 
            </summary>
            <param name="source">
            The image containing particles to separate.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            All source and destination images must be U8 images.
            </para>
            	<para>
            The source image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            destination image is not important.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Separation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32)">
            <summary>
            Separates touching particles, particularly small isthmuses found between particles. This method 
            performs n erosions (n = <format type="italics">erosions</format>), and then reconstructs the 
            final image based on the results of the erosion. If an existing isthmus is broken or removed 
            during the erosion process, the particles are reconstructed without the isthmus. The reconstructed 
            particles, however, have the same size as the initial particles except that they are separated. If 
            no isthmus is broken during the erosion process, the particles are reconstructed as they were 
            initially found, and no change is made.
            </summary>
            <param name="source">
            The image containing particles to separate.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="erosions">
            The number of erosions to perform. The default is 1.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            All source and destination images must be U8 images.
            </para>
            	<para>
            The source image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            destination image is not important.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Separation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Analysis.StructuringElement)">
            <summary>
            Separates touching particles, particularly small isthmuses found between particles. This method 
            performs n erosions (n = <format type="italics">erosions</format>), and then reconstructs the 
            final image based on the results of the erosion. If an existing isthmus is broken or removed 
            during the erosion process, the particles are reconstructed without the isthmus. The reconstructed 
            particles, however, have the same size as the initial particles except that they are separated. If 
            no isthmus is broken during the erosion process, the particles are reconstructed as they were 
            initially found, and no change is made.
            </summary>
            <param name="source">
            The image containing particles to separate.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="erosions">
            The number of erosions to perform. The default is 1.
            </param>
            <param name="element">
            The structuring element applied to the image. The method applies a 3 x 3 structuring element if you pass 
            null or Nothing for this parameter.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            All source and destination images must be U8 images.
            </para>
            	<para>
            The source image for a morphological transformation must have been created with a border capable of 
            supporting the size of the structuring element. A 3 x 3 structuring element requires a minimal border 
            of 1, a 5 x 5 structuring element requires a minimal border of 2, and so on. The border size of the 
            destination image is not important.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Threshold the image in Viewer1 to make it a binary image.
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), True, 255)
             
            'Separate the particles in the image on Viewer1.
            Algorithms.Separation (imageViewer1.Image, i)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            //Threshold the image in Viewer1 to make it a binary image.
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), true, 255);
             
            //Separate the particles in the image on Viewer1.
            Algorithms.Separation(imageViewer1.Image, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Distance(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a distance map. The method encodes the pixel value of a particle as a function of the distance of the pixel from the particle border. For a more precise but slower algorithm, use the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Danielsson(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
            <param name="source">The image that the method uses to compute the distance map.
            </param>
            <param name="destination">The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method. 
            All images must be U8 images. The method modifies the border of the source image. 
            The border must be at least half as large as the larger of the structuring element 
            dimensions.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Distance(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.StructuringElement)">
            <summary>
            Creates a distance map. The method encodes the pixel value of a particle as a function of the distance of the pixel from the particle border. For a more precise but slower algorithm, use the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Danielsson(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
            <param name="source">The image that the method uses to compute the distance map.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="element">
            Describes the structuring element applied to the image. The method uses a 3 x 3 structuring element if you do not set this parameter.
            For more information on structuring elements, refer to the <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method. 
            All images must be U8 images. The method modifies the border of the source image. 
            The border must be at least half as large as the larger of the structuring element 
            dimensions.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports NationalInstruments.Vision.WindowsForms
             
            Dim i As New VisionImage
            Dim structuringElement As New StructuringElement
             
            ' Threshold the image in Viewer1 and store the results in i.
            Algorithms.Threshold (imageViewer1.Image, i, New Range(128, 255), True, 255)
             
            ' Create a distance map of i.
            ' Store the result in the image in Viewer2.
            Algorithms.Distance (i, imageViewer2.Image)
             
            ' View the results on Viewer2 using a binary palette.
            imageViewer2.Palette.Type = PaletteType.Binary
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using NationalInstruments.Vision.WindowsForms;
             
            VisionImage i = new VisionImage();
            StructuringElement structuringElement = new StructuringElement();
                
            // Threshold the image in Viewer1 and store the results in i.
            Algorithms.Threshold(imageViewer1.Image, i, 128, 255, , 255);
                
            // Create a distance map of i.
            // Store the result in the image in Viewer2.
            Algorithms.Distance(i, imageViewer2.Image);
                
            // View the results on Viewer2 using a binary palette.
            imageViewer2.Palette.Type = PaletteType.Binary;
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Skeleton(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Starting from a binary image, calculates the skeletons of the particles within an image or the lines 
            delineating the zones of influence of the objects (skeleton of an inverse image).
            </summary>
            <param name="source">
            The image whose skeleton the method derives.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8 images.
            </para>
            	<para>
            The calculation modifies the border of the source image. The border must be at least one pixel wide.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Skeleton(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.SkeletonMethod)">
            <summary>
            Starting from a binary image, calculates the skeletons of the particles within an image or the lines 
            delineating the zones of influence of the objects (skeleton of an inverse image).
            </summary>
            <param name="source">
            The image whose skeleton the method derives.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="method">
            The method to calculate the skeleton. The default is L.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image 
            using the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before 
            using this method.
            <para>
            Use this method with U8 images.
            </para>
            	<para>
            The calculation modifies the border of the source image. The border must be at least one pixel wide.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Threshold the image in Viewer1
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), True, 255)
             
            'Perform a skeleton on the image in Viewer1.
            'Store the result in i.
            Algorithms.Skeleton (imageViewer1.Image, i, SkeletonMethod.Inverse)
             
            imageViewer2.Attach (i)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            //Threshold the image in Viewer1
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), true, 255);
             
            //Perform a skeleton on the image in Viewer1.
            //Store the result in i.
            Algorithms.Skeleton(imageViewer1.Image, i, SkeletonMethod.Inverse);
             
            imageViewer2.Attach(i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Roi)">
            <summary>
            Applies morphological reconstruction to gray scale images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="points">
            Points is an array of point-coordinates in a source image that define where the reconstruction starts.
            </param>
            <param name="operation">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>        
            <remarks>
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Analysis.StructuringElement,NationalInstruments.Vision.Roi)">
            <summary>
            Applies morphological reconstruction to gray scale images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="points">
            Points is an array of point-coordinates in a source image that define where the reconstruction starts.
            </param>
            <param name="operation">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>
            <param name="element">
            Describes the structuring element applied to the image. The default is 3 x 3.
            </param>
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>        
            <remarks>
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            <para>
            A structuring element must have odd-sized dimensions so that it contains a central pixel. If one of the dimensions for the structuring element is even, then function throws an error.  The processing speed is correlated with the size of the structuring element. For example, a 3 x 3 structuring element processes nine pixels, and a 5 × 5 structuring element processes 25 pixels.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.MorphologyReconstructOperation)">
            <summary>
            Applies morphological reconstruction to gray scale images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="points">
            Points is an array of point-coordinates in a source image that define where the reconstruction starts.
            </param>
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>              
            <remarks>
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Analysis.StructuringElement)">
            <summary>
            Applies morphological reconstruction to gray scale images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="points">
            Points is an array of point-coordinates in a source image that define where the reconstruction starts.
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param> 
            <param name="element">
            Describes the structuring element applied to the image. The default is 3 x 3.
            </param>               
            <remarks>
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            <para>
            A structuring element must have odd-sized dimensions so that it contains a central pixel. If one of the dimensions for the structuring element is even, then function throws an error.  The processing speed is correlated with the size of the structuring element. For example, a 3 x 3 structuring element processes nine pixels, and a 5 × 5 structuring element processes 25 pixels.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Roi)">
            <summary>
            Applies morphological reconstruction to gray scale images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="marker">
            Image Marker is a reference to the marker image. 
            </param>
            <param name="element">
            Describes the structuring element applied to the image. The default is 3 x 3.
            </param>
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>      
            <remarks>
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Analysis.StructuringElement,NationalInstruments.Vision.Roi)">
            <summary>
            Applies morphological reconstruction to gray scale images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="marker">
            Image Marker is a reference to the marker image. 
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>
            <param name="element">
            Describes the structuring element applied to the image. The default is 3 x 3.
            </param>
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>      
            <remarks>
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            <para>
            A structuring element must have odd-sized dimensions so that it contains a central pixel. If one of the dimensions for the structuring element is even, then function throws an error.  The processing speed is correlated with the size of the structuring element. For example, a 3 x 3 structuring element processes nine pixels, and a 5 × 5 structuring element processes 25 pixels.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyReconstructOperation)">
            <summary>
            Applies morphological reconstruction to gray scale images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="marker">
            Image Marker is a reference to the marker image. 
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>   
            <param name="element">
            Describes the structuring element applied to the image. The default is 3 x 3.
            </param> 
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>
            <remarks>
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GrayMorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Analysis.StructuringElement)">
            <summary>
            Applies morphological reconstruction to gray scale images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="marker">
            Image Marker is a reference to the marker image. 
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>   
            <param name="element">
            Describes the structuring element applied to the image. The default is 3 x 3.
            </param> 
            <remarks>
            <para>
            Use this method with U8, I16, and Single images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            <para>
            A structuring element must have odd-sized dimensions so that it contains a central pixel. If one of the dimensions for the structuring element is even, then function throws an error.  The processing speed is correlated with the size of the structuring element. For example, a 3 x 3 structuring element processes nine pixels, and a 5 × 5 structuring element processes 25 pixels.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Roi)">
            <summary>
            Applies morphological reconstruction on binary images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="points">
            Points is an array of point-coordinates in a source image that define where the reconstruction starts.
            </param>
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>
            <remarks>
            <para>
            Use this method with binary images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Analysis.Connectivity,NationalInstruments.Vision.Roi)">
            <summary>
            Applies morphological reconstruction on binary images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="points">
            Points is an array of point-coordinates in a source image that define where the reconstruction starts.
            </param>
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>
            <param name="connectivity">
            Connectivity  specifies the type of connectivity used by the algorithm for morphological reconstruction.
            </param>
            <remarks>
            <para>
            Use this method with binary images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.MorphologyReconstructOperation)">
            <summary>
            Applies morphological reconstruction on binary images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="points">
            Points is an array of point-coordinates in a source image that define where the reconstruction starts.
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param> 
            <remarks>
            <para>
            Use this method with binary images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Applies morphological reconstruction on binary images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="points">
            Points is an array of point-coordinates in a source image that define where the reconstruction starts.
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param> 
            <param name="connectivity">
            Connectivity  specifies the type of connectivity used by the algorithm for morphological reconstruction.
            </param>
            <remarks>
            <para>
            Use this method with binary images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Roi)">
            <summary>
            Applies morphological reconstruction on binary images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="marker">
            Image Marker is a reference to the marker image. 
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>  
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>              
            <remarks>
            <para>
            Use this method with binary images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Analysis.Connectivity,NationalInstruments.Vision.Roi)">
            <summary>
            Applies morphological reconstruction on binary images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="marker">
            Image Marker is a reference to the marker image. 
            </param>
            <param name="roi">
            ROI Descriptor defines the region of interest (ROI) within which the morphological reconstruction is performed.
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>
            <param name="connectivity">
            Connectivity  specifies the type of connectivity used by the algorithm for morphological reconstruction.
            </param>
            <remarks>
            <para>
            Use this method with binary images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyReconstructOperation)">
            <summary>
            Applies morphological reconstruction on binary images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="marker">
            Image Marker is a reference to the marker image. 
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>        
            <remarks>
            <para>
            Use this method with binary images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MorphologyReconstruct(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MorphologyReconstructOperation,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Applies morphological reconstruction on binary images.
            </summary>
            <param name="source">
            The image on which the method performs the morphological operation.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="marker">
            Image Marker is a reference to the marker image. 
            </param>
            <param name="method">
            The type of morphological reconstruction procedure to use dilate or erode.
            </param>
            <param name="connectivity">
            Connectivity  specifies the type of connectivity used by the algorithm for morphological reconstruction.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this 
            method.
            <para>
            Use this method with binary images.
            </para>
            	<para>
            		<format type="italics">source</format>, <format type="italics">destination</format> and <format type="italics">marker</format> 
            images must be the same type.
            </para>
            <para>
             Marker is specified either though the array of points or using the marker image. If none or both of them are specified then and error is thrown.
            </para>  
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.And(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise AND or a bitwise NAND between two images.
            </summary>
            <param name="sourceA">
            The input image.
            </param>
            <param name="sourceB">
            The second input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32. This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' And image i with the image in imageViewer1.
            ' Do the operation inplace (store the result in i)
            Algorithms.And(imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // And image i with the image in imageViewer1.
            // Do the operation inplace (store the result in i)
            Algorithms.And(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.And(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise AND between an image and a constant.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="value">
            The pixel value.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32. This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' And operation between a constant and an image in imageViewer1.
            ' Store the result in i
            Algorithms.And(imageViewer1.Image, New PixelValue(1), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // And operation between a constant and an image in imageViewer1.
            // Store the result in i
            Algorithms.And(imageViewer1.Image, new PixelValue(1), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Compare(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ComparisonFunction)">
            <summary>Performs comparison operations between two images.
            </summary>
            <param name="sourceA">The first input image.
            </param>
            <param name="sourceB">The second input image.
            </param>
            <param name="destination">The resulting image. It can be one of the source images.
            </param>
            <param name="comparisonFunction">The comparison operator to use.
            </param>
            <remarks>
            Use this method with image types U8, I16, and Sgl. All input images must have the same image type.
            This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            ' Compare a constant to an image in Viewer1.
            ' Store the result in i
            Algorithms.Compare (imageViewer1.Image, New PixelValue(50), i, ComparisonFunction.ClearEqual)
            ' Compare image i to the image in Viewer1.
            ' Do the comparison inplace (store the result in i)
            Algorithms.Compare (imageViewer1.Image, i, i, ComparisonFunction.ClearGreater)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            // Compare a constant to an image in Viewer1.
            // Store the result in i
            Algorithms.Compare(imageViewer1.Image, new PixelValue(50), i, ComparisonFunction.ClearEqual);
            // Compare image i to the image in Viewer1.
            // Do the comparison inplace (store the result in i)
            Algorithms.Compare(imageViewer1.Image, i, i, ComparisonFunction.ClearGreater);
            	</code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Compare(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ComparisonFunction)">
            <summary>Performs comparison operations between an image and a constant.
            </summary>
            <param name="source">The input image.
            </param>
            <param name="value">The pixel value.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="comparisonFunction">The comparison operator to use.
            </param>
            <remarks>
            Use this method with image types U8, I16, and Sgl. This method is optimized for MMX.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LogicalDifference(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise logical difference (A AND NOT B) between two images. 
            </summary>
            <param name="sourceA">
            The first source image. 
            </param>
            <param name="sourceB">
            The second source image, which must be the same type of image as <format type="italics">sourceA</format>.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Find the Logical Difference of image i with the image in Viewer1. 
            'Store the result in i
            Algorithms.LogicalDifference (imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Find the Logical Difference of image i with the image in Viewer1. 
            //Store the result in i
            Algorithms.LogicalDifference(imageViewer1.Image, i, i); 
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LogicalDifference(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Performs a bitwise logical difference (A AND NOT B) between an image and a constant. 
            </summary>
            <param name="source">
            The source image. 
            </param>
            <param name="value">
            The value to AND NOT to the source image.
            </param>
            <param name="destination">
            The destination image. 
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Logical Difference operation between a constant and an image in Viewer1.
            'Store the result in i
            Algorithms.LogicalDifference (imageViewer1.Image, New PixelValue (128), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Logical Difference operation between a constant and an image in Viewer1.
            //Store the result in i
            Algorithms.LogicalDifference(imageViewer1.Image, new PixelValue(128), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Nand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise NAND between two images.
            </summary>
            <param name="sourceA">
            The input image.
            </param>
            <param name="sourceB">
            The second input image, which must be the same type of image as <format type="italics">sourceA</format>
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' NAND image i with the image in imageViewer1.
            ' Do the operation inplace (store the result in i)
            Algorithms.Nand(imageViewer1.Image, i, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // NAND image i with the image in imageViewer1.
            // Do the operation inplace (store the result in i)
            Algorithms.Nand(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Nand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise NAND between an image and a constant.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="value">
            The pixel value to NAND with the source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Nor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise NOR between two images.
            </summary>
            <param name="sourceA">
            The input image.
            </param>
            <param name="sourceB">
            The second input image, which must be the same type of image as <format type="italics">sourceA</format>
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' NOR image i with the image in Viewer1.
            ' Do the operation inplace (store the result in i)
            Algorithms.Nor (imageViewer1.Image, i, i)
             </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
               
            // NOR image i with the image in Viewer1.
            // Do the operation inplace (store the result in i)
            Algorithms.Nor(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Nor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise NOR between an image and a constant.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="value">
            The pixel value to NOR with the source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            ' NOR operation between a constant and an image in Viewer1.
            ' Store the result in i
            Algorithms.Nor (imageViewer1.Image, New PixelValue (1), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // NOR operation between a constant and an image in Viewer1.
            // Store the result in i
            Algorithms.Nor(imageViewer1.Image, new PixelValue(1), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Or(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise OR between two images.
            </summary>
            <param name="sourceA">
            The input image.
            </param>
            <param name="sourceB">
            The second input image, which must be the same type of image as <format type="italics">sourceA</format>
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' OR image i with the image in Viewer1.
            ' Do the operation inplace (store the result in i)
            Algorithms.Or (imageViewer1.Image, i, i)
             </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
               
            // OR image i with the image in Viewer1.
            // Do the operation inplace (store the result in i)
            Algorithms.Or(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Or(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise OR between an image and a constant.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="value">
            The pixel value to OR with the source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            ' OR operation between a constant and an image in Viewer1.
            ' Store the result in i
            Algorithms.Or (imageViewer1.Image, New PixelValue (1), i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // OR operation between a constant and an image in Viewer1.
            // Store the result in i
            Algorithms.Or(imageViewer1.Image, new PixelValue(1), i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Xnor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise XNOR between two images.
            </summary>
            <param name="sourceA">
            The input image.
            </param>
            <param name="sourceB">
            The second input image, which must be the same type of image as <format type="italics">sourceA</format>
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' XNOR image i with the image in Viewer1.
            ' Do the operation inplace (store the result in i)
            Algorithms.Xnor (imageViewer1.Image, i, i)
             </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
               
            // XNOR image i with the image in Viewer1.
            // Do the operation inplace (store the result in i)
            Algorithms.Xnor(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Xnor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Performs a bitwise XNOR between an image and a constant.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="value">
            The pixel value to XNOR with the source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Xor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes a bitwise XOR between two images.
            </summary>
            <param name="sourceA">
            The input image.
            </param>
            <param name="sourceB">
            The second input image, which must be the same type of image as <format type="italics">sourceA</format>
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' XOR image i with the image in Viewer1.
            ' Do the operation inplace (store the result in i)
            Algorithms.Xor (imageViewer1.Image, i, i)
             </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
               
            // XOR image i with the image in Viewer1.
            // Do the operation inplace (store the result in i)
            Algorithms.Xor(imageViewer1.Image, i, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Xor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Performs a bitwise XOR between an image and a constant.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="value">
            The pixel value to XOR with the source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with image types U8, I16, Rgb32, and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ParticleFilterCriteria})">
            <summary>
            Filters (keeps or removes) particles in an image according to their morphological measurements.
            </summary>
            <param name="source">
            The image on which to perform the particle filter.
            </param>
            <param name="destination">
            The result of the processing, containing only the filtered particles.
            </param>
            <param name="criteria">
            The options to apply to the particles in the source image.
            </param>
            <returns>
            The number of particles remaining in the destination image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method. Use 
            this method with U8, I16 and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ParticleFilterCriteria},NationalInstruments.Vision.Analysis.ParticleFilterOptions)">
            <summary>
            Filters (keeps or removes) particles in an image according to their morphological measurements.
            </summary>
            <param name="source">
            The image on which to perform the particle filter.
            </param>
            <param name="destination">
            The result of the processing, containing only the filtered particles.
            </param>
            <param name="criteria">
            The criteria to apply to the particles in the source image.
            </param>
            <param name="options">
            The options used by the method to filter binary particles.
            </param>
            <returns>
            The number of particles remaining in the destination image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method. Use 
            this method with U8, I16 and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ParticleFilterCriteria},NationalInstruments.Vision.Analysis.ParticleFilterOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Filters (keeps or removes) particles in an image according to their morphological measurements.
            </summary>
            <param name="source">
            The image on which to perform the particle filter.
            </param>
            <param name="destination">
            The result of the processing, containing only the filtered particles.
            </param>
            <param name="criteria">
            The criteria to apply to the particles in the source image.
            </param>
            <param name="options">
            The options used by the method to filter binary particles.
            </param>
            <param name="roi">
            The ROI whose contours a particle must be contained in to avoid being filtered out. If 
            <see cref="P:NationalInstruments.Vision.Analysis.ParticleFilterOptions.RejectBorder" crefType="Unqualified"/> is True in the
            <format type="italics">options</format> parameter, any particle touching the border of a contour in roi will also 
            be filtered out. Pass null or Nothing for this parameter to filter particles in the entire image based on the 
            <format type="italics">criteria</format> parameter. 
            </param>
            <returns>
            The number of particles remaining in the destination image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method. Use 
            this method with U8, I16 and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
             
            Dim i As New VisionImage
            Dim criteria As New Collection(Of ParticleFilterCriteria)
            ' Select particles that contain less than 100 pixels or
            ' more than 300 pixels and remove them.
            criteria.Add (New ParticleFilterCriteria (MeasurementType.Area, New Range(100,300))
            ' Perform the particle filter operation and
            ' store the result in i
            Algorithms.ParticleFilter (imageViewer1.Image, i, criteria)
            </code>
            	<code lang="C#">
            [C#]
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage i = new VisionImage();
            Collection&lt;ParticleFilterCriteria&gt; criteria = new Collection&lt;ParticleFilterCriteria&gt;();
            // Select particles that contain less than 100 pixels or
            // more than 300 pixels and remove them.
            criteria.Add(new ParticleFilterCriteria(MeasurementType.Area, new Range(100, 300));
            // Perform the particle filter operation and
            // store the result in i
            Algorithms.ParticleFilter(imageViewer1.Image, i, criteria);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleMeasurements(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.MeasurementType})">
            <summary>
            Takes a measurement on all particles in a binary image.
            </summary>
            <param name="image">
            The image containing the particle to get information about. 
            </param>
            <param name="measurements">
            The measurement to make on the particle. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport" crefType="Unqualified"/> object containing the value of the measurements on each particle in the image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleMeasurements(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.MeasurementType},NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Takes a measurement on all particles in a binary image.
            </summary>
            <param name="image">
            The image containing the particle to get information about. 
            </param>
            <param name="measurements">
            The measurement to make on the particle. 
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are touching. Set this
            parameter to Connectivity4 to use connectivity-4 to determine whether particles are touching. The default is 
            Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport" crefType="Unqualified"/> object containing the value of the measurements on each particle in the image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleMeasurements(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.MeasurementType},NationalInstruments.Vision.Analysis.Connectivity,NationalInstruments.Vision.Analysis.ParticleMeasurementsCalibrationMode)">
            <summary>
            Takes a measurement on all particles in a binary image.
            </summary>
            <param name="image">
            The image containing the particle to get information about. 
            </param>
            <param name="measurements">
            The measurement to make on the particle. 
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are touching. Set this
            parameter to Connectivity4 to use connectivity-4 to determine whether particles are touching. The default is 
            Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <param name="calibrationMode">
            Specifies whether to return pixel measurements, real-world measurements, or both.  The default is Pixel.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport" crefType="Unqualified"/> object containing the value of the measurements on each particle in the image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim Measurements As New Collection(Of MeasurementType)
            ' Measure area, perimeter, and Heywood circularity factor in pixel and real-world measurements.
            Measurements.Add (MeasurementType.Area)
            Measurements.Add (MeasurementType.Perimeter)
            Measurements.Add (MeasurementType.HeywoodCircularityFactor)
            Dim Report As ParticleMeasurementsReport = Algorithms.ParticleMeasurements (imageViewer1.Image, 
            Measurements, Connectivity.Connectivity8, ParticleMeasurementsCalibrationMode.Both)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            Collection&lt;MeasurementType&gt; measurements = new Collection&lt;MeasurementType&gt;();
            // Measure area, perimeter, and Heywood circularity factor in pixel and real-world measurements.
            measurements.Add(MeasurementType.Area);
            measurements.Add(MeasurementType.Perimeter);
            measurements.Add(MeasurementType.HeywoodCircularityFactor);
            ParticleMeasurementsReport report = Algorithms.ParticleMeasurements(imageViewer1.Image, 
            measurements, Connectivity.Connectivity8, ParticleMeasurementsCalibrationMode.Both);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleReport(NationalInstruments.Vision.VisionImage)">
            <summary>
            Detects and returns commonly-used properties of particles in a binary image.
            </summary>
            <param name="image">
            The image on which to get information about the particles.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ParticleReport" crefType="Unqualified"/> containing information about the particles in the image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleReport(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Detects and returns commonly-used properties of particles in a binary image.
            </summary>
            <param name="image">
            The image on which to get information about the particles.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are touching. Set this
            parameter to Connectivity4 to use connectivity-4 to determine whether particles are touching. The default is 
            Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ParticleReport" crefType="Unqualified"/> containing information about the particles in the image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleReport(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Connectivity,System.Boolean)">
            <summary>
            Detects and returns commonly-used properties of particles in a binary image.
            </summary>
            <param name="image">
            The image on which to get information about the particles.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are touching. Set this
            parameter to Connectivity4 to use connectivity-4 to determine whether particles are touching. The default is 
            Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <param name="calibrated">
            Specifies whether to take calibrated measurements on the particles in the image. The default is False.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ParticleReport" crefType="Unqualified"/> containing information about the particles in the image.
            </returns>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using 
            the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8, I16 and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            ' Threshold the image in viewer1 in place.
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), True, 255)
             
            ' Do the particle report.
            Dim Reports As Collection(Of ParticleReport) = Algorithms.ParticleReport (ImageViewer1.Image)
             
            'For each particle, display Area and the Bounding Rectangle.
            For Each Report As ParticleReport In Reports
                Dim Text As String = "A: " + CStr(Report.Area)
                imageViewer1.Image.Overlays.Default.AddRectangle (Report.BoundingRect, Rgb32Value.GreenColor, DrawingMode.DrawValue)
                Dim TextOptions As New OverlayTextOptions("Arial", 16, HorizontalTextAlignment.Center)
                Dim RotatedRect As New RotatedRectangleContour(Report.BoundingRect)
                imageViewer1.Image.Overlays.Default.AddText (Text, RotatedRect.Center, Rgb32Value.BlueColor, TextOptions)
            Next
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Threshold the image in viewer1 in place.
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, New Range(128, 255), true, 255);
             
            // Do the particle report.
            Collection&lt;ParticleReport&gt; reports = Algorithms.ParticleReport(ImageViewer1.Image);
             
            // For each particle, display Area and the Bounding Rectangle.
            foreach (ParticleReport report in reports) {
                string text = "A: " + report.Area.ToString();
                imageViewer1.Image.Overlays.Default.AddRectangle(report.BoundingRect, Rgb32Value.GreenColor, DrawingMode.DrawValue);
                OverlayTextOptions textOptions = new OverlayTextOptions("Arial", 16, HorizontalTextAlignment.Center);
                RotatedRectangleContour rotatedRect = new RotatedRectangleContour(report.BoundingRect);
                imageViewer1.Image.Overlays.Default.AddText(text, rotatedRect.Center, Rgb32Value.BlueColor, textOptions);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.BuildCoordinateSystem(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Builds a reference for any arbitrary coordinate system with respect to the image plane. The reference of the coordinate system is specified as the position of the origin of the coordinate system, the orientation of its x-axis with respect to that of the image plane, and the direction of the axis.
            </summary>
            <param name="points">
            A collection of points that define the coordinate system. If two points are specified, these points are assumed to lie along the 
            x-axis of the coordinate system and the first point is used as the origin of the coordinate axis, as shown in the following figure.
            <para>
            		<img src="TwoPointCoordSystem.gif"/>
            	</para>
            	<para>
            If three points are specified, the first two points are assumed to be along the x-axis, and the third point is assumed to be on the 
            y-axis of the coordinate system, as shown in the following figure.
            </para>
            	<para>
            		<img src="ThreePointCoordSystem.gif"/>
            	</para>
            </param>
            <returns>
            The resulting coordinate system. On failure, an exception is thrown.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.BuildCoordinateSystem(NationalInstruments.Vision.Roi)">
            <summary>
            Builds a reference for any arbitrary coordinate system with respect to the image plane. The reference of the coordinate system is specified as the position of the origin of the coordinate system, the orientation of its x-axis with respect to that of the image plane, and the direction of the axis.
            </summary>
            <param name="points">
            A collection of points that define the coordinate system. If two points are specified, these points are assumed to lie along the 
            x-axis of the coordinate system and the first point is used as the origin of the coordinate axis, as shown in the following figure.
            <para>
            		<img src="TwoPointCoordSystem.gif"/>
            	</para>
            	<para>
            If three points are specified, the first two points are assumed to be along the x-axis, and the third point is assumed to be on the 
            y-axis of the coordinate system, as shown in the following figure.
            </para>
            	<para>
            		<img src="ThreePointCoordSystem.gif"/>
            	</para>
            </param>
            <returns>
            The resulting coordinate system. On failure, an exception is thrown.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.BuildCoordinateSystem(NationalInstruments.Vision.Roi,NationalInstruments.Vision.AxisOrientation)">
            <summary>
            Builds a reference for any arbitrary coordinate system with respect to the image plane. The reference of the coordinate system is specified as the position of the origin of the coordinate system, the orientation of its x-axis with respect to that of the image plane, and the direction of the axis.
            </summary>
            <param name="points">
            A collection of points that define the coordinate system. If two points are specified, these points are assumed to lie along the 
            x-axis of the coordinate system and the first point is used as the origin of the coordinate axis, as shown in the following figure.
            <para>
            		<img src="TwoPointCoordSystem.gif"/>
            	</para>
            	<para>
            If three points are specified, the first two points are assumed to be along the x-axis, and the third point is assumed to be on the 
            y-axis of the coordinate system, as shown in the following figure.
            </para>
            	<para>
            		<img src="ThreePointCoordSystem.gif"/>
            	</para>
            </param>
            <param name="orientation">
            Specifies the direction of the coordinate system. The <format type="italics">orientation</format> can be <see cref="F:NationalInstruments.Vision.AxisOrientation.Direct" crefType="Unqualified"/> or <see cref="F:NationalInstruments.Vision.AxisOrientation.Indirect" crefType="Unqualified"/>.
            </param>
            <returns>
            The resulting coordinate system. On failure, an exception is thrown.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.BuildCoordinateSystem(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.AxisOrientation)">
            <summary>
            Builds a reference for any arbitrary coordinate system with respect to the image plane. The reference of the coordinate system is specified as the position of the origin of the coordinate system, the orientation of its x-axis with respect to that of the image plane, and the direction of the axis.
            </summary>
            <param name="points">
            A collection of points that define the coordinate system. If two points are specified, these points are assumed to lie along the 
            x-axis of the coordinate system and the first point is used as the origin of the coordinate axis, as shown in the following figure.
            <para>
            		<img src="TwoPointCoordSystem.gif"/>
            	</para>
            	<para>
            If three points are specified, the first two points are assumed to be along the x-axis, and the third point is assumed to be on the 
            y-axis of the coordinate system, as shown in the following figure.
            </para>
            	<para>
            		<img src="ThreePointCoordSystem.gif"/>
            	</para>
            </param>
            <param name="orientation">
            Specifies the direction of the coordinate system. The <format type="italics">orientation</format> can be <see cref="F:NationalInstruments.Vision.AxisOrientation.Direct" crefType="Unqualified"/> or <see cref="F:NationalInstruments.Vision.AxisOrientation.Indirect" crefType="Unqualified"/>.
            </param>
            <returns>
            The resulting coordinate system. On failure, an exception is thrown.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim points1 As New Collection(Of PointContour)
            Dim points2 As New Collection(Of PointContour)
            Dim coordinateSystem1 As New CoordinateSystem
            Dim coordinateSystem2 As New CoordinateSystem
             
            'Build a direct coordinate system whose origin is at (0,0)
            'and the x-axis passes through (10,10)
            points1.Add(New PointContour(0, 0))
            points1.Add(New PointContour(10, 10))
            coordinateSystem1 = Algorithms.BuildCoordinateSystem (points1, AxisOrientation.Direct)
             
            'Build an indirect coordinate system whose
            'x-axis passes through (1,5) and (10,-25) and
            'y-axis passes through (20,2)
            points2.Add(New PointContour(1,5))
            points2.Add(New PointContour(10,-25))
            points2.Add(New PointContour(20,2))
            coordinateSystem2 = Algorithms.BuildCoordinateSystem (points2, AxisOrientation.Indirect)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            Collection&lt;PointContour&gt; points1 = new Collection&lt;PointContour&gt;();
            Collection&lt;PointContour&gt; points2 = new Collection&lt;PointContour&gt;();
            CoordinateSystem coordinateSystem1, coordinateSystem2;
             
            // Build a direct coordinate system whose origin is at (0,0)
            // and the x-axis passes through (10,10)
            points1.Add(new PointContour(0, 0))
            points1.Add(new PointContour(10, 10))
            coordinateSystem1 = Algorithms.BuildCoordinateSystem (points1, AxisOrientation.Direct)
             
            // Build an indirect coordinate system whose
            // x-axis passes through (1,5) and (10,-25) and
            // y-axis passes through (20,2)
            points2.Add(new PointContour(1,5))
            points2.Add(new PointContour(10,-25))
            points2.Add(new PointContour(20,2))
            coordinateSystem2 = Algorithms.BuildCoordinateSystem (points2, AxisOrientation.Indirect)
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitCircle(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Finds the circle that best represents a set of points.
            </summary>
            <param name="points">
            The coordinates of the points to use for the fit. This collection must have at least three items.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitCircleReport" crefType="Unqualified"/> object containing information
            about the circle that best represents the set of points.
            </returns>
            <remarks>
            You must supply at least three non-colinear points to fit to the edge of the circle.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitCircle(NationalInstruments.Vision.Roi)">
            <summary>
            Finds the circle that best represents a set of points.
            </summary>
            <param name="points">
            The ROI containing the points to use for the fit.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitCircleReport" crefType="Unqualified"/> object containing information
            about the circle that best represents the set of points.
            </returns>
            <remarks>
            You must supply at least three non-colinear points to fit to the edge of the circle.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitCircle(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FitCircleOptions)">
            <summary>
            Finds the circle that best represents a set of points.
            </summary>
            <param name="points">
            The ROI containing the points to use for the fit.
            </param>
            <param name="options">
            The options the method uses.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitCircleReport" crefType="Unqualified"/> object containing information
            about the circle that best represents the set of points.
            </returns>
            <remarks>
            You must supply at least three non-colinear points to fit to the edge of the circle.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitCircle(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.FitCircleOptions)">
            <summary>
            Finds the circle that best represents a set of points.
            </summary>
            <param name="points">
            The coordinates of the points to use for the fit. This collection must have at least three items.
            </param>
            <param name="options">
            The options the method uses.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitCircleReport" crefType="Unqualified"/> object containing information
            about the circle that best represents the set of points.
            </returns>
            <remarks>
            You must supply at least three non-colinear points to fit to the edge of the circle.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim points As New Collection(Of PointContour)
             
            'Find the circle that passes through
            '(100,100), (100,-100), (-100,100)
            points.Add (New PointContour (100, 100))
            points.Add (New PointContour (100, -100))
            points.Add (New PointContour (-100, 100))
             
            Dim Report As FitCircleReport = Algorithms.FitCircle (points)
            'Overlay the circle on the image in Viewer1.
            imageViewer1.Image.Overlays.Default.AddOval (Report.Circle)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            Collection&lt;PointContour&gt; points = new Collection&lt;PointContour&gt;();
             
            // Find the circle that passes through
            // (100,100), (100,-100), (-100,100)
            points.Add(new PointContour(100, 100));
            points.Add(new PointContour(100, -100));
            points.Add(new PointContour(-100, 100));
             
            FitCircleReport report = Algorithms.FitCircle(points);
            // Overlay the circle on the image in Viewer1.
            imageViewer1.Image.Overlays.Default.AddOval(report.Circle);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitEllipse(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Finds the ellipse that best represents a set of points.
            </summary>
            <param name="points">
            The coordinates of the points to use for the fit. This collection must have at least six items.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitEllipseReport" crefType="Unqualified"/> object containing information
            about the ellipse that best represents the set of points.
            </returns>
            <remarks>
            You must supply at least six non-colinear points to fit to the edge of the ellipse.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitEllipse(NationalInstruments.Vision.Roi)">
            <summary>
            Finds the ellipse that best represents a set of points.
            </summary>
            <param name="points">
            The ROI containing the points to use for the fit.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitEllipseReport" crefType="Unqualified"/> object containing information
            about the ellipse that best represents the set of points.
            </returns>
            <remarks>
            You must supply at least six non-colinear points to fit to the edge of the ellipse.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitEllipse(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FitEllipseOptions)">
            <summary>
            Finds the ellipse that best represents a set of points.
            </summary>
            <param name="points">
            The ROI containing the points to use for the fit.
            </param>
            <param name="options">
            The options the method uses.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitEllipseReport" crefType="Unqualified"/> object containing information
            about the ellipse that best represents the set of points.
            </returns>
            <remarks>
            You must supply at least six non-colinear points to fit to the edge of the ellipse.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitEllipse(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.FitEllipseOptions)">
            <summary>
            Finds the ellipse that best represents a set of points.
            </summary>
            <param name="points">
            The coordinates of the points to use for the fit. This collection must have at least six items.
            </param>
            <param name="options">
            The options the method uses.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitEllipseReport" crefType="Unqualified"/> object containing information
            about the ellipse that best represents the set of points.
            </returns>
            <remarks>
            You must supply at least six non-colinear points to fit to the edge of the ellipse.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim points As New Collection(Of PointContour)
             
            'Find the ellipse that passes through
            '(1,1), (-1,1), (1,-1), (-1,-1), (1.414,0), (0,1.414)
            points.Add (New PointContour (1, 1))
            points.Add (New PointContour (-1, 1))
            points.Add (New PointContour (1, -1))
            points.Add (New PointContour (-1, -1))
            points.Add (New PointContour (1.414, 0))
            points.Add (New PointContour (0, 1.414))
             
            Dim Report As FitEllipseReport = Algorithms.FitEllipse (points)
            'Overlay the axes of the ellipse on the image in Viewer1.
            imageViewer1.Image.Overlays.Default.AddLine (Report.MajorAxis)
            imageViewer1.Image.Overlays.Default.AddLine (Report.MinorAxis)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            Collection&lt;PointContour&gt; points = new Collection&lt;PointContour&gt;();
             
            // Find the ellipse that passes through
            // (1,1), (-1,1), (1,-1), (-1,-1), (1.414,0), (0,1.414)
            points.Add(new PointContour(1, 1));
            points.Add(new PointContour(-1, 1));
            points.Add(new PointContour(1, -1));
            points.Add(new PointContour(-1, -1));
            points.Add(new PointContour(1.414, 0));
            points.Add(new PointContour(0, 1.414));
             
            FitEllipseReport report = Algorithms.FitEllipse(points);
            // Overlay the axes of the ellipse on the image in Viewer1.
            imageViewer1.Image.Overlays.Default.AddLine(report.MajorAxis);
            imageViewer1.Image.Overlays.Default.AddLine(report.MinorAxis);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitLine(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Finds the line that best represents a set of points.
            </summary>
            <param name="points">
            The coordinates of the points to use for the fit. This collection must contain two or more point items 
            corresponding to two or more points on the line.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitLineReport" crefType="Unqualified"/> object containing information
            about the line that best represents the set of points.
            </returns>
            <remarks>
            The resulting line may only take into account a subset of the input points.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitLine(NationalInstruments.Vision.Roi)">
            <summary>
            Finds the line that best represents a set of points.
            </summary>
            <param name="points">
            The ROI containing the points to use for the fit. This ROI must contain two or more PointContours
            corresponding to two or more points on the line.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitLineReport" crefType="Unqualified"/> object containing information
            about the line that best represents the set of points.
            </returns>
            <remarks>
            The resulting line may only take into account a subset of the input points.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitLine(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FitLineOptions)">
            <summary>
            Finds the line that best represents a set of points.
            </summary>
            <param name="points">
            The ROI containing the points to use for the fit. This ROI must contain two or more PointContours
            corresponding to two or more points on the line.
            </param>
            <param name="options">
            The options the method uses.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitLineReport" crefType="Unqualified"/> object containing information
            about the line that best represents the set of points.
            </returns>
            <remarks>
            The resulting line may only take into account a subset of the input points.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FitLine(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.FitLineOptions)">
            <summary>
            Finds the line that best represents a set of points.
            </summary>
            <param name="points">
            The coordinates of the points to use for the fit. This collection must contain two or more point items 
            corresponding to two or more points on the line.
            </param>
            <param name="options">
            The options the method uses.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.FitLineReport" crefType="Unqualified"/> object containing information
            about the line that best represents the set of points.
            </returns>
            <remarks>
            The resulting line may only take into account a subset of the input points.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim points As New Collection(Of PointContour)
             
            'Find the line that passes through
            '(1,1), (-1,1)
            points.Add (New PointContour (1, 1))
            points.Add (New PointContour (-1, 1))
             
            Dim Report As FitLineReport = Algorithms.FitLine (points)
            'Overlay the line on the image in Viewer1.
            imageViewer1.Image.Overlays.Default.AddLine (Report.LineSegment)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            Collection&lt;PointContour&gt; points = new Collection&lt;PointContour&gt;();
             
            // Find the line that passes through
            // (1,1), (-1,1)
            points.Add(new PointContour(1, 1));
            points.Add(new PointContour(-1, 1));
             
            FitLineReport report = Algorithms.FitLine(points);
            // Overlay the line on the image in Viewer1.
            imageViewer1.Image.Overlays.Default.AddLine(report.LineSegment);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetAngles(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Computes the angles formed by sets of four points in an image.
            </summary>
            <param name="points">
            The coordinates for angle computation.
            </param>
            <returns>
            A collection containing the computed angles in degrees.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetAngles(NationalInstruments.Vision.Roi)">
            <summary>
            Computes the angles formed by sets of four points in an image.
            </summary>
            <param name="points">
            The ROI containing the points for angle computation.
            </param>
            <returns>
            A collection containing the computed angles in degrees.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetAngles(NationalInstruments.Vision.Roi,NationalInstruments.Vision.PointContour)">
            <summary>
            Computes the angles formed by sets of two points and a common vertex.
            </summary>
            <param name="points">
            The ROI containing the points for angle computation.
            </param>
            <param name="vertex">
            The coordinate of the vertex.
            </param>
            <returns>
            A collection containing the computed angles in degrees.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetAngles(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.PointContour)">
            <summary>
            Computes the angles formed by sets of two points and a common vertex.
            </summary>
            <param name="points">
            The coordinates for angle computation.
            </param>
            <param name="vertex">
            The coordinate of the vertex.
            </param>
            <returns>
            A collection containing the computed angles in degrees.
            </returns>
            <example>
            	<code lang="VB.NET">
                
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Find the edge coordinates along a path defined by regions
            'on Viewer1 and display the coordinates on the image.
            Dim points As New Collection(Of PointContour)
            Dim vertex As New PointContour
            Dim anglesWithoutVertex As Double
            Dim anglesWithVertex As Double 
             
            'Initialize the points and the vertex
            points.Add (New PointContour (10, 100))
            points.Add (New PointContour (20, 50))
            points.Add (New PointContour (30, 10))
            points.Add (New PointContour (40, 15))
            vertex.Initialize(10, 10)
             
            'Find the angles without a vertex
            anglesWithoutVertex = Algorithms.GetAngles (points)
            'Find the angles with a vertex
            anglesWithVertex = Algorithms.GetAngles (points, vertex)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Find the edge coordinates along a path defined by regions
            // on Viewer1 and display the coordinates on the image.
            Collection&lt;PointContour&gt; points = new Collection&lt;PointContour&gt;();
            PointContour vertex = new PointContour();
            double anglesWithoutVertex, anglesWithVertex;
             
            // Initialize the points and the vertex
            points.Add(new PointContour(10, 100));
            points.Add(new PointContour(20, 50));
            points.Add(new PointContour(30, 10));
            points.Add(new PointContour(40, 15));
            vertex.Initialize(10, 10);
             
            // Find the angles without a vertex
            anglesWithoutVertex = Algorithms.GetAngles(points);
            // Find the angles with a vertex
            anglesWithVertex = Algorithms.GetAngles(points, vertex);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindBisectingLine(NationalInstruments.Vision.LineContour,NationalInstruments.Vision.LineContour)">
            <summary>
            Computes a line that bisects two lines.
            </summary>
            <param name="line1">
            Defines the first line.
            </param>
            <param name="line2">
            Defines the second line.
            </param>
            <returns>
            The line that bisects <format type="italics">line1</format> and <format type="italics">line2</format>. On failure, an exception is thrown.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim line1 As New LineContour(New PointContour(10, 10), New PointContour(100, 100))
            Dim line2 As New LineContour(New PointContour(-40, -100), New PointContour(20, 30))
             
            'Find the bisecting line
            Dim BisectingLine As LineContour = Algorithms.FindBisectingLine (line1, line2)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            LineContour line1 = new LineContour(new PointContour(10, 10), new PointContour(100, 100));
            LineContour line2 = new LineContour(new PointContour(-40, 100), new PointContour(20, 30));
                
            //Find the bisecting line
            LineContour bisectingLine = Algorithms.FindBisectingLine(line1, line2);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindPointDistances(NationalInstruments.Vision.Roi)">
            <summary>
            Computes the distance, in pixels, between consecutive pairs of points.
            </summary>
            <param name="points">
            Specifies the points that the method uses to find the distances. This parameter must contain two or more PointContours.
            </param>
            <returns>
            A collection of floating-point numbers containing the computed distances. The method computes distance i between
            points i + 1 and i + 2.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindPointDistances(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Computes the distance, in pixels, between consecutive pairs of points.
            </summary>
            <param name="points">
            Specifies the points the method uses to find the distances.
            </param>
            <returns>
            A collection of floating-point numbers containing the computed distances. The method computes distance i between
            points i + 1 and i + 2.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim points As New Collection(Of PointContour)
             
            'Initialize points
            points.Add (New PointContour (10, 20))
            points.Add (New PointContour (100, 30))
            points.Add (New PointContour (50, 40))
             
            'Find the distances between consecutive points
            Dim Distances As Collection(Of Double) = Algorithms.FindPointDistances (points)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            Collection&lt;PointContour&gt; points = new Collection&lt;PointContour&gt;();
             
            //Initialize points
            points.Add(new PointContour(10, 20));
            points.Add(new PointContour(100, 30));
            points.Add(new PointContour(50, 40));
             
            //Find the distances between consecutive points
            Collection&lt;double&gt; distances = Algorithms.FindPointDistances(points);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindIntersectionPoint(NationalInstruments.Vision.LineContour,NationalInstruments.Vision.LineContour)">
            <summary>
            Computes the intersection of two lines.
            </summary>
            <param name="line1">
            Defines the start point and end point of the first line.
            </param>
            <param name="line2">
            Defines the start point and end point of the second line.
            </param>
            <returns>
            The coordinate location of the intersection of the two lines.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim line1 As New LineContour(New PointContour(10, 10), New PointContour(100, 100))
            Dim line2 As New LineContour(New PointContour(-40, -100), New PointContour(20, 30))
             
            'Find the intersection
            Dim intersection As PointContour = Algorithms.FindIntersectionPoint (line1, line2)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            LineContour line1 = new LineContour(new PointContour(10, 10), new PointContour(100, 100));
            LineContour line2 = new LineContour(new PointContour(-40, -100), new PointContour(20, 30));
               
            //Find the intersection
            PointContour intersection = Algorithms.FindIntersectionPoint(line1, line2);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindMidLine(NationalInstruments.Vision.LineContour,NationalInstruments.Vision.PointContour)">
            <summary>
            Computes the mid line between a point and a reference line. The mid line is the line that is parallel to 
            the reference line and lies midway between the point and the reference line.
            </summary>
            <param name="line">
            Defines the reference line.
            </param>
            <param name="point">
            Defines the point.
            </param>
            <returns>
            The line that is parallel to the reference line and lies midway between the point and the reference line.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim line As New LineContour
            Dim point As New PointContour
             
            'Initialize the line and the point
            line.Start.Initialize (10, 10)
            line.End.Initialize (100, 100)
            point.Initialize(50, -50)
             
            'Find the midline
            Dim MidLine As LineContour = Algorithms.FindMidLine (line, point)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            LineContour line = new LineContour();
            PointContour point = new PointContour();
                
            //Initialize the line and the point
            line.Start.Initialize(10, 10);
            line.End.Initialize(100, 100);
            point.Initialize(50, -50);
                
            //Find the midline
            LineContour midLine = Algorithms.FindMidLine(line, point);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindPerpendicularLine(NationalInstruments.Vision.LineContour,NationalInstruments.Vision.PointContour)">
            <summary>
            Computes a line that passes through a point and is perpendicular to a reference line.
            </summary>
            <param name="line">
            Defines the reference line.
            </param>
            <param name="point">
            Defines the point.
            </param>
            <returns>
            The coordinate location of the perpendicular line.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim line As New LineContour
            Dim point As New PointContour
             
            'Initialize the line and the point
            line.Start.Initialize (10, 10)
            line.End.Initialize (100, 100)
            point.Initialize(50, -50)
             
            'Find the line that passes through point and
            'is perpendicular to line
            Dim perpendicular As LineContour = Algorithms.FindPerpendicularLine (line, point)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            LineContour line = new LineContour();
            PointContour point = new PointContour();
                
            //Initialize the line and the point
            line.Start.Initialize(10, 10);
            line.End.Initialize(100, 100);
            point.Initialize(50, -50);
                
            //Find the line that passes through point and
            //is perpendicular to line
            LineContour perpendicular = Algorithms.FindPerpendicularLine(line, point);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetPointsOnContour(NationalInstruments.Vision.VisionImage)">
            <summary>
            Finds the number of edge segments in an image and returns the coordinates of the pixels in each segment. 
            Any pixel that is greater than zero is considered as an edge location.
            </summary>
            <param name="image">
            The source image.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.SegmentReport" crefType="Unqualified"/> object containing information 
            about the edge segments the method found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            <para>
            This method joins adjoining edge pixels into edge segments. An edge segment is considered closed if it forms a 
            loop. Each edge segment is given a weight based on the pixel gray values along that edge. An edge segment with 
            high gray values has a higher weight.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Get the contours on the image in Viewer1.
            Dim Contours As Collection(Of SegmentReport)
            Contours = Algorithms.GetPointsOnContour (imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Get the contours on the image in Viewer1.
            Collection&lt;SegmentReport&gt; contours;
            contours = Algorithms.GetPointsOnContour(imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetPointsOnLine(NationalInstruments.Vision.Roi)">
            <summary>
            Given the endpoints of a line, returns an collection of all the points comprising the line.
            </summary>
            <param name="line">
            The ROI containing the line whose points the method returns.
            </param>
            <returns>
            The points on the line.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetPointsOnLine(NationalInstruments.Vision.LineContour)">
            <summary>
            Given the endpoints of a line, returns an collection of all the points comprising the line.
            </summary>
            <param name="line">
            Specifies the line whose points the method returns.
            </param>
            <returns>
            The points on the line.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim line As New LineContour
             
            'Initialize the line
            line.Start (10, 10)
            line.End (100, 100)
             
            'Find the points on the line
            Algorithms.GetPointsOnLine (line)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            LineContour line = new LineContour();
                
            //Initialize the line
            line.Start(10, 10);
            line.End(100, 100);
                
            //Find the points on the line
            Algorithms.GetPointsOnLine(line);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindPolygonArea(NationalInstruments.Vision.PolygonContour)">
            <summary>
            Computes the area of a polygon described by the coordinates of its vertices.
            </summary>
            <param name="polygon">
            Defines the vertices of the polygon. This polygon must have three or more items corresponding to 
            three or more points located at the vertices of the polygon.
            </param>
            <returns>
            The area of the polygon.
            </returns>
            <remarks>
            The polygon must contain three or more vertices.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindPolygonArea(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Computes the area of a polygon described by the coordinates of its vertices.
            </summary>
            <param name="points">
            Defines the vertices of the polygon. This polygon must have three or more items corresponding to 
            three or more points located at the vertices of the polygon.
            </param>
            <returns>
            The area of the polygon.
            </returns>
            <remarks>
            The polygon must contain three or more vertices.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim points As New Collection(Of PointContour)
             
            'Find the area of a triangle defined by the points
            '(0,0), (0,30) and (30,0)
            points.Add (New PointContour (0, 0))
            points.Add (New PointContour (0, 30))
            points.Add (New PointContour (30, 0))
             
            Dim area As Double = Algorithms.FindPolygonArea (points)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            Collection&lt;PointContour&gt; points = new Collection&lt;PointContour&gt;();
             
            //Find the area of a triangle defined by the points
            //(0,0), (0,30) and (30,0)
            points.Add(new PointContour(0, 0));
            points.Add(new PointContour(0, 30));
            points.Add(new PointContour(30, 0));
             
            double area = Algorithms.FindPolygonArea(points);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.InterpolatePoints(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Resamples an array of pixels from an image using multiple interpolation functions. Use this method to 
            perform subpixel analysis of pixel profiles in the image.
            </summary>
            <param name="image">
            The image containing the values to interpolate.
            </param>
            <param name="points">
            The ROI containing the points over which the method performs the interpolation.
            </param>
            <returns>
            The resampled pixel data.
            </returns>
            <remarks>
            Use this method with U8, I16, and Rgb32 images. You can use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method to obtain 
            the coordinate points that you need to specify to this method.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.InterpolatePoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Resamples an array of pixels from an image using multiple interpolation functions. Use this method to 
            perform subpixel analysis of pixel profiles in the image.
            </summary>
            <param name="image">
            The image containing the values to interpolate.
            </param>
            <param name="points">
            The coordinates of points over which the method performs the interpolation. This parameter must only contain PointContours.
            </param>
            <returns>
            The resampled pixel data.
            </returns>
            <remarks>
            Use this method with U8, I16, and Rgb32 images. You can use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method to obtain 
            the coordinate points that you need to specify to this method.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.InterpolatePoints(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.SubPixelOptions)">
            <summary>
            Resamples an array of pixels from an image using multiple interpolation functions. Use this method to 
            perform subpixel analysis of pixel profiles in the image.
            </summary>
            <param name="image">
            The image containing the values to interpolate.
            </param>
            <param name="points">
            The ROI containing the points over which the method performs the interpolation.
            </param>
            <param name="options">
            The options to use to perform the interpolation for subpixel measurements.
            </param>
            <returns>
            The resampled pixel data.
            </returns>
            <remarks>
            Use this method with U8, I16, and Rgb32 images. You can use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method to obtain 
            the coordinate points that you need to specify to this method.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.InterpolatePoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.Analysis.SubPixelOptions)">
            <summary>
            Resamples an array of pixels from an image using multiple interpolation functions. Use this method to 
            perform subpixel analysis of pixel profiles in the image.
            </summary>
            <param name="image">
            The image containing the values to interpolate.
            </param>
            <param name="points">
            The coordinates of points over which the method performs the interpolation. This parameter must only contain PointContours.
            </param>
            <param name="options">
            The options to use to perform the interpolation for subpixel measurements.
            </param>
            <returns>
            The resampled pixel data.
            </returns>
            <remarks>
            Use this method with U8, I16, and Rgb32 images. You can use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method to obtain 
            the coordinate points that you need to specify to this method.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim ProfileReport As RoiProfileReport
             
            'First get the points along the path using RoiProfile
            ProfileReport = Algorithms.RoiProfile (imageViewer1.Image, imageViewer1.Roi)
             
            'Resample the pixels in image in Viewer1 using
            'a quadratic interpolation with one-fourth subpixel accuracy.
            Dim Options As New SubPixelOptions (SubPixelAccuracy.OneFourth, InterpolationMethod.Quadratic)
            Algorithms.InterpolatePoints (imageViewer1.Image, ProfileReport.Pixels, Options)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            RoiProfileReport profileReport;
             
            //First get the points along the path using RoiProfile
            profileReport = Algorithms.RoiProfile(imageViewer1.Image, imageViewer1.Roi);
             
            //Resample the pixels in image in Viewer1 using
            //a quadratic interpolation with one-fourth subpixel accuracy.
            SubPixelOptions options = new SubPixelOptions(SubPixelAccuracy.OneFourth, InterpolationMethod.Quadratic);
            Algorithms.InterpolatePoints(imageViewer1.Image, profileReport.Pixels, options);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClipboardToImage(NationalInstruments.Vision.VisionImage)">
            <summary>
            Reads an image from the clipboard.
            </summary>
            <param name="image">
            The image to copy the clipboard image into.
            </param>
            <remarks>
            Use this method with image types U8 and Rgb32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClipboardToImage(NationalInstruments.Vision.VisionImage,System.Boolean)">
            <summary>
            Reads an image from the clipboard.
            </summary>
            <param name="image">
            The image to copy the clipboard image into.
            </param>
            <param name="readPalette">
            Determines whether to read the palette from the clipboard image.
            </param>
            <returns>
            If requested, returns the palette from the clipboard.
            </returns>
            <remarks>
            Use this method with image types U8 and Rgb32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Copy the image in clipboard to the image in viewer1.
            'Also, copy the palette from the clipboard.
            imageViewer1.Palette = Algorithms.ClipboardToImage (imageViewer1.Image, True)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Copy the image in clipboard to the image in viewer1.
            //Also, copy the palette from the clipboard.
            imageViewer1.Palette = Algorithms.ClipboardToImage(imageViewer1.Image, True)
            	</code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ImageToClipboard(NationalInstruments.Vision.VisionImage)">
            <summary>
            Copies an image onto the clipboard.
            </summary>
            <param name="image">
            The image to copy to the clipboard.
            </param>
            <remarks>
            Use this method with U8 and Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ImageToClipboard(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.WindowsForms.Palette)">
            <summary>
            Copies an image onto the clipboard.
            </summary>
            <param name="image">
            The image to copy to the clipboard.
            </param>
            <param name="palette">
            A palette to associate with 8-bit images. It must point to an array of 256 colors, which represent the color 
            palette that the method associates with the image. If you pass null or Nothing for this parameter is NULL, the 
            method associates a grayscale palette with the image. 
            </param>
            <remarks>
            Use this method with U8 and Rgb32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Copy the image in Viewer1 to the clipboard.
            Algorithms.ImageToClipboard (imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Copy the image in Viewer1 to the clipboard.
            Algorithms.ImageToClipboard(imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertColorValue(NationalInstruments.Vision.ColorValue,NationalInstruments.Vision.ColorMode)">
            <summary>
            Maps the value of a color in one color mode into the value of the same color in another color mode.
            </summary>
            <param name="source">
            The source color space used for the operation.
            </param>
            <param name="destinationSpace">
            The destination color space used for the operation.
            </param>
            <returns>
            The value of the source color as represented in the destination color space. On failure, an exception is thrown.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertColorValue(NationalInstruments.Vision.ColorValue,NationalInstruments.Vision.ColorMode,System.Double)">
            <summary>
            Maps the value of a color in one color mode into the value of the same color in another color mode.
            </summary>
            <param name="source">
            The source color space used for the operation.
            </param>
            <param name="destinationSpace">
            The destination color space used for the operation.
            </param>
            <param name="offset">Offset, in degrees, to use when converting to HSL.
            </param>
            <returns>
            The value of the source color as represented in the destination color space. On failure, an exception is thrown.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertColorValue(NationalInstruments.Vision.ColorValue,NationalInstruments.Vision.ColorMode,System.Double,NationalInstruments.Vision.CieXyzValue)">
            <summary>
            Maps the value of a color in one color mode into the value of the same color in another color mode.
            </summary>
            <param name="source">
            The source color space used for the operation.
            </param>
            <param name="destinationSpace">
            The destination color space used for the operation.
            </param>
            <param name="offset">Offset, in degrees, to use when converting to HSL.
            </param>
            <param name="whiteReference">White reference value to use when converting to CIE L*a*b* format.
            </param>
            <returns>
            The value of the source color as represented in the destination color space. On failure, an exception is thrown.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            ' Find the HSL value equivalent to RGB color (128, 128, 128)
            Dim HslValue As Hsl32Value
            HslValue = Algorithms.ConvertColorValue(New ColorValue(New Rgb32Value(128, 128, 128)), ColorMode.Hsl).Hsl32
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Find the HSL value equivalent to RGB color (128, 128, 128)
            Hsl32Value hslValue;
            hslValue = Algorithms.ConvertColorValue(new ColorValue(new Rgb32Value(128, 128, 128)), ColorMode.Hsl).Hsl32;
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorHistogram(NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the histogram, or pixel distribution, of a color image.
            </summary>
            <param name="image">
            The color image used to compute the histogram.
            </param>
            <returns>
            A ColorHistogramReport. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.</remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorHistogram(NationalInstruments.Vision.VisionImage,System.Int32)">
            <summary>
            Calculates the histogram, or pixel distribution, of a color image.
            </summary>
            <param name="image">
            The color image used to compute the histogram.
            </param>
            <param name="classes">
            The number of classes into which the method separates the pixels.
            The default is 256.
            </param>
            <returns>
            A ColorHistogramReport. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.</remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorHistogram(NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.ColorMode)">
            <summary>
            Calculates the histogram, or pixel distribution, of a color image.
            </summary>
            <param name="image">
            The color image used to compute the histogram.
            </param>
            <param name="classes">
            The number of classes into which the method separates the pixels.
            The default is 256.
            </param>
            <param name="mode">
            The color space in which to perform the histogram. The default is ColorMode.Rgb.
            </param>
            <returns>
            A ColorHistogramReport. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.</remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorHistogram(NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.ColorMode,NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the histogram, or pixel distribution, of a color image.
            </summary>
            <param name="image">
            The color image used to compute the histogram.
            </param>
            <param name="classes">
            The number of classes into which the method separates the pixels. The default is 256.
            </param>
            <param name="mode">
            The color space in which to perform the histogram. The default is ColorMode.Rgb.
            </param>
            <param name="mask">
            The region to use for computing the histogram. The method calculates the histogram using only those pixels in the image whose corresponding pixels in the mask are non-zero. Pass null or Nothing for this parameter if you want to perform a histogram on the entire image.
            </param>
            <returns>
            A ColorHistogramReport. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.</remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorHistogram(NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.ColorMode,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CieXyzValue)">
            <summary>
            Calculates the histogram, or pixel distribution, of a color image.
            </summary>
            <param name="image">
            The color image used to compute the histogram.
            </param>
            <param name="classes">
            The number of classes into which the method separates the pixels. The default is 256.
            </param>
            <param name="mode">
            The color space in which to perform the histogram. The default is ColorMode.Rgb.
            </param>
            <param name="mask">
            The region to use for computing the histogram. The method calculates the histogram using only those pixels in the image whose corresponding pixels in the mask are non-zero. Pass null or Nothing for this parameter if you want to perform a histogram on the entire image.
            </param>
            <param name="whiteReference">
            The white reference value to use when the <see cref="F:NationalInstruments.Vision.ColorMode.CieLab" crefType="Unqualified"/> mode is selected.
            </param>
            <returns>
            A ColorHistogramReport. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim Report As ColorHistogramReport
            Dim MaskImage As New VisionImage
            ' Find the histogram of a portion of the image in Viewer1
            ' defined by the regions on Viewer1.
            Algorithms.RoiToMask (MaskImage, imageViewer1.Roi)
            'Compute the histogram for each color plane
            Report = Algorithms.ColorHistogram (imageViewer1.Image, 256, ColorMode.Rgb, MaskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            ColorHistogramReport report;
            VisionImage maskImage = new VisionImage();
            // Find the histogram of a portion of the image in Viewer1
            // defined by the regions on Viewer1.
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            // Compute the histogram for each color plane
            report = Algorithms.ColorHistogram(imageViewer1.Image, 256, ColorMode.Rgb, MaskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorBcgTransform(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BcgOptions)">
            <summary>
            Applies brightness, contrast, and gamma correction to each plane of a color image.
            </summary>
            <param name="source">
            The source image to transform.
            </param>
            <param name="destination">
            The result of performing the transform.
            </param>
            <param name="options">
            The options to use to transform the image.
            </param>
            <remarks>
            Use this method on Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorBcgTransform(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BcgOptions,NationalInstruments.Vision.VisionImage)">
            <summary>
            Applies brightness, contrast, and gamma correction to each plane of a color image.
            </summary>
            <param name="source">
            The source image to transform.
            </param>
            <param name="destination">
            The result of performing the transform.
            </param>
            <param name="options">
            The options to use to transform the image.
            </param>
            <param name="mask">
            The mask applied to the source image. It indicates the region of the image where the ColorBcgTransform is applied. Only pixels in the original image that correspond to a nonzero pixel in the mask are used. A ColorBcgTransform on the complete image occurs if no mask image is passed in.
            </param>
            <remarks>
            Use this method on Rgb32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim MaskImage As New VisionImage
            Dim RedOptions As New BcgOptions
            Dim BlueOptions As New BcgOptions
            'Create a mask image from the regions on Viewer1
            Algorithms.RoiToMask (MaskImage, imageViewer1.Roi, New PixelValue(0), imageViewer1.Image)
            'Set up the options for the ColorBcgTransform
            'Decrease the brightness of the red plane
            RedOptions.Brightness = 100
            'Increase the contrast and gamma of the blue plane
            BlueOptions.Contrast = 90
            BlueOptions.Gamma = 2
            'Perform a ColorBcgTransform on a portion of Image using the mask
            'Store the results in the image in Viewer2.
            imageViewer2.Image.Type = ImageType.Rgb32
            Algorithms.ColorBcgTransform (imageViewer1.Image, imageViewer2.Image, RedOptions, New BcgOptions(), BlueOptions, MaskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage MaskImage = new VisionImage();
            BcgOptions RedOptions = new BcgOptions();
            BcgOptions BlueOptions = new BcgOptions();
            //Create a mask image from the regions on Viewer1
            Algorithms.RoiToMask(MaskImage, imageViewer1.Roi, new PixelValue(0), imageViewer1.Image);
            //Set up the options for the ColorBcgTransform
            //Decrease the brightness of the red plane
            RedOptions.Brightness = 100;
            //Increase the contrast and gamma of the blue plane
            BlueOptions.Contrast = 90;
            BlueOptions.Gamma = 2;
            //Perform a ColorBcgTransform on a portion of Image using the mask
            //Store the results in the image in Viewer2.
            imageViewer2.Image.Type = ImageType.Rgb32;
            Algorithms.ColorBcgTransform(imageViewer1.Image, imageViewer2.Image, RedOptions, new BcgOptions(), BlueOptions, MaskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorBcgTransform(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BcgOptions,NationalInstruments.Vision.Analysis.BcgOptions,NationalInstruments.Vision.Analysis.BcgOptions)">
            <summary>
            Applies brightness, contrast, and gamma correction to each plane of a color image.
            </summary>
            <param name="source">
            The source image to transform.
            </param>
            <param name="destination">
            The result of performing the transform.
            </param>
            <param name="redOptions">
            The options to use to transform the red plane of the image.
            </param>
            <param name="greenOptions">
            The options to use to transform the green plane of the image.
            </param>
            <param name="blueOptions">
            The options to use to transform the blue plane of the image.
            </param>
            <remarks>
            Use this method on Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorBcgTransform(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BcgOptions,NationalInstruments.Vision.Analysis.BcgOptions,NationalInstruments.Vision.Analysis.BcgOptions,NationalInstruments.Vision.VisionImage)">
            <summary>
            Applies brightness, contrast, and gamma correction to each plane of a color image.
            </summary>
            <param name="source">
            The source image to transform.
            </param>
            <param name="destination">
            The result of performing the transform.
            </param>
            <param name="redOptions">
            The options to use to transform the red plane of the image.
            </param>
            <param name="greenOptions">
            The options to use to transform the green plane of the image.
            </param>
            <param name="blueOptions">
            The options to use to transform the blue plane of the image.
            </param>
            <param name="mask">
            The mask applied to the source image. It indicates the region of the image where the ColorBcgTransform is applied. Only pixels in the original image that correspond to a nonzero pixel in the mask are used. A ColorBcgTransform on the complete image occurs if no mask image is passed in.
            </param>
            <remarks>
            Use this method on Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorEqualize(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the histogram of the luminance plane or all the planes of a color image and redistributes pixel values across the desired range while maintaining pixel value groupings.
            </summary>
            <param name="source">
            The color image to equalize.
            </param>
            <param name="destination">
            The resulting color image.
            </param>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorEqualize(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Boolean)">
            <summary>
            Calculates the histogram of the luminance plane or all the planes of a color image and redistributes pixel values across the desired range while maintaining pixel value groupings.
            </summary>
            <param name="source">
            The color image to equalize.
            </param>
            <param name="destination">
            The resulting color image.
            </param>
            <param name="equalizeAllPlanes">
            Set this parameter to True to equalize each plane. Set this parameter to False to equalize the luminance plane only.
            This parameter has a default value of False.
            </param>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            i.Type = ImageType.Rgb32
            'Equalize the luminance plane of the image in Viewer1 and the
            'store the results in i
            Algorithms.ColorEqualize (imageViewer1.Image, i)
            'Equalize all the planes of the image in Viewer1.
            'Do this operation inplace (store the results in the image in Viewer1)
            Algorithms.ColorEqualize (imageViewer1.Image, imageViewer1.Image, True)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            i.Type = ImageType.Rgb32;
            //Equalize the luminance plane of the image in Viewer1 and the
            //store the results in i
            Algorithms.ColorEqualize(imageViewer1.Image, i);
            //Equalize all the planes of the image in Viewer1.
            //Do this operation inplace (store the results in the image in Viewer1)
            Algorithms.ColorEqualize(imageViewer1.Image, imageViewer1.Image, true);
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorUserLookup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ColorMode,System.Collections.ObjectModel.Collection{System.Int16},System.Collections.ObjectModel.Collection{System.Int16},System.Collections.ObjectModel.Collection{System.Int16})">
            <summary>
            Performs a transformation on an image by replacing each pixel value in a given color plane with the lookup table entry corresponding to that value.
            </summary>
            <param name="source">
            The image on which to apply the lookup operation.
            </param>
            <param name="destination">
            The resulting color image.
            </param>
            <param name="mode">The color space in which to apply the lookup operation.
            </param>
            <param name="plane1">The lookup table to apply to the red or hue color plane. This array can contain up to 256 elements. If you specify fewer than 256 elements, the method fills the remaining elements with grayscale values. Pass null or Nothing for this parameter if you do not want to replace pixel values in this plane.
            </param>
            <param name="plane2">The lookup table to apply to the green or saturation color plane. This array can contain up to 256 elements. If you specify fewer than 256 elements, the method fills the remaining elements with grayscale values. Pass null or Nothing for this parameter if you do not want to replace pixel values in this plane.
            </param>
            <param name="plane3">The lookup table to apply to the blue, luminance, value, or intensity color plane. This array can contain up to 256 elements. If you specify fewer than 256 elements, the method fills the remaining elements with grayscale values. Pass null or Nothing for this parameter  if you do not want to replace pixel values in this plane.
            </param>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorUserLookup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ColorMode,System.Collections.ObjectModel.Collection{System.Int16},System.Collections.ObjectModel.Collection{System.Int16},System.Collections.ObjectModel.Collection{System.Int16},NationalInstruments.Vision.VisionImage)">
            <summary>
            Performs a transformation on an image by replacing each pixel value in a given color plane with the lookup table entry corresponding to that value.
            </summary>
            <param name="source">
            The image on which to apply the lookup operation.
            </param>
            <param name="destination">
            The resulting color image.
            </param>
            <param name="mode">The color space in which to apply the lookup operation.
            </param>
            <param name="plane1">The lookup table to apply to the red or hue color plane. This array can contain up to 256 elements. If you specify fewer than 256 elements, the method fills the remaining elements with grayscale values. Pass null or Nothing for this parameter if you do not want to replace pixel values in this plane.
            </param>
            <param name="plane2">The lookup table to apply to the green or saturation color plane. This array can contain up to 256 elements. If you specify fewer than 256 elements, the method fills the remaining elements with grayscale values. Pass null or Nothing for this parameter if you do not want to replace pixel values in this plane.
            </param>
            <param name="plane3">The lookup table to apply to the blue, luminance, value, or intensity color plane. This array can contain up to 256 elements. If you specify fewer than 256 elements, the method fills the remaining elements with grayscale values. Pass null or Nothing for this parameter  if you do not want to replace pixel values in this plane.
            </param>
            <param name="mask">
            The region in the image to use for the color user lookup. The method processes only those pixels in the image whose corresponding pixels in the mask are non-zero. Pass null or Nothing for this parameter if you want to transform the entire image.
            </param>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim i As New VisionImage
            Dim redPlaneLookupTable As New Collection(Of Int16)
            Dim greenPlaneLookupTable As New Collection(Of Int16)
            'Do something to populate redPlaneLookupTable and greenPlaneLookupTable
            'Perform the ColorUserLookup on the image in Viewer1 and
            'store the result in i
            i.Type = ImageType.Rgb32
            Algorithms.ColorUserLookup (imageViewer1.Image, i, ColorMode.Rgb, redPlaneLookupTable, greenPlaneLookupTable, Nothing)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage i = new VisionImage();
            Collection&lt;Int16&gt; redPlaneLookupTable = new Collection&lt;Int16&gt;();
            Collection&lt;Int16&gt; greenPlaneLookupTable = new Collection&lt;Int16&gt;();
            //Do something to populate redPlaneLookupTable and greenPlaneLookupTable
            //Perform the ColorUserLookup on the image in Viewer1 and
            //store the result in i
            i.Type = ImageType.Rgb32;
            Algorithms.ColorUserLookup(imageViewer1.Image, i, ColorMode.Rgb, redPlaneLookupTable, greenPlaneLookupTable, null);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ColorMode,System.Int32,NationalInstruments.Vision.Range)">
            <summary>
            Thresholds a color image. The method selects a pixel if all three color components fall within the specified range. The method replaces the value of selected pixels with the given replacement value and sets the value of unselected pixels to 0.
            </summary>
            <param name="source">The color image to threshold.
            </param>
            <param name="destination">The resulting image. This image must be a U8 image except when it is the same image passed to <format type="italics">source</format>. In the case where the same image is passed to <format type="italics">source</format> and <format type="italics">destination</format>, the image is converted to a U8 image and the result is stored in this image.
            </param>
            <param name="mode">The color space in which to perform the threshold operation.
            </param>
            <param name="replaceValue">The value to which the method sets selected pixels.
            The default is 1.</param>
            <param name="plane1Range">The range in the red or the hue plane. The range is from 0 to 255.
            </param>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ColorMode,System.Int32,NationalInstruments.Vision.Range,NationalInstruments.Vision.Range)">
            <summary>
            Thresholds a color image. The method selects a pixel if all three color components fall within the specified range. The method replaces the value of selected pixels with the given replacement value and sets the value of unselected pixels to 0.
            </summary>
            <param name="source">The color image to threshold.
            </param>
            <param name="destination">The resulting image. This image must be a U8 image except when it is the same image passed to <format type="italics">source</format>. In the case where the same image is passed to <format type="italics">source</format> and <format type="italics">destination</format>, the image is converted to a U8 image and the result is stored in this image.
            </param>
            <param name="mode">The color space in which to perform the threshold operation.
            </param>
            <param name="replaceValue">The value to which the method sets selected pixels.
            The default is 1.</param>
            <param name="plane1Range">The range in the red or the hue plane. The range is from 0 to 255.
            </param>
            <param name="plane2Range">The range in the green or the saturation plane. The range is from 0 to 255.
            </param>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ColorThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ColorMode,System.Int32,NationalInstruments.Vision.Range,NationalInstruments.Vision.Range,NationalInstruments.Vision.Range)">
            <summary>
            Thresholds a color image. The method selects a pixel if all three color components fall within the specified range. The method replaces the value of selected pixels with the given replacement value and sets the value of unselected pixels to 0.
            </summary>
            <param name="source">The color image to threshold.
            </param>
            <param name="destination">The resulting image. This image must be a U8 image except when it is the same image passed to <format type="italics">source</format>. In the case where the same image is passed to <format type="italics">source</format> and <format type="italics">destination</format>, the image is converted to a U8 image and the result is stored in this image.
            </param>
            <param name="mode">The color space in which to perform the threshold operation.
            </param>
            <param name="replaceValue">The value to which the method sets selected pixels.
            The default is 1.</param>
            <param name="plane1Range">The range in the red or the hue plane. The range is from 0 to 255.
            </param>
            <param name="plane2Range">The range in the green or the saturation plane. The range is from 0 to 255.
            </param>
            <param name="plane3Range">The range in the blue, the luminence, the value, or the intensity plane. The range is from 0 to 255.
            </param>
            <remarks>
            Use this method with image types Rgb32 and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            'Perform a color threshold on the image in Viewer1 and
            'store the results in i
            Algorithms.ColorThreshold (imageViewer1.Image, i, ColorMode.Hsl, 255, new Range(128, 255))
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            //Perform a color threshold on the image in Viewer1 and
            //store the results in i
            Algorithms.ColorThreshold(imageViewer1.Image, i, ColorMode.Hsl, 255, new Range(128, 255));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.BcgTransform(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BcgOptions)">
            <summary>
            Applies brightness, contrast, and gamma correction to an image by computing and applying a lookup table. The method computes the lookup table based on the brightness, contrast, and gamma values.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The result of performing the BcgTransform.
            </param>
            <param name="options">
            Specifies the options to use to perform the transform.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.BcgTransform(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BcgOptions,NationalInstruments.Vision.VisionImage)">
            <summary>
            Applies brightness, contrast, and gamma correction to an image by computing and applying a lookup table. The method computes the lookup table based on the brightness, contrast, and gamma values.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The result of performing the BcgTransform.
            </param>
            <param name="options">
            Specifies the options to use to perform the transform.
            </param>
            <param name="mask">
            The mask applied to the source image. <format type="italics">mask</format> specifies the region of the source image in which the method applies the brightness, contrast, and gamma correction. The method applies the correction to only those source pixels whose corresponding mask pixels are non-zero. Do not set this parameter if you want the method to correct the entire image.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim mask As New VisionImage 
            Dim options As New BcgOptions
             
            'Increase the brightness of the image in Viewer1 and
            'store the results in the image in Viewer2.
            BcgOptions.Brightness = 200
            Algortihms.BcgTransform (imageViewer1.Image, imageViewer2.Image, options)
             
            'Create a mask image from the regions on Viewer1
            Algorithms.Mask (mask, imageViewer1.Roi, imageViewer1.Image)
             
            'Perform a BCGTransform on a portion of Image using the mask
            'Do this operation inplace (store the results in the image in Viewer2)
            BcgOptions.Brightness = 200
            BcgOptions.Contrast = 20
            BcgOptions.Gamma = 0.7
            Algorithms.BCGTransform (imageViewer2.Image, imageViewer2.Image, options, mask) 
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage mask = new VisionImage();
            BcgOptions options = new BcgOptions();
             
            //Increase the brightness of the image in Viewer1 and
            //store the results in the image in Viewer2.
            BcgOptions.Brightness = 200;
            Algortihms.BcgTransform(imageViewer1.Image, imageViewer2.Image, options);
                    
            //Create a mask image from the regions on Viewer1
            Algorithms.Mask(mask, imageViewer1.Roi, imageViewer1.Image);
                    
            //Perform a BCGTransform on a portion of Image using the mask
            //Do this operation inplace (store the results in the image in Viewer2)
            BcgOptions.Brightness = 200;
            BcgOptions.Contrast = 20;
            BcgOptions.Gamma = 0.7;
            Algorithms.BCGTransform(imageViewer2.Image, imageViewer2.Image, options, mask);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Equalize(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the histogram of an image and redistributes pixel values across the appropriate range to maintain the 
            same pixel value distribution. Pixels whose values are the same before the redistribution also have common pixel 
            values after the redistribution.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Equalize(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.HistogramReport)">
            <summary>
            Calculates the histogram of an image and redistributes pixel values across the appropriate range to maintain the 
            same pixel value distribution. Pixels whose values are the same before the redistribution also have common pixel 
            values after the redistribution.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="histogramReport">
            The histogram of the source image that is supplied from the output of the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method. It is necessary to
            input the same image to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method
            and this method. If you pass null or Nothing for <format type="italics">histogramReport</format>, the method computes the histogram from the source image
            to equalize the image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Equalize(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.HistogramReport,NationalInstruments.Vision.Range)">
            <summary>
            Calculates the histogram of an image and redistributes pixel values across the appropriate range to maintain the 
            same pixel value distribution. Pixels whose values are the same before the redistribution also have common pixel 
            values after the redistribution.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="histogramReport">
            The histogram of the source image that is supplied from the output of the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method. It is necessary to
            input the same image to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method
            and this method. If you pass null or Nothing for <format type="italics">histogramReport</format>, the method computes the histogram from the source image
            to equalize the image.
            </param>
            <param name="pixelRange">
            The minimum and maximum values for the range of pixel values to equalize.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Equalize(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.HistogramReport,NationalInstruments.Vision.Range,NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the histogram of an image and redistributes pixel values across the appropriate range to maintain the 
            same pixel value distribution. Pixels whose values are the same before the redistribution also have common pixel 
            values after the redistribution.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="histogramReport">
            The histogram of the source image that is supplied from the output of the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method. It is necessary to
            input the same image to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method
            and this method. If you pass null or Nothing for <format type="italics">histogramReport</format>, the method computes the histogram from the source image
            to equalize the image.
            </param>
            <param name="pixelRange">
            The minimum and maximum values for the range of pixel values to equalize.
            </param>
            <param name="mask">
            The region in which the method performs the equalization. The method processes only those pixels in the image 
            whose corresponding pixels in the mask are non-zero. Pass null or Nothing for this parameter if you want to 
            calculate a histogram equalization on the entire image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim HistogramReport As New HistogramReport
            Dim MaskImage As New VisionImage
                
            'Equalize a portion of the image in Viewer1
            'defined by the regions on Viewer1 and store the result in i.
            Algorithms.RoiToMask (MaskImage, imageViewer1.Roi)
                
            Algorithms.Equalize (imageViewer1.Image, i, Nothing, New Range(0, 255), MaskImage)
                
            'Calculate the histogram of the image in Viewer1 and then use
            'this histogram to perform the equalization.
            'Do the equalization inplace. Store the results in the image in Viewer1.
            HistogramReport = Algorithms.Histogram (imageViewer1.Image, 128, New Range(0, 255), MaskImage)
             
            Algorithms.Equalize (imageViewer1.Image, imageViewer1.Image, HistogramReport)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            HistogramReport HistogramReport = new HistogramReport();
            VisionImage MaskImage = new VisionImage();
                
            // Equalize a portion of the image in Viewer1
            // defined by the regions on Viewer1 and store the result in i.
            Algorithms.RoiToMask(MaskImage, imageViewer1.Roi);
                
            Algorithms.Equalize(imageViewer1.Image, i, null, new Range(0, 255), MaskImage);
                
            // Calculate the histogram of the image in Viewer1 and then use
            // this histogram to perform the equalization.
            // Do the equalization inplace. Store the results in the image in Viewer1.
            HistogramReport = Algorithms.Histogram (imageViewer1.Image, 128, new Range(0, 255), MaskImage);
                
            Algorithms.Equalize (imageViewer1.Image, imageViewer1.Image, HistogramReport);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Inverse(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Inverts the pixel intensities of an image using the following equation:
            <para>
            f(p) = dynamicMax - p + dynamicMin
            </para>
            	<para>
            where
            </para>
            	<list type="bullet">
            		<item>
            			<description>
            p represents the value of a pixel.
            </description>
            		</item>
            		<item>
            			<description>
            dynamicMin represents 0 (8-bit images) or the smallest pixel value in the source image 
            (16-bit and floating point images).
            </description>
            		</item>
            		<item>
            			<description>
            dynamicMax represents 255 (8-bit images) or the largest pixel value in the source image 
            (16-bit and floating point images).
            </description>
            		</item>
            	</list>
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The results of the operation.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Inverse(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Inverts the pixel intensities of an image using the following equation:
            <para>
            f(p) = dynamicMax - p + dynamicMin
            </para>
            	<para>
            where
            </para>
            	<list type="bullet">
            		<item>
            			<description>
            p represents the value of a pixel.
            </description>
            		</item>
            		<item>
            			<description>
            dynamicMin represents 0 (8-bit images) or the smallest pixel value in the source image 
            (16-bit and floating point images).
            </description>
            		</item>
            		<item>
            			<description>
            dynamicMax represents 255 (8-bit images) or the largest pixel value in the source image 
            (16-bit and floating point images).
            </description>
            		</item>
            	</list>
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The results of the operation.
            </param>
            <param name="mask">
            The mask to apply to the source image. It indicates the region of the image where the method applies 
            the inverse. The method processes only those pixels in the image whose corresponding pixels in the 
            mask are non-zero. Pass null or Nothing for this parameter if you want to invert the pixel intensities 
            for the entire image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim maskImage As New VisionImage
             
            'Invert a portion of the image in Viewer1 defined by the ROI on
            'Viewer1 and store the result in i.
            Algorithms.RoiToMask (maskImage, imageViewer1.Roi)
            Algorithms.Inverse (imageViewer1.Image, i, maskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            VisionImage maskImage = new VisionImage();
                
            //Invert a portion of the image in Viewer1 defined by the ROI on
            //Viewer1 and store the result in i.
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            Algorithms.Inverse(imageViewer1.Image, i, maskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.UserLookup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{System.Int16})">
            <summary>
            Performs a user-defined lookup table transformation by remapping the pixel values in an image.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="table">
            The lookup table. For 8-bit images, the lookup table must contain 256 elements. The method replaces each pixel value 
            v with <format type="italics">table</format>(v). For 16-bit images, the lookup table must contain 65,536 elements. The method replaces each 
            non-negative pixel value v with <format type="italics">table</format>(v) and replaces each negative pixel value v 
            with <format type="italics">table</format>(65536+v).
            </param>
            <remarks>
            Use this method with U8 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.UserLookup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{System.Int16},NationalInstruments.Vision.VisionImage)">
            <summary>
            Performs a user-defined lookup table transformation by remapping the pixel values in an image.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="table">
            The lookup table. For 8-bit images, the lookup table must contain 256 elements. The method replaces each pixel value 
            v with <format type="italics">table</format>(v). For 16-bit images, the lookup table must contain 65,536 elements. The method replaces each 
            non-negative pixel value v with <format type="italics">table</format>(v) and replaces each negative pixel value v 
            with <format type="italics">table</format>(65536+v).
            </param>
            <param name="mask">
            The region in the image to use for the user lookup. The method processes only those pixels in the 
            image whose corresponding pixels in the mask are non-zero. Pass null of Nothing for this parameter 
            if you want to transform the entire image.
            </param>
            <remarks>
            Use this method with U8 and I16 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim LookupTable As New Collection(Of Short)
            Dim i As New VisionImage
            Dim maskImage As New VisionImage
             
            ' Create a lookup table
            For i1 As Integer = 0 To 255
                LookupTable.Add(Math.Abs(128 - i1))
            Next
             
            ' Perform a UserLookup on the entire image in Viewer1.
            ' Store the result in i.
            Algorithms.UserLookup (imageViewer1.Image, i, LookupTable)
             
            ' Perform a UserLookup on the portion of the image
            ' in Viewer1 based on the ROI selected on Viewer1.
            ' Do the operation inplace.
            Algorithms.RoiToMask (maskImage, imageViewer1.Roi)
            Algorithms.UserLookup (imageViewer1.Image, imageViewer1.Image, LookupTable, maskImage)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            Collection&lt;short&gt; lookupTable = new Collection&lt;short&gt;();
            VisionImage i = new VisionImage();
            VisionImage maskImage = new VisionImage();
             
            // Create a lookup table
            for (int i1 = 0; i &lt;= 255; ++i) {
                lookupTable.Add(Math.Abs(128-i1));
            }
             
            // Perform a UserLookup on the entire image in Viewer1.
            // Store the result in i.
            Algorithms.UserLookup(imageViewer1.Image, i, lookupTable);
             
            // Perform a UserLookup on the portion of the image
            // in Viewer1 based on the ROI selected on Viewer1.
            // Do the operation inplace.
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            Algorithms.UserLookup(imageViewer1.Image, imageViewer1.Image, lookupTable, maskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MathLookup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MathLookupOperator)">
            <summary>
            Converts the pixel values of an image by replacing them with values from a defined lookup table. 
            This method modifies the dynamic range of either part of an image or the complete image, depending 
            on the type of curve chosen.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="mathOperator">
            The transform function to use.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MathLookup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MathLookupOperator,System.Double)">
            <summary>
            Converts the pixel values of an image by replacing them with values from a defined lookup table. 
            This method modifies the dynamic range of either part of an image or the complete image, depending 
            on the type of curve chosen.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="mathOperator">
            The transform function to use.
            </param>
            <param name="x">
            Specifies the power to which the method raises the pixel value.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MathLookup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MathLookupOperator,System.Double,NationalInstruments.Vision.Range)">
            <summary>
            Converts the pixel values of an image by replacing them with values from a defined lookup table. 
            This method modifies the dynamic range of either part of an image or the complete image, depending 
            on the type of curve chosen.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="mathOperator">
            The transform function to use.
            </param>
            <param name="x">
            Specifies the power to which the method raises the pixel value.
            </param>
            <param name="pixelRange">
            The range of pixel values on which the method applies the transform. If this range is [0,0], the method will use the minimum and maximum for the image type.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MathLookup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MathLookupOperator,System.Double,NationalInstruments.Vision.Range,NationalInstruments.Vision.VisionImage)">
            <summary>
            Converts the pixel values of an image by replacing them with values from a defined lookup table. 
            This method modifies the dynamic range of either part of an image or the complete image, depending 
            on the type of curve chosen.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="mathOperator">
            The transform function to use.
            </param>
            <param name="x">
            Specifies the power to which the method raises the pixel value.
            </param>
            <param name="pixelRange">
            The range of pixel values on which the method applies the transform. If this range is [0,0], the method will use the minimum and maximum for the image type.
            </param>
            <param name="mask">
            Specifies the region in the image to use for the math lookup. The method processes only those pixels 
            in the image whose corresponding pixels in the mask are non-zero. Pass null or Nothing for this 
            parameter if you want to apply the transfer function to the entire image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim maskImage As New VisionImage
             
            'Apply a transformation function to a portion of the image in Viewer1
            'defined by regions selected on Viewer1.
            'Store the result in i.
            Algorithms.RoiToMask (maskImage, imageViewer1.Roi)
            Algorithms.MathLookup (imageViewer1.Image, i, MathLookupOperator.Pow1X, 5, New Range (), maskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            VisionImage maskImage = new VisionImage();
                
            //Apply a transformation function to a portion of the image in Viewer1
            //defined by regions selected on Viewer1.
            //Store the result in i.
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            Algorithms.MathLookup (imageViewer1.Image, i, MathLookupOperator.Pow1X, 5, new Range(), maskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.WatershedTransform(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the watershed transform of an image. The watershed transfrom outputs an image in which the same number 
            (label) is assigned to all the pixels that belong to the same catchment basin of the topographic surface of the 
            input image, and 0 is assigned to all the pixels in the watershed line.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <returns>
            The number of zones detected in the image. A zone is a region of the image in which all pixels belong to the same 
            catchment basin. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8 and I16 images. <format type="italics">destination</format> must be a U8 or I16 image. 
            If you use a U8 <format type="italics">destination</format> image, the method can store up to 255 unique labels 
            not including the watershed line value of 0. If you use a I16 <format type="italics">destination</format> image, 
            the method can store up to 32,767 unique labels not including the watershed line value of 0.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.WatershedTransform(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Computes the watershed transform of an image. The watershed transfrom outputs an image in which the same number 
            (label) is assigned to all the pixels that belong to the same catchment basin of the topographic surface of the 
            input image, and 0 is assigned to all the pixels in the watershed line.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether adjacent pixels belong to the same 
            catchment basin or watershed line. Set this parameter to Connectivity4 to use connectivity-4 to determine whether 
            adjacent pixels belong to the same catchment basin or watershed line. The default is Connectivity8. 
            For more information about connectivity, refer to the <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <returns>
            The number of zones detected in the image. A zone is a region of the image in which all pixels belong to the same 
            catchment basin. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8 and I16 images. <format type="italics">destination</format> must be a U8 or I16 image. 
            If you use a U8 <format type="italics">destination</format> image, the method can store up to 255 unique labels 
            not including the watershed line value of 0. If you use a I16 <format type="italics">destination</format> image, 
            the method can store up to 32,767 unique labels not including the watershed line value of 0.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Perform a watershed transformation on the image in viewer1 to i.
            ' Use connectivity-4
            Algorithms.WatershedTransform (imageViewer1.Image, i, connectivity.Connectivity4)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // Perform a watershed transformation on the image in viewer1 to i.
            // Use connectivity-4
            Algorithms.WatershedTransform(imageViewer1.Image, i, connectivity.Connectivity4);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Cast(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ImageType)">
            <summary>
            Changes the type of an image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="type">
            The new type for the image.
            </param>
            <remarks>
            	<para>
            This method operates with all image types.
            </para>
            	<para>
            This method can perform the change directly on the source image, or it can leave the source image unchanged and instead copy the source image to a destination image and then convert the destination image. If the destination image is the same as the source image, the method changes the type of the source image. Otherwise, the method resizes the destination image to the size of source image and then copies the pixels.
            </para>
            	<para>
            To change the type of an image in-place you can set its <see cref="P:NationalInstruments.Vision.VisionImage.Type" crefType="Unqualified"/> to the required type. If the source image type and the type parameter are the same, the method copies pixels unmodified. You can also use the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method to copy pixels without modifying them. 
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Cast(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ImageType,System.Collections.ObjectModel.Collection{System.Single})">
            <summary>
            Changes the type of an image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="type">
            The new type for the image.
            </param>
            <param name="lookupTable">A lookup table. Refer to the Remarks section for a description of how the method uses the lookup table.
            </param>
            <remarks>
            	<para>
            This method operates with all image types.
            </para>
            	<para>
            This method can perform the change directly on the source image, or it can leave the source image unchanged and instead copy the source image to a destination image and then convert the destination image. If the destination image is the same as the source image, the method changes the type of the source image. Otherwise, the method resizes the destination image to the size of source image and then copies the pixels.
            </para>
            	<para>
            To change the type of an image in-place without supplying a shift value or a lookup table, you can set the <see cref="P:NationalInstruments.Vision.VisionImage.Type" crefType="Unqualified"/> property to the required type. If the source image type and the <format type="bold">Type</format> crefType="Unqualified" /&gt; property are the same, the method copies pixels unmodified. You can also use the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method to copy pixels without modifying them.  If the source image type and the <format type="bold">Type</format> property are not the same, the method casts the pixel values to the new type as follows:
            </para>
            	<list type="table">
            		<listheader>
            			<term>source Type</term>
            			<description>type Parameter</description>
            		</listheader>
            		<item>
            			<term><list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            				</list></term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            If you provide a lookup table, the destination pixel will have the lookup value of the source pixel. If you do not provide a lookup table, the method copies the source value to the destination unmodified.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Rgb32
            </description>
            					</item>
            				</list>
            Each color component of the destination is set to the source value. If the source value is greater than 255, the method sets each color component to 255. If the source value is less than 0, the method sets each color component to 0.
            </description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Hsl32
            </description>
            					</item>
            				</list>
            The method sets the luminance component of the destination to the source value. If the source value is greater than 255, the method sets the luminance to 255. If the source value is less than 0, the method sets the luminance to 0. The method sets hue and saturation component of the destination to 0. If the source image has a specified bit depth, the method uses the bit depth when performing this conversion.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Complex
            </description>
            					</item>
            				</list>
            The method sets the real component of the destination to the source value. The method sets the imaginary component of the destination to 0.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            				</list>
            The method right-shifts the source value by the given shift value (divides each source pixel value by 2 shifts) and stores the value in the destination. If the shifted value is greater than 255, the method sets the destination value to 255. If the shift value is zero, the method uses the specified bit depth of the source image.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.RgbU64
            </description>
            					</item>
            				</list>
            Each color component of the destination is set to the source value. If the source value is greater than 65535, the method sets each color component to 65535. If the source value is less than 0, the method sets each color component to 0.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.RgbU64
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            				</list>
            The method shifts the source value to the 8-bit range using the specified bit depth of the source image. Then the method sets the destination value to the average of the three color components of the source.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.RgbU64
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            The method sets the destination value to the average of the three color components of the source. If the average of the source color components is out of the range of the destination, the method coerces the average to the range.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.RgbU64
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Rgb32
            </description>
            					</item>
            				</list>
            The method shifts the source value to the 8-bit range using the specified bit depth of the source image. Then the method sets each color component in the destination value to the corresponding component in the source value.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.RgbU64
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Hsl32
            </description>
            					</item>
            				</list>
            The method shifts the source value to the 8-bit range using the specified bit depth of the source image. Then the method converts each pixel from the RGB color space to the HSL color space.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            If you provide a lookup table, the destination pixel will have the lookup value of the source pixel. If you do not provide a lookup table, the method copies the source value to the destination unmodified.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            				</list>
            The method sets the destination value to the source value. If the source value is out of the range of the destination, the method coerces the source to the range.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Rgb32
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            The method sets the destination value to the average of the three color components of the source.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Rgb32
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Hsl32
            </description>
            					</item>
            				</list>
            The method converts each pixel from the RGB color space to the HSL color space.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Rgb32
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.RgbU64
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Complex
            </description>
            					</item>
            				</list>
            The method sets the real portion of the destination value to the average of the three color components of the source, and it sets the imaginary portion of the destination to 0.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Hsl32
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            The method sets the destination value to the luminance component of the source value.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Hsl32
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Rgb32
            </description>
            					</item>
            				</list>
            The method converts each pixel from the HSL color space to the RGB color space.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Hsl32
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Complex
            </description>
            					</item>
            				</list>
            The method sets the real portion of the destination value to the value of the luminance component of the source, and it sets the imaginary portion of the destination to 0. If the source value is out of the range of the destination, the method coerces the source to the range.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Complex
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U8
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.Single
            </description>
            					</item>
            				</list>
            The method sets the destination value to the magnitude of the source value. If the source value is out of the range of the destination, the method coerces the source to the range.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Complex
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Rgb32
            </description>
            					</item>
            					<item>
            						<description>
            ImageType.RgbU64
            </description>
            					</item>
            				</list>
            The method sets each color component of the destination value to the magnitude of the source value. If the source value is out of the range of the destination, the method coerces the source to the range.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Complex
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.Hsl32
            </description>
            					</item>
            				</list>
            The method sets the luminance component of the destination value to the magnitude of the source value, and it sets the hue and saturation components to 0. If the source value is out of the range of the destination, the method coerces the source to the range.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            				</list>
            The method sets the destination value to the source value. If the source value is out of the range of the destination, the method coerces the source to the range.</description>
            		</item>
            		<item>
            			<term>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.I16
            </description>
            					</item>
            				</list>
            			</term>
            			<description>
            				<list type="bullet">
            					<item>
            						<description>
            ImageType.U16
            </description>
            					</item>
            				</list>
            The method sets the destination value to the source value. If the source value is out of the range of the destination, the method coerces the source to the range.</description>
            		</item>
            	</list>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim i As New VisionImage
            Dim lookupTable As New Collection(Of Single)
            Dim index As Integer
             
            ' Change the image in Viewer1 to an Rgb32 image and 
            ' store the results in i
            Algorithms.Cast (imageViewer1.Image, i, ImageType.Rgb32)
             
            ' Populate the lookupTable with a form of inverse transformation
            For index = 0 to 255
                lookupTable.Add(32767 - (index * 16))
            Next
             
            ' Change the image in Viewer1 to a 16-bit image using the lookup table
            Algorithms.Cast (imageViewer1.Image, imageViewer1.Image, ImageType.I16, lookupTable)
             
            ' Change the image in Viewer1 to an Single image
            ' You can use the Type property on the image since there is no need
            ' for a lookup table or shift value.
            imageViewer1.Image.Type = ImageType.Single
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage i = new VisionImage();
            Collection&lt;float&gt; lookupTable = new Collection&lt;float&gt;();
             
            // Change the image in imageViewer1 to an Rgb32 image and
            // store the results in i
            Algorithms.Cast (imageViewer1.Image, i, ImageType.Rgb32);
             
            // Populate the lookupTable with a form of inverse transformation
            for (int index = 0; index &lt;= 255; ++index) {
                lookupTable.Add(32767 - (index * 16));
            }
             
            // Change the image in imageViewer1 to a 16-bit image using the lookup table
            Algorithms.Cast (imageViewer1.Image, imageViewer1.Image, ImageType.I16, lookupTable);
             
            // Change the image in imageViewer1 to a Single image
            // You can use the Type property on the image since there is no need
            // for a lookup table or shift value.
            imageViewer1.Image.Type = ImageType.Single;
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Cast(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ImageType,System.Int32)">
            <summary>
            Changes the type of an image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="type">
            The new type for the image.
            </param>
            <param name="numberOfShifts">
            The shift value for converting 16-bit images to 8-bit images. The method ignores this value for all other conversions. The method executes this conversion by shifting the 16-bit pixel values to the right by the specified number of shift operations, up to a maximum of 8 shift operations, and then truncating to get an 8-bit value. Enter a value of –1 to ignore the bit depth and shift 0. Enter a value of 0 to use the bit depth to cast the image. Refer to the Remarks section for a description of how the function employs the shift value.
            This parameter has a default value of 0.
            </param>
            <remarks>
            	<para>
            This method operates with all image types.
            </para>
            	<para>
            This method can perform the change directly on the source image, or it can leave the source image unchanged and instead copy the source image to a destination image and then convert the destination image. If the destination image is the same as the source image, the method changes the type of the source image. Otherwise, the method resizes the destination image to the size of source image and then copies the pixels.
            </para>
            	<para>
            To change the type of an image in-place without supplying a shift value or a lookup table, you can set the <format type="italics">type</format> to the required type. If the source image type and the <format type="italics">type</format> parameter are the same, the method copies pixels unmodified. You can also use the Copy method to copy pixels without modifying them. 
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Copies the source image to the destination image, including the border size and calibration information. To copy an area of one image to an area of another image, use the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Extract(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour)" crefType="Unqualified"/> method.
            </summary>
            <param name="source">
            The source image to copy.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with all image types. The method copies the complete definition of the source image and its pixel data to the destination image. The method also modifies the border of the destination image so that it becomes the same size as the border of the source image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            ' Copy the image in ImageViewer1 into i
            Algorithms.Copy (ImageViewer1.Image, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            // Copy the image in imageViewer1 into i
            Algorithms.Copy(imageViewer1.Image, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Extract(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour)">
            <summary>
            Extracts (reduces) an image or part of an image with adjustment of the horizontal and vertical resolution.
            </summary>
            <param name="source">
            The image to extract.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="rectangle">
            The portion of the image that the method extracts. Pass RectanlgeContour.None to operate on the entire image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Extract(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Extracts (reduces) an image or part of an image with adjustment of the horizontal and vertical resolution.
            </summary>
            <param name="source">
            The image to extract.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="rectangle">
            The portion of the image that the method extracts. This parameter must contain 0 or 1 contours. 
            If it contains 1 contour, it must be a RectangleContour. Pass RectanlgeContour.None to operate on the entire image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Extract(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour,System.Int32,System.Int32)">
            <summary>
            Extracts (reduces) an image or part of an image with adjustment of the horizontal and vertical resolution.
            </summary>
            <param name="source">
            The image to extract.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="rectangle">
            The portion of the image that the method extracts. Pass RectanlgeContour.None to operate on the entire image.
            </param>
            <param name="xSubsample">
            The horizontal sampling step. This parameter defines the columns to extract (the horizontal reduction ratio). 
            For example, set this parameter to 3 to extract one out of every three columns from the 
            <format type="italics">source</format> image into the <format type="italics">destination</format> image. 
            The method copies the pixel columns to the <format type="italics">destination</format> image without subsampling if you use the default value.
            This parameter has a default value of 1.
            </param>
            <param name="ySubsample">
            The vertical sampling step. This parameter defines the rows to extract (the vertical reduction ratio). 
            For example, set this parameter to 3 to extract one out of every three rows from the 
            <format type="italics">source</format> image into the <format type="italics">destination</format> image. 
            The method copies the pixel rows to the <format type="italics">destination</format> image without subsampling if you use the default value. This 
            parameter has a default value of 1.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim r As New RectangleContour
             
            ' Reduce a 50 x 50 rectangular portion of the image in Viewer1
            ' starting at (20,30) by a factor of 2.
            ' Store the result in i.
            r.Initialize (20, 30, 50, 50)
            Algorithms.Extract (imageViewer1.Image, i, r, 2, 2)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            RectangleContour r = new RectangleContour();
                
            // Reduce a 50 x 50 rectangular portion of the image in Viewer1
            // starting at (20,30) by a factor of 2.
            // Store the result in i.
            r.Initialize(20, 30, 50, 50);
            Algorithms.Extract(imageViewer1.Image, i, r, 2, 2);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Extract(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,System.Int32,System.Int32)">
            <summary>
            Extracts (reduces) an image or part of an image with adjustment of the horizontal and vertical resolution.
            </summary>
            <param name="source">
            The image to extract.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="rectangle">
            The portion of the image that the method extracts. This parameter must contain 0 or 1 contours. 
            If it contains 1 contour, it must be a RectangleContour. Pass RectanlgeContour.None to operate on the entire image.
            </param>
            <param name="xSubsample">
            The horizontal sampling step. This parameter defines the columns to extract (the horizontal reduction ratio). 
            For example, set this parameter to 3 to extract one out of every three columns from the 
            <format type="italics">source</format> image into the <format type="italics">destination</format> image. 
            The method copies the pixel columns to the <format type="italics">destination</format> image without subsampling if you use the default value.
            This parameter has a default value of 1.
            </param>
            <param name="ySubsample">
            The vertical sampling step. This parameter defines the rows to extract (the vertical reduction ratio). 
            For example, set this parameter to 3 to extract one out of every three rows from the 
            <format type="italics">source</format> image into the <format type="italics">destination</format> image. 
            The method copies the pixel rows to the <format type="italics">destination</format> image without subsampling if you use the default value. This 
            parameter has a default value of 1.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ImageToImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Copies a small image into a larger image, which is useful for making thumbnail sketches from multiple miniature 
            images.
            </summary>
            <param name="source">
            The source image to copy.
            </param>
            <param name="destination">
            The destination image into which the method copies the source image.
            </param>
            <remarks>
            This function operates on all image types. <format type="italics">source</format> and 
            <format type="italics">destination</format> images must be of the same type.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ImageToImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour)">
            <summary>
            Copies a small image into a larger image, which is useful for making thumbnail sketches from multiple miniature 
            images.
            </summary>
            <param name="source">
            The source image to copy.
            </param>
            <param name="destination">
            The destination image into which the method copies the source image.
            </param>
            <param name="destinationPoint">
            The coordinates in the <format type="italics">destination</format> image where the method copies the 
            <format type="italics">source</format> image.
            </param>
            <remarks>
            This function operates on all image types. <format type="italics">source</format> and 
            <format type="italics">destination</format> images must be of the same type.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ImageToImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.RectangleContour)">
            <summary>
            Copies a small image into a larger image, which is useful for making thumbnail sketches from multiple miniature 
            images.
            </summary>
            <param name="source">
            The source image to copy.
            </param>
            <param name="destination">
            The destination image into which the method copies the source image.
            </param>
            <param name="destinationPoint">
            The coordinates in the <format type="italics">destination</format> image where the method copies the 
            <format type="italics">source</format> image.
            </param>
            <param name="sourceRect">
            Specifies the region of the small image that will be copied.
            </param>
            <remarks>
            This function operates on all image types. <format type="italics">source</format> and 
            <format type="italics">destination</format> images must be of the same type.
            </remarks>
            <example>
            	<code lang="VB.NET">
            'This example copies a 50 x 100 square with pixel value 255
            'into the image in Viewer1.
             
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Populate i
            i.SetSize (50, 100)
             
            'Copy i into the image in Viewer1
            i.FillImage (New PixelValue (255))
            Algorithms.ImageToImage (i, imageViewer1.Image, New PointContour(20, 40))
            </code>
            	<code lang="C#">
            //This example copies a 50 x 100 square with pixel value 255
            //into the image in Viewer1.
             
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Populate i
            i.SetSize(50, 100);
                
            //Copy i into the image in Viewer1
            i.FillImage(new PixelValue(255));
            Algorithms.ImageToImage(i, imageViewer1.Image, new PointContour(20, 40));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Resample(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32)">
            <summary>
            Resamples an image to a user-defined size. You can use this method to display a reduced or enlarged image.
            </summary>
            <param name="source">
            The image to resample.
            </param>
            <param name="destination">
            The image into which the method places the resampled data. This image may be the same as 
            <format type="italics">source</format>.
            </param>
            <param name="newWidth">
            The width of the resampled area. 
            </param>
            <param name="newHeight">
            The height of the resampled area. 
            </param>
            <remarks>
            Use this method with U8, I16, Single, Hsl, and Rgb32 images. <format type="italics">source</format> 
            and <format type="italics">destination</format> must be the same type of image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Resample(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,NationalInstruments.Vision.Analysis.InterpolationMethod)">
            <summary>
            Resamples an image to a user-defined size. You can use this method to display a reduced or enlarged image.
            </summary>
            <param name="source">
            The image to resample.
            </param>
            <param name="destination">
            The image into which the method places the resampled data. This image may be the same as 
            <format type="italics">source</format>.
            </param>
            <param name="newWidth">
            The width of the resampled area. 
            </param>
            <param name="newHeight">
            The height of the resampled area. 
            </param>
            <param name="method">
            Specifies the type of interpolation used to resample the image. The default is ZeroOrder.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Hsl, and Rgb32 images. <format type="italics">source</format> 
            and <format type="italics">destination</format> must be the same type of image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Resample(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,NationalInstruments.Vision.Analysis.InterpolationMethod,NationalInstruments.Vision.Roi)">
            <summary>
            Resamples an image to a user-defined size. You can use this method to display a reduced or enlarged image.
            </summary>
            <param name="source">
            The image to resample.
            </param>
            <param name="destination">
            The image into which the method places the resampled data. This image may be the same as 
            <format type="italics">source</format>.
            </param>
            <param name="newWidth">
            The width of the resampled area. 
            </param>
            <param name="newHeight">
            The height of the resampled area. 
            </param>
            <param name="method">
            Specifies the type of interpolation used to resample the image. The default is ZeroOrder.
            </param>
            <param name="rectangle">
            Specifies the region of interest to resample. Pass null or Nothing for this parameter to resample the 
            entire image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Hsl, and Rgb32 images. <format type="italics">source</format> 
            and <format type="italics">destination</format> must be the same type of image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Resample(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,System.Int32,NationalInstruments.Vision.Analysis.InterpolationMethod,NationalInstruments.Vision.RectangleContour)">
            <summary>
            Resamples an image to a user-defined size. You can use this method to display a reduced or enlarged image.
            </summary>
            <param name="source">
            The image to resample.
            </param>
            <param name="destination">
            The image into which the method places the resampled data. This image may be the same as 
            <format type="italics">source</format>.
            </param>
            <param name="newWidth">
            The width of the resampled area. 
            </param>
            <param name="newHeight">
            The height of the resampled area. 
            </param>
            <param name="method">
            Specifies the type of interpolation used to resample the image. The default is ZeroOrder.
            </param>
            <param name="rectangle">
            Specifies the rectangular area to resample. Pass null or Nothing for this parameter to resample the 
            entire image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Hsl, and Rgb32 images. <format type="italics">source</format> 
            and <format type="italics">destination</format> must be the same type of image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            'Enlarge the image in Viewer1 to twice its original size.
            'Store the result in i.
            Algorithms.Resample (imageViewer1.Image, i, imageViewer1.Image.Width * 2, imageViewer1.Image.Height * 2, InterpolationMethod.BiLinear)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            //Enlarge the image in Viewer1 to twice its original size.
            //Store the result in i.
            Algorithms.Resample(imageViewer1.Image, i, imageViewer1.Image.Width * 2, imageViewer1.Image.Height * 2, InterpolationMethod.BiLinear);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Symmetry(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Transforms an image through its symmetry.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Symmetry(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.SymmetryOperation)">
            <summary>
            Transforms an image through its symmetry.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="operation">
            Specifies the type of symmetry to use. The default is Horizontal.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
                
            'Transform the image in Viewer1 about its center and
            'store the result in i.
            Algorithms.Symmetry (imageViewer1.Image, i, SymmetryOperation.Central)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Transform the image in Viewer1 about its center and
            //store the result in i.
            Algorithms.Symmetry(imageViewer1.Image, i, SymmetryOperation.Central);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Mask(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Copies the source image to the destination image in the following manner: If a pixel in the mask has a 
            value of 0, the function sets the corresponding source pixel to 0. Otherwise, the function copies the 
            corresponding source pixel to the destination image. 
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="mask">
            The binary image that contains the mask applied to the source image. All non-zero pixel values are on, 
            and all pixel values of 0 are off.
            </param>
            <remarks>
            Use this method with all image types. <format type="italics">source</format> and 
            <format type="italics">source</format> must be the same type. <format type="italics">mask</format> 
            must be a U8 image. This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim maskImage As New VisionImage
             
            'Mask the image in Viewer1 and store the result in i
            Algorithms.RoiToMask (maskImage, imageViewer1.Roi)
            Algorithms.Mask (imageViewer1.Image, i, maskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            VisionImage maskImage = new VisionImage();
               
            //Mask the image in Viewer1 and store the result in i
            Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
            Algorithms.Mask(imageViewer1.Image, i, maskImage);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rotate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Double)">
            <summary>
            Rotates an image counterclockwise.
            </summary>
            <param name="source">
            The image to rotate.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="angle">
            The angle, in degrees, to rotate the image.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rotate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Double,NationalInstruments.Vision.PixelValue)">
            <summary>
            Rotates an image counterclockwise.
            </summary>
            <param name="source">
            The image to rotate.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="angle">
            The angle, in degrees, to rotate the image.
            </param>
            <param name="fill">
            The value with which the method fills the image pixels not covered by the rotated image.
            This parameter has a default value of 0.0.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rotate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Double,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.Analysis.InterpolationMethod)">
            <summary>
            Rotates an image counterclockwise.
            </summary>
            <param name="source">
            The image to rotate.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="angle">
            The angle, in degrees, to rotate the image.
            </param>
            <param name="fill">
            The value with which the method fills the image pixels not covered by the rotated image.
            This parameter has a default value of 0.0.
            </param>
            <param name="method">
            The method of interpolation. Valid interpolation methods for rotation are InterpolationMethod.ZeroOrder 
            and InterpolationMethod.Bilinear. The default is InterpolationMethod.Bilinear.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Rotate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Double,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.Analysis.InterpolationMethod,System.Boolean)">
            <summary>
            Rotates an image counterclockwise.
            </summary>
            <param name="source">
            The image to rotate.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="angle">
            The angle, in degrees, to rotate the image.
            </param>
            <param name="fill">
            The value with which the method fills the image pixels not covered by the rotated image.
            This parameter has a default value of 0.0.
            </param>
            <param name="method">
            The method of interpolation. Valid interpolation methods for rotation are InterpolationMethod.ZeroOrder 
            and InterpolationMethod.Bilinear. The default is InterpolationMethod.Bilinear.
            </param>
            <param name="maintainSize">
            Specifies whether the rotated image should have the same size as the source image.
            The default is true.
            </param>
            <remarks>
            Use this method with U8, I16, Single, and Rgb32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
                
            'Rotate the image in Viewer1 by 45 degrees.
            'Store the result in i.
            Algorithms.Rotate (imageViewer1.Image, i, 45, 128, InterpolationMethod.Bilinear, true)    
            imageViewer2.Attach (i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Rotate the image in Viewer1 by 45 degrees.
            //Store the result in i.
            Algorithms.Rotate(imageViewer1.Image, i, 45, 128, InterpolationMethod.Bilinear, true);
            imageViewer2.Attach(i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Shift(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour)">
            <summary>
            Shifts an image based on a horizontal and vertical offset.
            </summary>
            <param name="source">
            The image to shift.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="offset">
            Specifies how many pixels to shift the image horizontally and vertically.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Shift(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Shifts an image based on a horizontal and vertical offset.
            </summary>
            <param name="source">
            The image to shift.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="offset">
            Specifies the ROI containing the pixels to shift horizontally and vertically. This parameter must contain exactly one contour, and it must be a PointContour.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Shift(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.PixelValue)">
            <summary>
            Shifts an image based on a horizontal and vertical offset.
            </summary>
            <param name="source">
            The image to shift.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="offset">
            Specifies the ROI containing the pixels to shift horizontally and vertically. This parameter must contain exactly one contour, and it must be a PointContour.
            </param>
            <param name="fill">
            The value with which to fill the uncovered image pixels. The default is 0.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Shift(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.PixelValue)">
            <summary>
            Shifts an image based on a horizontal and vertical offset.
            </summary>
            <param name="source">
            The image to shift.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="offset">
            Specifies how many pixels to shift the image horizontally and vertically.
            </param>
            <param name="fill">
            The value with which to fill the uncovered image pixels. The default is 0.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Shift the image in Viewer1 10 pixels to the right and 20 pixels down.
            'Store the results in i.
            Algorithms.Shift (imageViewer1.Image, i, New PointContour(10, 20), New PixelValue(128))
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            //Shift the image in Viewer1 10 pixels to the right and 20 pixels down.
            //Store the results in i.
            Algorithms.Shift(imageViewer1.Image, i, new PointContour(10, 20), new PixelValue(128));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Transpose(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Transposes an image.
            </summary>
            <param name="source">
            The image to transpose.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            Use this method with all image types.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Transpose the image in Viewer1 and
            ' store the result in i.
            Algorithms.Transpose (imageViewer1.Image, i)
             
            ' Transpose the image in Viewer1.
            ' Do the operation in-place.
            Algorithms.Transpose (imageViewer1.Image, imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // Transpose the image in Viewer1 and
            // store the result in i.
            Algorithms.Transpose(imageViewer1.Image, i);
             
            // Transpose the image in Viewer1.
            // Do the operation in-place.
            Algorithms.Transpose(imageViewer1.Image, imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Unwrap(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Unwraps an annulus from an image into a rectangular strip.
            </summary>
            <param name="source">
            The image containing the annulus of pixels to be unwrapped.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="annulus">
            The coordinate location of the annulus the method unwraps.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Unwrap(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.AnnulusContour)">
            <summary>
            Unwraps an annulus from an image into a rectangular strip.
            </summary>
            <param name="source">
            The image containing the annulus of pixels to be unwrapped.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="annulus">
            The coordinate location of the annulus the method unwraps.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Unwrap(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.RectangleOrientation)">
            <summary>
            Unwraps an annulus from an image into a rectangular strip.
            </summary>
            <param name="source">
            The image containing the annulus of pixels to be unwrapped.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="annulus">
            The coordinate location of the annulus the method unwraps.
            </param>
            <param name="orientation">
            Specifies the orientation of the resulting rectangular image relative to the annulus. The default 
            is <see cref="F:NationalInstruments.Vision.Analysis.RectangleOrientation.BaseInside" crefType="Unqualified"/>.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Unwrap(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.AnnulusContour,NationalInstruments.Vision.Analysis.RectangleOrientation)">
            <summary>
            Unwraps an annulus from an image into a rectangular strip.
            </summary>
            <param name="source">
            The image containing the annulus of pixels to be unwrapped.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="annulus">
            The coordinate location of the annulus the method unwraps.
            </param>
            <param name="orientation">
            Specifies the orientation of the resulting rectangular image relative to the annulus. The default 
            is <see cref="F:NationalInstruments.Vision.Analysis.RectangleOrientation.BaseInside" crefType="Unqualified"/>.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Unwrap(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.RectangleOrientation,NationalInstruments.Vision.Analysis.InterpolationMethod)">
            <summary>
            Unwraps an annulus from an image into a rectangular strip.
            </summary>
            <param name="source">
            The image containing the annulus of pixels to be unwrapped.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="annulus">
            The coordinate location of the annulus the method unwraps.
            </param>
            <param name="orientation">
            Specifies the orientation of the resulting rectangular image relative to the annulus. The default 
            is <see cref="F:NationalInstruments.Vision.Analysis.RectangleOrientation.BaseInside" crefType="Unqualified"/>.
            </param>
            <param name="method">
            Specifies the interpolation algorithm used in the unwrapping process. The default is ZeroOrder.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            'Unwrap the image in viewer1.
            'This requires that an annulus be selected on the viewer.
            Algorithms.Unwrap (imageViewer1.Image, i, imageViewer1.Roi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // Unwrap the image in viewer1.
            // This requires that an annulus be selected on the viewer.
            Algorithms.Unwrap(imageViewer1.Image, i, imageViewer1.Roi);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Unwrap(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.AnnulusContour,NationalInstruments.Vision.Analysis.RectangleOrientation,NationalInstruments.Vision.Analysis.InterpolationMethod)">
            <summary>
            Unwraps an annulus from an image into a rectangular strip.
            </summary>
            <param name="source">
            The image containing the annulus of pixels to be unwrapped.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="annulus">
            The coordinate location of the annulus the method unwraps.
            </param>
            <param name="orientation">
            Specifies the orientation of the resulting rectangular image relative to the annulus. The default 
            is <see cref="F:NationalInstruments.Vision.Analysis.RectangleOrientation.BaseInside" crefType="Unqualified"/>.
            </param>
            <param name="method">
            Specifies the interpolation algorithm used in the unwrapping process. The default is ZeroOrder.
            </param>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.View3D(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Displays an image using an isometric view. Each pixel from the image source appears as a column of pixels in the 
            3D view. The pixel value corresponds to the altitude.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8 and Complex images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.View3D(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.View3DOptions)">
            <summary>
            Displays an image using an isometric view. Each pixel from the image source appears as a column of pixels in the 
            3D view. The pixel value corresponds to the altitude.
            </summary>
            <param name="source">
            The input image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="options">
            Specifies how to convert the image to a three-dimensional representation.
            </param>
            <remarks>
            This method modifies the source image. If you need the original source image, create a copy of the image using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Copy(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method before using this method.
            Use this method with U8 and Complex images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Convert the image in viewer1 to a three-dimensional representation in i.
            Algorithms.View3D (imageViewer1.Image, i)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // Convert the image in viewer1 to a three-dimensional representation in i.
            Algorithms.View3D(imageViewer1.Image, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the template image for which you are going to look when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method. 
            This description data is appended to the input template image. During the matching step, the template 
            descriptor is extracted from the template image and used to search for the template in the match image.
            </summary>
            <param name="template">
            The image about which the function learns pattern matching information.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LearnPatternOptions)">
            <summary>
            Creates a description of the template image for which you are going to look when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method. 
            This description data is appended to the input template image. During the matching step, the template 
            descriptor is extracted from the template image and used to search for the template in the match image.
            </summary>
            <param name="template">
            The image about which the function learns pattern matching information.
            </param>
            <param name="options">
            Specifies the parameters the method uses for learning.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LearnPatternOptions,NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the template image for which you are going to look when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method. 
            This description data is appended to the input template image. During the matching step, the template 
            descriptor is extracted from the template image and used to search for the template in the match image.
            </summary>
            <param name="template">
            The image about which the function learns pattern matching information.
            </param>
            <param name="options">
            Specifies the parameters the method uses for learning.
            </param>
            <param name="mask">
            An 8-bit image that specifies what regions and edges to ignore in the 
            template. The method learns only those pixels in the source image whose corresponding pixels in the 
            mask are non-zero. Pass null or Nothing for this parameter to learn the whole image. 
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Learn the template in viewer1.
            Algorithms.LearnPattern (imageViewer1.Image)
            'Match the template in viewer1.
            'Look for 2 matches that could be rotated.
            Dim Options As New MatchPatternOptions (MatchMode.RotationInvariant, 2)
            Dim Matches As Collection (Of PatternMatch)
            Matches = Algorithms.MatchPattern (imageViewer2.Image, imageViewer1.Image, Options)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Learn the template in viewer1.
            Algorithms.LearnPattern(imageViewer1.Image);
            // Match the template in viewer1.
            // Look for 2 matches that could be rotated.
            MatchPatternOptions options = new MatchPatternOptions(MatchMode.RotationInvariant, 2);
            Collection&lt;PatternMatch&gt; matches;
            matches = Algorithms.MatchPattern(imageViewer2.Image, imageViewer1.Image, options);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Searches for areas in an image that match a given template image. Use the the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior to
            using this method to ensure that the template image has been configured for the pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The image to be located during the pattern matching process. The template image is the image supplied 
            to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MatchPatternOptions)">
            <summary>
            Searches for areas in an image that match a given template image. Use the the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior to
            using this method to ensure that the template image has been configured for the pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The image to be located during the pattern matching process. The template image is the image supplied 
            to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <param name="options">
            Describes how to search for the template image. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MatchPatternOptions,NationalInstruments.Vision.RectangleContour)">
            <summary>
            Searches for areas in an image that match a given template image. Use the the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior to
            using this method to ensure that the template image has been configured for the pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The image to be located during the pattern matching process. The template image is the image supplied 
            to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <param name="options">
            Describes how to search for the template image. 
            </param>
            <param name="searchArea">
            Specifies the rectangular region within an image in which to search for the template pattern. 
            Pass RectangleContour.None for this parameter if you want to search the entire image for the template image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MatchPatternOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Searches for areas in an image that match a given template image. Use the the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior to
            using this method to ensure that the template image has been configured for the pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The image to be located during the pattern matching process. The template image is the image supplied 
            to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <param name="options">
            Describes how to search for the template image. 
            </param>
            <param name="searchArea">
            Specifies the rectangular region within an image in which to search for the template pattern. 
            Pass null or Nothing for this parameter if you want to search the entire image for the template image.</param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Learn the template in viewer1.
            Algorithms.LearnPattern (imageViewer1.Image)
            'Match the template in viewer1.
            'Look for 2 matches that could be rotated.
            Dim Options As New MatchPatternOptions (MatchMode.RotationInvariant, 2)
            Dim Matches As Collection (Of PatternMatch)
            Matches = Algorithms.MatchPattern (imageViewer2.Image, imageViewer1.Image, Options)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Learn the template in viewer1.
            Algorithms.LearnPattern(imageViewer1.Image);
            // Match the template in viewer1.
            // Look for 2 matches that could be rotated.
            MatchPatternOptions options = new MatchPatternOptions(MatchMode.RotationInvariant, 2);
            Collection&lt;PatternMatch&gt; matches;
            matches = Algorithms.MatchPattern(imageViewer2.Image, imageViewer1.Image, options);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Searches for areas in an image that match a given template image. Use the the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior to
            using this method to ensure that the template image has been configured for the pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The image to be located during the pattern matching process. The template image is the image supplied 
            to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MatchPatternOptions)">
            <summary>
            Searches for areas in an image that match a given template image. Use the the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior to
            using this method to ensure that the template image has been configured for the pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The image to be located during the pattern matching process. The template image is the image supplied 
            to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <param name="options">
            Describes how to search for the template image. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MatchPatternOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Searches for areas in an image that match a given template image. Use the the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior to
            using this method to ensure that the template image has been configured for the pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The image to be located during the pattern matching process. The template image is the image supplied 
            to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <param name="options">
            Describes how to search for the template image. 
            </param>
            <param name="searchArea">
            Specifies the rectangular or rotated rectangular region within an image in which to search for the template pattern. 
            Pass null or Nothing for this parameter if you want to search the entire image for the template image.</param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RefineMatches(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.PatternMatch})">
            <summary>
            Refines matches returned from the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method using subpixel information learned using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
            <param name="image">
            The image in which you originally located the matches you want to refine.
            </param>
            <param name="template">
            The template for which you want to search during the refinement phase.
            </param>
            <param name="matches">
            Information about each match found in the image. This information is returned by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RefineMatches(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.PatternMatch},NationalInstruments.Vision.Analysis.MatchPatternOptions)">
            <summary>
            Refines matches returned from the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method using subpixel information learned using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
            <param name="image">
            The image in which you originally located the matches you want to refine.
            </param>
            <param name="template">
            The template for which you want to search during the refinement phase.
            </param>
            <param name="matches">
            Information about each match found in the image. This information is returned by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <param name="options">
            The options that were passed to the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim template As VisionImage
            'Assumes template is an existing learned pattern.
            'First match the image on viewer1.  Look for 3 matches, possibly rotated.
            Dim matchOptions As New MatchPatternOptions(MatchMode.RotationInvariant, 3)
            Dim matches As Collection(Of PatternMatch) = Algorithms.MatchPattern (imageViewer1.Image, template, matchOptions)
            'Now refine the matches.
            matches = Algorithms.RefineMatches (imageViewer1.Image, template, matches, matchOptions)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage template;
            // Assumes template is an existing learned pattern.
            // First match the image on viewer1.  Look for 3 matches, possibly rotated.
            MatchPatternOptions matchOptions = new MatchPatternOptions(MatchMode.RotationInvariant, 3);
            Collection&lt;PatternMatch&gt; matches = Algorithms.MatchPattern(imageViewer1.Image, template, matchOptions);
            // Now refine the matches.
            matches = Algorithms.RefineMatches(imageViewer1.Image, template, matches, matchOptions);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the color template image to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColorPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method. This description data is appended to the input color template image. 
            During the color pattern match, the color template descriptor is extracted from the color 
            template image and used to search for the template in the color match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to the image. 
            </param>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LearnColorPatternOptions)">
            <summary>
            Creates a description of the color template image to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColorPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method. This description data is appended to the input color template image. 
            During the color pattern match, the color template descriptor is extracted from the color 
            template image and used to search for the template in the color match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to the image. 
            </param>
            <param name="options">
            Describes the information the algorithm learns about the color pattern. 
            </param>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Learn the template in viewer1, ignoring black and white colors.
            Dim ColorOptions As New LearnColorPatternOptions
            ColorOptions.IgnoreMode = ColorIgnoreMode.BlackAndWhite
            Algorithms.LearnColorPattern (imageViewer1.Image, ColorOptions)
            'Match the template in viewer2.
            Dim Matches As Collection(Of PatternMatch) = Algorithms.MatchColorPattern (imageViewer2.Image, 
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Learn the template in viewer1, ignoring black and white colors.
            LearnColorPatternOptions colorOptions = new LearnColorPatternOptions();
            colorOptions.IgnoreMode = ColorIgnoreMode.BlackAndWhite;
            Algorithms.LearnColorPattern(imageViewer1.Image, colorOptions);
            // Match the template in viewer2.
            Collection&lt;PatternMatch&gt; matches = Algorithms.MatchColorPattern(imageViewer2.Image, imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColorPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Searches for areas in an image that match a given color template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior 
            to using this method to ensure that the color template image has been configured for the color pattern 
            match stage.
            </summary>
            <param name="image">
            The image in which the function finds matches to the color template image. 
            </param>
            <param name="template">
            The color image to be located during the color pattern matching process. The template image is the color 
            image supplied to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> objects that
            contains information about each about each match found.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColorPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MatchColorPatternOptions)">
            <summary>
            Searches for areas in an image that match a given color template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior 
            to using this method to ensure that the color template image has been configured for the color pattern 
            match stage.
            </summary>
            <param name="image">
            The image in which the function finds matches to the color template image. 
            </param>
            <param name="template">
            The color image to be located during the color pattern matching process. The template image is the color 
            image supplied to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method.
            </param>
            <param name="options">
            Describes how to search for the color template image. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> objects that
            contains information about each about each match found.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColorPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MatchColorPatternOptions,NationalInstruments.Vision.RectangleContour)">
            <summary>
            Searches for areas in an image that match a given color template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior 
            to using this method to ensure that the color template image has been configured for the color pattern 
            match stage.
            </summary>
            <param name="image">
            The image in which the function finds matches to the color template image. 
            </param>
            <param name="template">
            The color image to be located during the color pattern matching process. The template image is the color 
            image supplied to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method.
            </param>
            <param name="options">
            Describes how to search for the color template image. 
            </param>
            <param name="searchArea">
            Specifies the rectangular region within an image in which to search for the color template pattern. 
            Pass null or Nothing for this parameter if you want the entire image to be examined.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> objects that
            contains information about each about each match found.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColorPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MatchColorPatternOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Searches for areas in an image that match a given color template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method prior 
            to using this method to ensure that the color template image has been configured for the color pattern 
            match stage.
            </summary>
            <param name="image">
            The image in which the function finds matches to the color template image. 
            </param>
            <param name="template">
            The color image to be located during the color pattern matching process. The template image is the color 
            image supplied to the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method.
            </param>
            <param name="options">
            Describes how to search for the color template image. 
            </param>
            <param name="searchArea">
            Specifies the ROI within an image in which to search for the color template pattern. 
            Pass null or Nothing for this parameter if you want the entire image to be examined.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.PatternMatch" crefType="Unqualified"/> objects that
            contains information about each about each match found.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Learn the template in viewer1, ignoring black and white colors.
            Dim ColorOptions As New LearnColorPatternOptions
            ColorOptions.IgnoreMode = ColorIgnoreMode.BlackAndWhite
            Algorithms.LearnColorPattern (imageViewer1.Image, ColorOptions)
            'Match the template in viewer2.
            Dim Matches As Collection(Of PatternMatch) = Algorithms.MatchColorPattern (imageViewer2.Image, imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Learn the template in viewer1, ignoring black and white colors.
            LearnColorPatternOptions colorOptions = new LearnColorPatternOptions();
            colorOptions.IgnoreMode = ColorIgnoreMode.BlackAndWhite;
            Algorithms.LearnColorPattern(imageViewer1.Image, colorOptions);
            // Match the template in viewer2.
            Collection&lt;PatternMatch&gt; matches = Algorithms.MatchColorPattern(imageViewer2.Image, imageViewer1.Image);
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectCircles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CircleDescriptor)">
            <summary>
            Detects circles in a search image.
            </summary>
            <param name="image">
            The image in which the circles are to be located.
            </param>
            <param name="circleDescriptor">
            Specifies the circles to look for in the search image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CircleMatch" crefType="Unqualified"/> objects about each circle found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectCircles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CircleDescriptor,NationalInstruments.Vision.Roi)">
            <summary>
            Detects circles in a search image.
            </summary>
            <param name="image">
            The image in which the circles are to be located.
            </param>
            <param name="circleDescriptor">
            Specifies the circles to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CircleMatch" crefType="Unqualified"/> objects about each circle found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectCircles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CircleDescriptor,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Detects circles in a search image.
            </summary>
            <param name="image">
            The image in which the circles are to be located.
            </param>
            <param name="circleDescriptor">
            Specifies the circles to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <param name="curveOptions">
            Options that specify how the algorithm finds curves in the image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CircleMatch" crefType="Unqualified"/> objects about each circle found. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectCircles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CircleDescriptor,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ShapeDetectionOptions)">
            <summary>
            Detects circles in a search image.
            </summary>
            <param name="image">
            The image in which the circles are to be located.
            </param>
            <param name="circleDescriptor">
            Specifies the circles to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <param name="curveOptions">
            Options that specify how the algorithm finds curves in the image.
            </param>
            <param name="shapeDetectionOptions">
            Options the method uses for detecting shapes.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CircleMatch" crefType="Unqualified"/> objects about each circle found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim i As New VisionImage
            Dim circles As Collection(Of CircleMatch)
             
            ' Find circles from radius size 10 to 100 in the image
            circles = Algorithms.DetectCircles (i, New CircleDescriptor(10, 100))
             
            ' Overlay the found circles on the image
            For Each circle As CircleMatch In circles
                imageViewer1.Image.Ovelays.Default.AddOval (circle.Circle)
            Next
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage i = new VisionImage();
            Collection&lt;CircleMatch&gt; circles;
             
            // Find circles from radius size 10 to 100 in the image
            circles = Algorithms.DetectCircles (i, new CircleDescriptor(10, 100))
             
            // Overlay the found circles on the image
            foreach (CircleMatch circle in circles) {
                imageViewer1.Image.Overlays.Default.AddOval (circle.Circle);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectEllipses(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.EllipseDescriptor)">
            <summary>
            Detects ellipses in a search image.
            </summary>
            <param name="image">
            The image in which the ellipses are located.
            </param>
            <param name="ellipseDescriptor">
            Specifies the ellipses to look for in the search image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.EllipseMatch" crefType="Unqualified"/> objects about each ellipse found. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectEllipses(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.EllipseDescriptor,NationalInstruments.Vision.Roi)">
            <summary>
            Detects ellipses in a search image.
            </summary>
            <param name="image">
            The image in which the ellipses are located.
            </param>
            <param name="ellipseDescriptor">
            Specifies the ellipses to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.EllipseMatch" crefType="Unqualified"/> objects about each ellipse found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectEllipses(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.EllipseDescriptor,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Detects ellipses in a search image.
            </summary>
            <param name="image">
            The image in which the ellipses are located.
            </param>
            <param name="ellipseDescriptor">
            Specifies the ellipses to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <param name="curveOptions">Options that specify how the algorithm finds curves in the image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.EllipseMatch" crefType="Unqualified"/> objects about each ellipse found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectEllipses(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.EllipseDescriptor,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ShapeDetectionOptions)">
            <summary>
            Detects ellipses in a search image.
            </summary>
            <param name="image">
            The image in which the ellipses are located.
            </param>
            <param name="ellipseDescriptor">
            Specifies the ellipses to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <param name="curveOptions">Options that specify how the algorithm finds curves in the image.
            </param>
            <param name="shapeDetectionOptions">Options the method uses for detecting shapes.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.EllipseMatch" crefType="Unqualified"/> objects about each ellipse found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim i As New VisionImage
            Dim ellipses As Collection(Of EllipseMatch)
             
            ' Find ellipses from minor radius size 10 to 30, major radius size
            ' 50 to 100 in the image
            ellipses = Algorithms.DetectEllipses (i, New EllipseDescriptor(New Range(50, 100), New Range(10, 30)))
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage i = new VisionImage();
            Collection&lt;EllipseMatch&gt; ellipses;
             
            // Find ellipses from minor radius size 10 to 30, major radius size
            // 50 to 100 in the image
            ellipses = Algorithms.DetectEllipses (i, new EllipseDescriptor(new Range(50, 100), new Range(10, 30)));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectLines(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LineDescriptor)">
            <summary>
            Detects lines in a search image.
            </summary>
            <param name="image">The image in which the lines are located.
            </param>
            <param name="lineDescriptor">A descriptor specifying the lines to look for in the search image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.LineMatch" crefType="Unqualified"/> objects about each line found. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectLines(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LineDescriptor,NationalInstruments.Vision.Roi)">
            <summary>
            Detects lines in a search image.
            </summary>
            <param name="image">The image in which the lines are located.
            </param>
            <param name="lineDescriptor">A descriptor specifying the lines to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.LineMatch" crefType="Unqualified"/> objects about each line found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectLines(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LineDescriptor,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Detects lines in a search image.
            </summary>
            <param name="image">The image in which the lines are located.
            </param>
            <param name="lineDescriptor">A descriptor specifying the lines to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <param name="curveOptions">Options that specify how the algorithm finds curves in the image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.LineMatch" crefType="Unqualified"/> objects about each line found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectLines(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LineDescriptor,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ShapeDetectionOptions)">
            <summary>
            Detects lines in a search image.
            </summary>
            <param name="image">The image in which the lines are located.
            </param>
            <param name="lineDescriptor">A descriptor specifying the lines to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <param name="curveOptions">Options that specify how the algorithm finds curves in the image.
            </param>
            <param name="shapeDetectionOptions">Options the method uses for detecting shapes.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.LineMatch" crefType="Unqualified"/> objects about each line found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim i As New VisionImage
            Dim lines As Collection(Of LineMatch)
             
            ' Find lines from length 20 to 50 in the image
            lines = Algorithms.DetectLines (i, New LineDescriptor(20, 50))
             
            ' Overlay the found lines on the image
            For Each line As LineMatch In lines
                imageViewer1.Image.Overlays.Default.AddLine (line.Line)
            Next
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage i = new VisionImage();
            Collection&lt;LineMatch&gt; lines;
             
            // Find lines from length 20 to 50 in the image
            lines = Algorithms.DetectLines (i, new LineDescriptor(20, 50))
             
            // Overlay the found lines on the image
            foreach (LineMatch line in lines) {
                imageViewer1.Image.Overlays.Default.AddLine (line.Line);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectRectangles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.RectangleDescriptor)">
            <summary>
            Detects rectangles in a search image.
            </summary>
            <param name="image">
            The image in which the rectangles are located.
            </param>
            <param name="rectangleDescriptor">
            Specifies the rectangles to look for in the search image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.RectangleMatch" crefType="Unqualified"/> objects about each rectangle found. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectRectangles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.RectangleDescriptor,NationalInstruments.Vision.Roi)">
            <summary>
            Detects rectangles in a search image.
            </summary>
            <param name="image">
            The image in which the rectangles are located.
            </param>
            <param name="rectangleDescriptor">
            Specifies the rectangles to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.RectangleMatch" crefType="Unqualified"/> objects about each rectangle found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectRectangles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.RectangleDescriptor,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Detects rectangles in a search image.
            </summary>
            <param name="image">
            The image in which the rectangles are located.
            </param>
            <param name="rectangleDescriptor">
            Specifies the rectangles to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <param name="curveOptions">Options that specify how the algorithm finds curves in the image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.RectangleMatch" crefType="Unqualified"/> objects about each rectangle found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.DetectRectangles(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.RectangleDescriptor,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ShapeDetectionOptions)">
            <summary>
            Detects rectangles in a search image.
            </summary>
            <param name="image">
            The image in which the rectangles are located.
            </param>
            <param name="rectangleDescriptor">
            Specifies the rectangles to look for in the search image.
            </param>
            <param name="roi">Specifies the portion of the image in which the method searches. Pass null or Nothing for this parameter to search the entire image.
            </param>
            <param name="curveOptions">Options that specify how the algorithm finds curves in the image.
            </param>
            <param name="shapeDetectionOptions">Options the method uses for detecting shapes.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.RectangleMatch" crefType="Unqualified"/> objects about each rectangle found. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim i As New VisionImage
            Dim rectangles As Collection(Of RectangleMatch)
             
            ' Find rectangles from width and height size 30 to 60 in the image
            rectangles = Algorithms.DetectRectangles (i, New RectangleDescriptor (New Range (30, 60), New Range (30, 60)))
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage i = new VisionImage();
            Collection&lt;RectangleMatch&gt; rectangles;
             
            // Find rectangles from width and height size 30 to 60 in the image
            rectangles = Algorithms.DetectRectangles (i, new RectangleDescriptor (new Range (30, 60), new Range (30, 60)));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertPixelToRealWorldCoordinates(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Transforms pixel coordinates to real world coordinates, according to the calibration information contained in the image.
            </summary>
            <param name="calibratedImage">The calibrated image.
            </param>
            <param name="pixelPoints">The collection of points to transform.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.CoordinatesReport" crefType="Unqualified"/> containing the points in real-world coordinates. On failure, an exception is thrown.
            </returns>
            <remarks>
            Attach calibration information to this image using <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/>, or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertPixelToRealWorldCoordinates(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour)">
            <summary>
            Transforms pixel coordinates to real world coordinates, according to the calibration information contained in the image.
            </summary>
            <param name="calibratedImage">The calibrated image.
            </param>
            <param name="pixelPoint">The point to transform.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.CoordinatesReport" crefType="Unqualified"/> containing the points in real-world coordinates. On failure, an exception is thrown.
            </returns>
            <remarks>
            Attach calibration information to this image using <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/>, or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertPixelToRealWorldCoordinates(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Transforms pixel coordinates to real world coordinates, according to the calibration information contained in the image.
            </summary>
            <param name="calibratedImage">The calibrated image.
            </param>
            <param name="pixelPoints">The collection of points to transform.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.CoordinatesReport" crefType="Unqualified"/> containing the points in real-world coordinates. On failure, an exception is thrown.
            </returns>
            <remarks>
            Attach calibration information to this image using <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/>, or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>. 
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            ' This example assumes you have a Polyline selected on the viewer.
            Algorithms.SetSimpleCalibration(ImageViewer1.Image, New CoordinateSystem(), New GridDescriptor(10, 10, CalibrationUnit.Meter))
            Dim Polyline As PolylineContour
            Polyline = CType(ImageViewer1.Roi(0).Shape, PolylineContour)
            Dim report As CoordinatesReport = Algorithms.ConvertPixelToRealWorldCoordinates(ImageViewer1.Image, Polyline.Points)
            Dim i As Integer
            ' Overlay the results on the image
            For i = 0 To report.Points.Count - 1
                If report.ValidPoints(i) Then
                    Dim OriginalPoint As PointContour = Polyline.Points(i)
                    Dim RealWorldPoint As PointContour = report.Points(i)
                    ImageViewer1.Image.Overlays.[Default].AddOval(New OvalContour(OriginalPoint.X - 3, OriginalPoint.Y - 3, 7, 7), Rgb32Value.RedColor, DrawingMode.PaintValue)
                    ImageViewer1.Image.Overlays.[Default].AddText(RealWorldPoint.ToString(), OriginalPoint, Rgb32Value.WhiteColor)
                End If
            Next
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // This example assumes you have a Polyline selected on the viewer.
            Algorithms.SetSimpleCalibration(imageViewer1.Image, new CoordinateSystem(), new GridDescriptor(10, 10, CalibrationUnit.Meter));
            PolylineContour polyline;
            polyline = imageViewer1.Roi[0].Shape as PolylineContour;
            CoordinatesReport report = Algorithms.ConvertPixelToRealWorldCoordinates(imageViewer1.Image, polyline.Points);
            // Overlay the results on the image
            for (int i = 0; i &lt; report.Points.Count; ++i) {
                if (report.ValidPoints[i]) {
                    PointContour originalPoint = polyline.Points[i];
                    PointContour realWorldPoint = report.Points[i];
                    imageViewer1.Image.Overlays.Default.AddOval(new OvalContour(originalPoint.X - 3, originalPoint.Y - 3, 7, 7), Rgb32Value.RedColor, DrawingMode.PaintValue);
                    imageViewer1.Image.Overlays.Default.AddText(realWorldPoint.ToString(), originalPoint, Rgb32Value.WhiteColor);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertRealWorldToPixelCoordinates(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Transforms real world coordinates to pixel coordinates, according to the calibration information.
            </summary>
            <param name="calibratedImage">
            The calibrated image.
            </param>
            <param name="realWorldPoints">
            The collection of real-world points to transform.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.CoordinatesReport" crefType="Unqualified"/> containing the points in pixel coordinates. On failure, an exception is thrown.
            </returns>
            <remarks>
            Attach calibration information to this image using <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/>, or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertRealWorldToPixelCoordinates(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour)">
            <summary>
            Transforms real world coordinates to pixel coordinates, according to the calibration information.
            </summary>
            <param name="calibratedImage">
            The calibrated image.
            </param>
            <param name="realWorldPoint">
            The real-world point to transform.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.CoordinatesReport" crefType="Unqualified"/> containing the points in pixel coordinates. On failure, an exception is thrown.
            </returns>
            <remarks>
            Attach calibration information to this image using <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/>, or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ConvertRealWorldToPixelCoordinates(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Transforms real world coordinates to pixel coordinates, according to the calibration information.
            </summary>
            <param name="calibratedImage">
            The calibrated image.
            </param>
            <param name="realWorldPoints">
            The collection of real-world points to transform.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.CoordinatesReport" crefType="Unqualified"/> containing the points in pixel coordinates. On failure, an exception is thrown.
            </returns>
            <remarks>
            Attach calibration information to this image using <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/>, or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>. 
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            ' Assumes the image in the viewer is calibrated.
            Dim point As PointContour
            point = Algorithms.ConvertRealWorldToPixelCoordinates(imageViewer1.Image, New Point(100, 200))
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Assumes the image in the viewer is calibrated.
            PointContour point;
            point = Algorithms.ConvertRealWorldToPixelCoordinates(imageViewer1.Image, new Point(100, 200));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CorrectCalibratedImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue)">
            <summary>Corrects a calibrated image by applying a calibration to create a spatially correct image.
            </summary>
            <param name="source">The calibrated image to correct.
            </param>
            <param name="destination">The corrected image.
            </param>
            <param name="fill">The pixel replace value for pixel points that cannot be corrected.
            </param>
            <remarks>Use this method with image types U8, I16, Sgl, Rgb32, and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CorrectCalibratedImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.Analysis.InterpolationMethod)">
            <summary>Corrects a calibrated image by applying a calibration to create a spatially correct image.
            </summary>
            <param name="source">The calibrated image to correct.
            </param>
            <param name="destination">The corrected image.
            </param>
            <param name="fill">The pixel replace value for pixel points that cannot be corrected.
            </param>
            <param name="interpolationMethod">Specifies the method of interpolation. Valid interpolation methods for correction are <see cref="F:NationalInstruments.Vision.Analysis.InterpolationMethod.ZeroOrder" crefType="Unqualified"/> and <see cref="F:NationalInstruments.Vision.Analysis.InterpolationMethod.Bilinear" crefType="Unqualified"/>. The default is ZeroOrder.
            </param>
            <remarks>Use this method with image types U8, I16, Sgl, Rgb32, and Hsl32.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CorrectCalibratedImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.Analysis.InterpolationMethod,NationalInstruments.Vision.Roi)">
            <summary>Corrects a calibrated image by applying a calibration to create a spatially correct image.
            </summary>
            <param name="source">The calibrated image to correct.
            </param>
            <param name="destination">The corrected image.
            </param>
            <param name="fill">The pixel replace value for pixel points that cannot be corrected.
            </param>
            <param name="interpolationMethod">Specifies the method of interpolation. Valid interpolation methods for correction are <see cref="F:NationalInstruments.Vision.Analysis.InterpolationMethod.ZeroOrder" crefType="Unqualified"/> and <see cref="F:NationalInstruments.Vision.Analysis.InterpolationMethod.Bilinear" crefType="Unqualified"/>. The default is ZeroOrder.
            </param>
            <param name="roi">Specifies the portion of the image the method corrects. If you do not supply this parameter, the method corrects the entire image.
            </param>
            <remarks>Use this method with image types U8, I16, Sgl, Rgb32, and Hsl32.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            ' Calibrate the image in ImageViewer1
            Algorithms.SetSimpleCalibration (ImageViewer1.Image, New CoordinateSystem(New PointContour(), 45), New GridDescriptor(10, 10, CalibrationUnit.Meter))
            ' Correct the calibrated image in ImageViewer1 and
            ' store the result in i.
            Algorithms.CorrectCalibratedImage (imageViewer1.Image, i, New PixelValue(0), InterpolationMethod.Bilinear)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            // Calibrate the image in imageViewer1
            Algorithms.SetSimpleCalibration(imageViewer1.Image, new CoordinateSystem(new PointContour(), 45), new GridDescriptor(10, 10, CalibrationUnit.Meter));
            // Correct the calibrated image in imageViewer1 and
            // store the result in i.
            Algorithms.CorrectCalibratedImage(imageViewer1.Image, i, new PixelValue(0), InterpolationMethod.Bilinear);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)">
            <summary>
            Learns a calibration from an image of a grid of circles.
            </summary>
            <param name="image">
            The template used for calibrating your system.
            </param>
            <returns>
            The quality score of the learning process, which is a value between 0-1000. A quality of 1000 means that 
            the method learned the feature points perfectly with the chosen algorithm. It does not necessarily reflect 
            the absolute accuracy of the estimated calibration mapping, but instead reflects how well the calibration 
            mapping adapts to the learned grid.
            </returns>
            <remarks>
            Use this method with U8 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CalibrationGridOptions)">
            <summary>
            Learns a calibration from an image of a grid of circles.
            </summary>
            <param name="image">
            The template used for calibrating your system.
            </param>
            <param name="calibrationGridOptions">
            Specifies information about the calibration grid image.
            </param>
            <returns>
            The quality score of the learning process, which is a value between 0-1000. A quality of 1000 means that 
            the method learned the feature points perfectly with the chosen algorithm. It does not necessarily reflect 
            the absolute accuracy of the estimated calibration mapping, but instead reflects how well the calibration 
            mapping adapts to the learned grid.
            </returns>
            <remarks>
            Use this method with U8 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CalibrationGridOptions,NationalInstruments.Vision.LearnCalibrationOptions)">
            <summary>
            Learns a calibration from an image of a grid of circles.
            </summary>
            <param name="image">
            The template used for calibrating your system.
            </param>
            <param name="calibrationGridOptions">
            Specifies information about the calibration grid image.
            </param>
            <param name="learnCalibrationOptions">
            Describes how the method learns the calibration information. 
            </param>
            <returns>
            The quality score of the learning process, which is a value between 0-1000. A quality of 1000 means that 
            the method learned the feature points perfectly with the chosen algorithm. It does not necessarily reflect 
            the absolute accuracy of the estimated calibration mapping, but instead reflects how well the calibration 
            mapping adapts to the learned grid.
            </returns>
            <remarks>
            Use this method with U8 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CalibrationGridOptions,NationalInstruments.Vision.LearnCalibrationOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Learns a calibration from an image of a grid of circles.
            </summary>
            <param name="image">
            The template used for calibrating your system.
            </param>
            <param name="calibrationGridOptions">
            Specifies information about the calibration grid image.
            </param>
            <param name="learnCalibrationOptions">
            Describes how the method learns the calibration information. 
            </param>
            <param name="roi">
            Determines the region of the image that the function uses in the learning process. The function ignores 
            all the circles in the grid that are outside the defined region when estimating the calibration 
            transformation. Pass null or Nothing for this parameter to learn the entire image.
            </param>
            <returns>
            The quality score of the learning process, which is a value between 0-1000. A quality of 1000 means that 
            the method learned the feature points perfectly with the chosen algorithm. It does not necessarily reflect 
            the absolute accuracy of the estimated calibration mapping, but instead reflects how well the calibration 
            mapping adapts to the learned grid.
            </returns>
            <remarks>
            Use this method with U8 and I16 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Learn the calibration grid in Viewer1, only using the grid circles
            'present in the Roi in Viewer1.
            Algorithms.LearnCalibrationGrid (imageViewer1.Image, New CalibrationGridOptions(), New LearnCalibrationOptions(), imageViewer1.Roi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Learn the calibration grid in Viewer1, only using the grid circles
            //present in the Roi in Viewer1.
            Algorithms.LearnCalibrationGrid(imageViewer1.Image, new CalibrationGridOptions(), new LearnCalibrationOptions(), imageViewer1.Roi);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Learns a calibration from a set of pixel coordinates and corresponding real-world coordinates.
            </summary>
            <param name="image">
            The image to which the function attaches calibration information. 
            </param>
            <param name="pixelCoordinates">
            The coordinates of the pixel reference points.
            </param>
            <param name="realWorldCoordinates">
            The real-world coordinates corresponding to the <format type="italics">pixelCoordinates.</format>
            </param>
            <returns>
            The quality score of the learning process, which is a value between 0–1000. A quality of 1000 
            means that the method learned the feature points perfectly with the chosen algorithm. It 
            does not necessarily reflect the absolute accuracy of the estimated calibration mapping, but 
            instead reflects how well the calibration mapping adapts to the learned points.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.LearnCalibrationOptions)">
            <summary>
            Learns a calibration from a set of pixel coordinates and corresponding real-world coordinates.
            </summary>
            <param name="image">
            The image to which the function attaches calibration information. 
            </param>
            <param name="pixelCoordinates">
            The coordinates of the pixel reference points.
            </param>
            <param name="realWorldCoordinates">
            The real-world coordinates corresponding to the <format type="italics">pixelCoordinates.</format>
            </param>
            <param name="learnCalibrationOptions">
            Describes how the method learns the calibration information. 
            </param>
            <returns>
            The quality score of the learning process, which is a value between 0–1000. A quality of 1000 
            means that the method learned the feature points perfectly with the chosen algorithm. It 
            does not necessarily reflect the absolute accuracy of the estimated calibration mapping, but 
            instead reflects how well the calibration mapping adapts to the learned points.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.LearnCalibrationOptions,NationalInstruments.Vision.GridDescriptor)">
            <summary>
            Learns a calibration from a set of pixel coordinates and corresponding real-world coordinates.
            </summary>
            <param name="image">
            The image to which the function attaches calibration information. 
            </param>
            <param name="pixelCoordinates">
            The coordinates of the pixel reference points.
            </param>
            <param name="realWorldCoordinates">
            The real-world coordinates corresponding to the <format type="italics">pixelCoordinates.</format>
            </param>
            <param name="learnCalibrationOptions">
            Describes how the method learns the calibration information. 
            </param>
            <param name="grid">
            Contains scaling constants for the real-world coordinates that the method uses to learn the calibration. 
            </param>
            <returns>
            The quality score of the learning process, which is a value between 0-1000. A quality of 1000 
            means that the method learned the feature points perfectly with the chosen algorithm. It 
            does not necessarily reflect the absolute accuracy of the estimated calibration mapping, but 
            instead reflects how well the calibration mapping adapts to the learned points.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.LearnCalibrationOptions,NationalInstruments.Vision.GridDescriptor,NationalInstruments.Vision.Roi)">
            <summary>
            Learns a calibration from a set of pixel coordinates and corresponding real-world coordinates.
            </summary>
            <param name="image">
            The image to which the function attaches calibration information. 
            </param>
            <param name="pixelCoordinates">
            The coordinates of the pixel reference points.
            </param>
            <param name="realWorldCoordinates">
            The real-world coordinates corresponding to the <format type="italics">pixelCoordinates.</format>
            </param>
            <param name="learnCalibrationOptions">
            Describes how the method learns the calibration information. 
            </param>
            <param name="grid">
            Contains scaling constants for the real-world coordinates that the method uses to learn the calibration. 
            </param>
            <param name="roi">
            Determines which pixel coordinates the method uses in the learning process. The function ignores 
            all pixel coordinates that are outside the defined ROI when estimating the calibration 
            transformation. Pass null or Nothing for this parameter to learn all of the pixel coordinates. 
            </param>
            <returns>
            The quality score of the learning process, which is a value between 0-1000. A quality of 1000 
            means that the method learned the feature points perfectly with the chosen algorithm. It 
            does not necessarily reflect the absolute accuracy of the estimated calibration mapping, but 
            instead reflects how well the calibration mapping adapts to the learned points.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Learn some calibrated points.
            Dim PixelPoints As New Collection(Of PointContour)
            Dim RealWorldPoints As New Collection(Of PointContour)
            PixelPoints.Add (New PointContour(10, 10))
            RealWorldPoints.Add (New PointContour(20.5, 25))
            PixelPoints.Add (New PointContour(10, 15))
            RealWorldPoints.Add (New PointContour(20.5, 35))
            PixelPoints.Add (New PointContour(15, 10))
            RealWorldPoints.Add (New PointContour(22, 25))
            PixelPoints.Add (New PointContour(15, 15))
            RealWorldPoints.Add (New PointContour(22, 35))
             
            Algorithms.LearnCalibrationPoints (imageViewer1.Image, PixelPoints, RealWorldPoints)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            //Learn some calibrated points.
            Collection&lt;PointContour&gt; pixelPoints = new Collection&lt;PointContour&gt;();
            Collection&lt;PointContour&gt; realWorldPoints = new Collection&lt;PointContour&gt;();
            pixelPoints.Add(new PointContour(10, 10));
            realWorldPoints.Add(new PointContour(20.5, 25));
            pixelPoints.Add(new PointContour(10, 15));
            realWorldPoints.Add(new PointContour(20.5, 35));
            pixelPoints.Add(new PointContour(15, 10));
            realWorldPoints.Add(new PointContour(22, 25));
            pixelPoints.Add(new PointContour(15, 15));
            realWorldPoints.Add(new PointContour(22, 35));
             
            Algorithms.LearnCalibrationPoints(imageViewer1.Image, pixelPoints, realWorldPoints);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)">
            <summary>
            Sets a simple calibration for an image or resets the real-world coordinate system in a calibrated image. 
            When used to reset a coordinate system, if the correction table is still required, the table must be 
            relearned. When the coordinate system angle is set to zero, you do not need to make a correction.
            </summary>
            <param name="image">
            The image to be calibrated.
            </param>
            <param name="system">
            Defines the coordinate system for the calibrated real-world coordinates. 
            </param>
            <param name="grid">
            Defines scaling constants for the image. If the image has been calibrated previously, using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/> method 
            or the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>  
            method, this parameter is ignored and the previously defined scaling constants are used. 
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor,NationalInstruments.Vision.ScalingMethod)">
            <summary>
            Sets a simple calibration for an image or resets the real-world coordinate system in a calibrated image. 
            When used to reset a coordinate system, if the correction table is still required, the table must be 
            relearned. When the coordinate system angle is set to zero, you do not need to make a correction.
            </summary>
            <param name="image">
            The image to be calibrated.
            </param>
            <param name="system">
            Defines the coordinate system for the calibrated real-world coordinates.
            </param>
            <param name="grid">
            Defines scaling constants for the image. If the image has been calibrated previously, using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/> method 
            or the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>  
            method, this parameter is ignored and the previously defined scaling constants are used. 
            </param>
            <param name="method">
            Defines the scaling method correction functions used to correct the image.  If the image has been calibrated previously, using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/> method 
            or the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>  
            method, this parameter is ignored and the previously defined scaling is used. Otherwise, the default value for this parameter is ScaleToPreserveArea.
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor,NationalInstruments.Vision.ScalingMethod,System.Boolean)">
            <summary>
            Sets a simple calibration for an image or resets the real-world coordinate system in a calibrated image. 
            When used to reset a coordinate system, if the correction table is still required, the table must be 
            relearned. When the coordinate system angle is set to zero, you do not need to make a correction.
            </summary>
            <param name="image">
            The image to be calibrated.
            </param>
            <param name="system">
            Defines the coordinate system for the calibrated real-world coordinates.
            </param>
            <param name="grid">
            Defines scaling constants for the image. If the image has been calibrated previously, using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/> method 
            or the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>  
            method, this parameter is ignored and the previously defined scaling constants are used. 
            </param>
            <param name="method">
            Defines the scaling method correction functions used to correct the image.  If the image has been calibrated previously, using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/> method 
            or the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>  
            method, this parameter is ignored and the previously defined scaling is used. Otherwise, the default value for this parameter is ScaleToPreserveArea.
            </param>
            <param name="learnTable">
            Set this parameter to true to process and store the correction table. The correction table accelerates 
            the process of correcting an image and is useful if you plan to correct several images using this 
            calibration setup. The default is false.
            </param>
            <remarks>
            Use this method with U8, U16, I16, Single, Rgb32, and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim CoordSystem As New CoordinateSystem(New PointContour(5, 10), 45, AxisOrientation.Direct)
            Dim GridDesc As New GridDescriptor(1, 2, CalibrationUnit.Centimeter)
             
            'Set the simple calibration on the image in viewer1.
            Algorithms.SetSimpleCalibration (imageViewer1.Image, CoordSystem, GridDesc)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            CoordinateSystem coordSystem = new CoordinateSystem(new PointContour(5, 10), 45, 
             
            AxisOrientation.Direct);
            GridDescriptor gridDesc = new GridDescriptor(1, 2, CalibrationUnit.Centimeter);
             
            // Set the simple calibration on the image in viewer1.
            Algorithms.SetSimpleCalibration(imageViewer1.Image, coordSystem, gridDesc);
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>Copies calibration information from a calibrated image to an image to be calibrated. Both images must be the same size.
            </summary>
            <param name="source">The calibrated input image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <remarks>
            Use <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>, or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/> to set the calibration information in the source image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour)">
            <summary>Copies calibration information from a calibrated image to an image to be calibrated. Both images must be the same size.
            </summary>
            <param name="source">The calibrated input image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="offset">The position of the source image relative to the destination image.
            </param>
            <remarks>
            Use <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>, or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/> to set the calibration information in the source image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            ' Copy the calibration information from the image in ImageViewer1 into i
            Algorithms.CopyCalibrationInformation (imageViewer1.Image, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            // Copy the calibration information from the image in imageViewer1 into i
            Algorithms.CopyCalibrationInformation(imageViewer1.Image, i);</code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationTargetToPoints(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary> CalibrationTargetToPoints detects the circular dots in binary image and returns the pixel and real world points for calibration.
            </summary>
            <param name="image">The calibrated input image.
            </param>
            <param name="roi">The roi.
            </param>
            <param name="gridDescriptor">The grid descriptor.</param>
            <returns>
            The set of reference points to use in learning a calibration transformation.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationTargetToPoints(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.GridDescriptor)">
            <summary> CalibrationTargetToPoints detects the circular dots in binary image and returns the pixel and real world points for calibration.
            </summary>
            <param name="image">The image with circular dots.
            </param>
            <param name="roi">The ROI to be corrected.
            </param>
            <param name="gridDescriptor">The Grid Descriptor contains information about a grid image that is used to learn the calibration.
            </param>
            <returns>
            The set of reference points to use in learning a calibration transformation.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationTargetToPoints(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.GridDescriptor,NationalInstruments.Vision.Analysis.MaxGridSize)">
            <summary> 
            CalibrationTargetToPoints detects the circular dots in binary image and returns the pixel and real world points for calibration.
            </summary>
            <param name="image">The image with circular dots.
            </param>
            <param name="roi">The ROI to be corrected.
            </param>
            <param name="gridDescriptor">The Grid Descriptor contains information about a grid image that is used to learn the calibration.
            </param>
            <param name="maxGridSize">Specifies the limit of grid size to be used for pixel and real world points. 
            </param>
            <returns>
            The set of reference points to use in learning a calibration transformation.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.GridDescriptor)">
            <summary> 
            SetSimpleCalibration2 sets a simple calibration using pixel distances in x and y direction.
            </summary>
            <param name="image">The uncalibrated image.
            </param>
            <param name="gridDescriptor">The grid descriptor specifies pixel distances in x and y direction for real world units.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationSetAxisInfo(NationalInstruments.Vision.VisionImage)">
            <summary> CalibrationSetAxisInfo assigns the coodinate system information to calibration template image.
            </summary>
            <param name="image">A reference to the template used for calibrating your system.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationSetAxisInfo(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem)">
            <summary> CalibrationSetAxisInfo assigns the coodinate system information to calibration template image.
            </summary>
            <param name="image">A reference to the template used for calibrating your system.
            </param>
            <param name="axisInfo">Defines a Reference Coordinate System for the real-world coordinates.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationSetAxisInfoByReferencePoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary> CalibrationSetAxisInfoByReferencePoints assigns the coodinate system information to calibration template image using 3 reference points
            </summary>
            <param name="image">A reference to the template used for calibrating your system.
            </param>
            <param name="pixelPoints">Pixel world points (must be 3)
            </param>
            <param name="realWorldPoints">Real world points (must be 3)
            </param>        
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationGetThumbnailImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary> Gets the thumbnails, stored during learning calibration.
            </summary>
            <param name="templateImage">Reference to the input image that determines the output calibration information.
            </param>
            <param name="thumbnailImage">Reference to the thumbnail image to be stored.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationGetThumbnailImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationThumbnailType)">
            <summary> Gets the thumbnails, stored during learning calibration.
            </summary>
            <param name="templateImage">Reference to the input image that determines the output calibration information.
            </param>
            <param name="thumbnailImage">Reference to the thumbnail image to be stored.
            </param>
            <param name="type">Specifies the type of thumbnail to be returned. Default is Camera Model type.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationGetThumbnailImage(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationThumbnailType,System.UInt32)">
            <summary> Gets the thumbnails, stored during learning calibration.
            </summary>
            <param name="templateImage">Reference to the input image that determines the output calibration information.
            </param>
            <param name="thumbnailImage">Reference to the thumbnail image to be stored.
            </param>
            <param name="type">Specifies the type of thumbnail to be returned. Default is Camera Model type.
            </param>
            <param name="index">Specifies the index of thumbnail to be returned from distortion and camera model template images. Default value is 0.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationGetCalibrationInfo(NationalInstruments.Vision.VisionImage)">
            <summary> Gets Calibration information associated with an image.
            </summary>
            <param name="image">The calibrated input image.
            </param>
            <returns>
            The calibration information associated with an image.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationGetCalibrationInfo(NationalInstruments.Vision.VisionImage,System.Boolean)">
            <summary> Gets Calibration information associated with an image.
            </summary>
            <param name="image">The calibrated input image.
            </param>
            <param name="isGetErrorMap">Set it to true if the Error map is also required in
            the result.
            </param>
            <returns>
            The calibration information associated with an image.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationGetCameraParameters(NationalInstruments.Vision.VisionImage)">
            <summary> Gets the internal and external paramters of learned camera model.
            </summary>
            <param name="image">The reference to the input image that determines the output calibration information.
            </param>
            <returns>
            The internal and external paramters of learned camera model.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationCompactInformation(NationalInstruments.Vision.VisionImage)">
            <summary>
            CalibrationCompactInformation removes information, which was used learn the calibration, and thumbnails to make the size of calibration smaller. Re-learning and retrieving thumbnails are not possible after compact operation.
            </summary>
            <param name="image">The calibrated input image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPerspectiveCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints)">
            <summary> 
            Learns perspective calibration to correct the distortion, created by non-perpendicular planes to camera.
            </summary>
            <param name="templateImage">The template used for calibrating your system.
            </param>
            <param name="image">The thumbnail image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnMicroPlaneCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints)">
            <summary> 
            Learns the microplane calibration information for correcting images in a nonplanar working plane.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCameraModel(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints)">
            <summary> 
            Learns detailed camera characteristics, including the focal length, optical center, and 
            distortion model. Because a camera model includes a distortion model, you do not need to
            compute a separate distortion model.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCameraModel(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints,NationalInstruments.Vision.Analysis.CalibrationModelSetup)">
            <summary> 
            Learns detailed camera characteristics, including the focal length, optical center, and 
            distortion model. Because a camera model includes a distortion model, you do not need to
            compute a separate distortion model.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
            <param name="calibrationModelSetup"> Specifies the distortion model settings to use. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCameraModel(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints,NationalInstruments.Vision.Analysis.CalibrationModelSetup,System.Boolean)">
            <summary> 
            Learns detailed camera characteristics, including the focal length, optical center, and 
            distortion model. Because a camera model includes a distortion model, you do not need to
            compute a separate distortion model.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
            <param name="calibrationModelSetup"> Specifies the distortion model settings to use. 
            </param>
            <param name="addPointsAndLearn"> When TRUE, adds points and learns the distortion model. 
            When FALSE, only points are added. The default is TRUE. If you learn calibration using one
            image, set this parameter to TRUE to add points and learn the calibration template. If you
            learn calibration from multiple grid images, set this parameter to FALSE for the first n-1
            images, then set it to TRUE for the last image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCameraModel2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints)">
            <summary> 
            Learns detailed camera characteristics, including the focal length, optical center, and 
            distortion model. Because a camera model includes a distortion model, you do not need to
            compute a separate distortion model.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCameraModel2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints,NationalInstruments.Vision.Analysis.CalibrationModelSetup)">
            <summary> 
            Learns detailed camera characteristics, including the focal length, optical center, and 
            distortion model. Because a camera model includes a distortion model, you do not need to
            compute a separate distortion model.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
            <param name="calibrationModelSetup"> Specifies the distortion model settings to use. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCameraModel2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints,NationalInstruments.Vision.Analysis.CalibrationModelSetup,System.Boolean)">
            <summary> 
            Learns detailed camera characteristics, including the focal length, optical center, and 
            distortion model. Because a camera model includes a distortion model, you do not need to
            compute a separate distortion model.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints">The set of reference points to use in learning a calibration transformation.
            </param>
            <param name="calibrationModelSetup">Specifies the distortion model settings to use. 
            </param>
            <param name="addPointsAndLearn">When TRUE, adds points and learns the distortion model. 
            When FALSE, only points are added. The default is TRUE. If you learn calibration using one
            image, set this parameter to TRUE to add points and learn the calibration template. If you
            learn calibration from multiple grid images, set this parameter to FALSE for the first n-1
            images, then set it to TRUE for the last image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnDistortionModel(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints)">
            <summary> 
            Learns a distortion model of the camera and lens setup. If your camera is not perpendicular to 
            the object under inspection, you can combine distortion modeling with perspective calibration.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnDistortionModel(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints,NationalInstruments.Vision.Analysis.CalibrationModelSetup)">
            <summary> 
            Learns a distortion model of the camera and lens setup. If your camera is not perpendicular to 
            the object under inspection, you can combine distortion modeling with perspective calibration.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
            <param name="calibrationModelSetup"> Specifies the distortion model settings to use. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnDistortionModel(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints,NationalInstruments.Vision.Analysis.CalibrationModelSetup,System.Boolean)">
            <summary> 
            Learns a distortion model of the camera and lens setup. If your camera is not perpendicular to 
            the object under inspection, you can combine distortion modeling with perspective calibration.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
            <param name="calibrationModelSetup"> Specifies the distortion model settings to use. 
            </param>
            <param name="addPointsAndLearn"> When TRUE, adds points and learns the distortion model. 
            When FALSE, only points are added. The default is TRUE. If you learn calibration using one
            image, set this parameter to TRUE to add points and learn the calibration template. If you
            learn calibration from multiple grid images, set this parameter to FALSE for the first n-1
            images, then set it to TRUE for the last image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnDistortionModel2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints)">
            <summary> 
            Learns a distortion model of the camera and lens setup. If your camera is not perpendicular to 
            the object under inspection, you can combine distortion modeling with perspective calibration.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnDistortionModel2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints,NationalInstruments.Vision.Analysis.CalibrationModelSetup)">
            <summary> 
            Learns a distortion model of the camera and lens setup. If your camera is not perpendicular to 
            the object under inspection, you can combine distortion modeling with perspective calibration.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
            <param name="calibrationModelSetup"> Specifies the distortion model settings to use. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnDistortionModel2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationReferencePoints,NationalInstruments.Vision.Analysis.CalibrationModelSetup,System.Boolean)">
            <summary> 
            Learns a distortion model of the camera and lens setup. If your camera is not perpendicular to 
            the object under inspection, you can combine distortion modeling with perspective calibration.
            </summary>
            <param name="templateImage">The image containing calibration image.
            </param>
            <param name="image">The source image.
            </param>
            <param name="referencePoints"> The set of reference points to use in learning a calibration transformation.
            </param>
            <param name="calibrationModelSetup"> Specifies the distortion model settings to use. 
            </param>
            <param name="addPointsAndLearn"> When TRUE, adds points and learns the distortion model. 
            When FALSE, only points are added. The default is TRUE. If you learn calibration using one
            image, set this parameter to TRUE to add points and learn the calibration template. If you
            learn calibration from multiple grid images, set this parameter to FALSE for the first n-1
            images, then set it to TRUE for the last image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CalibrationCorrectionLearnSetup(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo,NationalInstruments.Vision.Roi)">
            <summary> 
            Sets parameters used to correct the calibration in an image.
            </summary>
            <param name="image">The source image containing calibration information.
            </param>
            <param name="calibrationLearnSetupInfo"> Provides information about how the image correction is performed.
            </param>
            <param name="correctionRoi"> Specifies the ROI to use when correcting the calibration in an image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColor(NationalInstruments.Vision.VisionImage)">
            <summary>
            Extracts the color features of an image, which can be used for color matching or other 
            applications related with color information, such as color identification and color image 
            segmentation. Use these features for color matching with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)" crefType="Unqualified"/> method.
            </summary>
            <param name="image">
            The image containing the color information to learn. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ColorInformation" crefType="Unqualified"/> object 
            containing the color information, which can be passed to the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)" crefType="Unqualified"/> method.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Extracts the color features of an image, which can be used for color matching or other 
            applications related with color information, such as color identification and color image 
            segmentation. Use these features for color matching with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)" crefType="Unqualified"/> method.
            </summary>
            <param name="image">
            The image containing the color information to learn. 
            </param>
            <param name="roi">
            Describes regions in the image that contain the color to be learned. If regions contains multiple 
            region objects, the color information in all these regions is accumulated before learning. Pass null
            or Nothing for this parameter to learn color information about the whole image.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ColorInformation" crefType="Unqualified"/> object 
            containing the color information, which can be passed to the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)" crefType="Unqualified"/> method.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ColorSensitivity)">
            <summary>
            Extracts the color features of an image, which can be used for color matching or other 
            applications related with color information, such as color identification and color image 
            segmentation. Use these features for color matching with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)" crefType="Unqualified"/> method.
            </summary>
            <param name="image">
            The image containing the color information to learn. 
            </param>
            <param name="roi">
            Describes regions in the image that contain the color to be learned. If regions contains multiple 
            region objects, the color information in all these regions is accumulated before learning. Pass null
            or Nothing for this parameter to learn color information about the whole image.
            </param>
            <param name="sensitivity">
            Specifies the sensitivity of the color information in the image. The sensitivity can be low, medium, or high. Set this value
            to high when you need to distinguish colors with close hue values. The default is Low.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ColorInformation" crefType="Unqualified"/> object 
            containing the color information, which can be passed to the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)" crefType="Unqualified"/> method.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ColorSensitivity,System.Int32)">
            <summary>
            Extracts the color features of an image, which can be used for color matching or other 
            applications related with color information, such as color identification and color image 
            segmentation. Use these features for color matching with the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)" crefType="Unqualified"/> method.
            </summary>
            <param name="image">
            The image containing the color information to learn. 
            </param>
            <param name="roi">
            Describes regions in the image that contain the color to be learned. If regions contains multiple 
            region objects, the color information in all these regions is accumulated before learning. Pass null
            or Nothing for this parameter to learn color information about the whole image.
            </param>
            <param name="sensitivity">
            Specifies the sensitivity of the color information in the image. The sensitivity can be low, medium, or high. Set this value
            to high when you need to distinguish colors with close hue values. The default is Low.
            </param>
            <param name="saturation">
            Sets a threshold value which the method uses to separate colors with similar hues. The 
            function classifies colors below the given saturation value separately from colors above the 
            given saturation value. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ColorInformation" crefType="Unqualified"/> object 
            containing the color information, which can be passed to the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)" crefType="Unqualified"/> method.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Learn the image in viewer1 and match it in viewer2.
            Dim ColorInfo as ColorInformation = Algorithms.LearnColor (imageViewer1.Image)
            Dim ColorScore as Integer = Algorithms.MatchColor (imageViewer2.Image, ColorInfo)(0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Learn the image in viewer1 and match it in viewer2.
            ColorInformation colorInfo = Algorithms.LearnColor(imageViewer1.Image);
            int colorScore = Algorithms.MatchColor(imageViewer2.Image, colorInfo)[0];
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation)">
            <summary>
            Determines how closely colors in an image match colors in the given color information. 
            </summary>
            <param name="image">
            The image containing colors you want to compare with the given color information. 
            </param>
            <param name="colorInformation">
            The color information. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColor(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method
            to get the color information.
            </param>
            <returns>
            A collection of integers containing the match score for the image. The match score is represented on a 
            scale of 0 to 1000 where 0 indicates no match and 1000 indicates a perfect match.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchColor(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ColorInformation,NationalInstruments.Vision.Roi)">
            <summary>
            Determines how closely colors in an image match colors in the given color information. 
            </summary>
            <param name="image">
            The image containing colors you want to compare with the given color information. 
            </param>
            <param name="colorInformation">
            The color information. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColor(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method
            to get the color information.
            </param>
            <param name="roi">
            The region of the image in which to compare the colors. All region contours are considered to be external. 
            If <format type="italics">roi</format> contains multiple regions, the color information in each region is 
            compared individually to the color information specified by the <format type="italics">colorInformation</format> 
            parameter and the match results are reported for each region. Pass null or Nothing for this parameter to 
            compare colors in the entire image. 
            </param>
            <returns>
            A collection of integers containing the match score for the image. The match score is represented on a 
            scale of 0 to 1000 where 0 indicates no match and 1000 indicates a perfect match.
            </returns>
            <remarks>
            Use this method with Rgb32 and Hsl32 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Learn the image in viewer1 and match it in viewer2.
            Dim ColorInfo as ColorInformation = Algorithms.LearnColor (imageViewer1.Image)
            Dim ColorScore as Integer = Algorithms.MatchColor (imageViewer2.Image, ColorInfo)(0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Learn the image in viewer1 and match it in viewer2.
            ColorInformation colorInfo = Algorithms.LearnColor(imageViewer1.Image);
            int colorScore = Algorithms.MatchColor(imageViewer2.Image, colorInfo)[0];
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetMeterArc(NationalInstruments.Vision.Analysis.MeterNeedleColor,NationalInstruments.Vision.LineContour,NationalInstruments.Vision.LineContour)">
            <summary>
            Returns the arc information of a meter. The 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadMeter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MeterArc)" crefType="Unqualified"/> method uses this 
            information to read a meter.
            </summary>
            <param name="color">
            Determines whether to find a light-colored needle on a dark background or a dark-colored needle on a light 
            background.
            </param>
            <param name="initialNeedle">
            A line contour representing the minimum possible position of the meter needle.
            </param>
            <param name="fullNeedle">
            A line contour representing the maximum position of the meter needle.
            </param>
            <returns>
            A MeterArc object describing the arc across which a meter sweeps.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetMeterArc(NationalInstruments.Vision.Analysis.MeterNeedleColor,NationalInstruments.Vision.Roi)">
            <summary>
            Returns the arc information of a meter. The 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadMeter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MeterArc)" crefType="Unqualified"/> method uses this 
            information to read a meter.
            </summary>
            <param name="color">
            Determines whether to find a light-colored needle on a dark background or a dark-colored needle on a light 
            background.
            </param>
            <param name="lines">
            A region consisting of two line contours, each drawn from the tip of the needle to its base. The first line 
            contour represents the minimum position of the needle, and the second line contour represents the maximum 
            position of the needle. 
            </param>
            <returns>
            A MeterArc object describing the arc across which a meter sweeps.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Get the meter arc from the Roi in Viewer1.
            Dim Arc As MeterArc = Algorithms.GetMeterArc (MeterNeedleColor.DarkOnLight, imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Get the meter arc from the Roi in Viewer1.
            MeterArc arc = Algorithms.GetMeterArc(MeterNeedleColor.DarkOnLight, imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetMeterArc(NationalInstruments.Vision.Analysis.MeterNeedleColor,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.PointContour)">
            <summary>
            Returns the arc information of a meter. The 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadMeter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MeterArc)" crefType="Unqualified"/> method uses this 
            information to read a meter.
            </summary>
            <param name="color">
            Determines whether to find a light-colored needle on a dark background or a dark-colored needle on a light 
            background.
            </param>
            <param name="basePoint">
            The location of the base of the needle.
            </param>
            <param name="startPoint">
            The location of the tip of the needle when the needle is at the minimum sweep position.
            </param>
            <param name="endPoint">
            The location of the tip of the needle when the needle is at the maximum sweep position.
            </param>
            <returns>
            A MeterArc object describing the arc across which a meter sweeps.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadMeter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.MeterArc)">
            <summary>
            Reads a meter. The method reads VU-meters with a dark needle on a light background or with a 
            light needle on a dark background. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.GetMeterArc(NationalInstruments.Vision.Analysis.MeterNeedleColor,NationalInstruments.Vision.LineContour,NationalInstruments.Vision.LineContour)" crefType="Unqualified"/> method to 
            determine the arc information.
            </summary>
            <param name="image">
            The image containing the meter to read.
            </param>
            <param name="arc">
            Information about the arc of the meter. This information is returned by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.GetMeterArc(NationalInstruments.Vision.Analysis.MeterNeedleColor,NationalInstruments.Vision.LineContour,NationalInstruments.Vision.LineContour)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.MeterReport" crefType="Unqualified"/> object containing the location of the endpoint 
            of the needle and the sweep position of the needle.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim Arc As MeterArc
             
            'Assumes the Arc has been populated with GetMeterArc.
            Dim Report As MeterReport = Algorithms.ReadMeter (imageViewer1.Image, Arc)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            MeterArc arc;
             
            // Assumes the arc has been populated with GetMeterArc.
            MeterReport report = Algorithms.ReadMeter(imageViewer1.Image, arc);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadBarcode(NationalInstruments.Vision.VisionImage)">
            <summary>
            Reads a barcode from an image.
            </summary>
            <param name="image">
            The image containing the barcode to read.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.BarcodeReport" crefType="Unqualified"/> object containing information about the barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadBarcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BarcodeTypes)">
            <summary>
            Reads a barcode from an image.
            </summary>
            <param name="image">
            The image containing the barcode to read.
            </param>
            <param name="type">
            The type of the barcode to read.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.BarcodeReport" crefType="Unqualified"/> object containing information about the barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadBarcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BarcodeTypes,NationalInstruments.Vision.Roi)">
            <summary>
            Reads a barcode from an image.
            </summary>
            <param name="image">
            The image containing the barcode to read.
            </param>
            <param name="type">
            The type of the barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.BarcodeReport" crefType="Unqualified"/> object containing information about the barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadBarcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.BarcodeTypes,NationalInstruments.Vision.Roi,System.Boolean)">
            <summary>
            Reads a barcode from an image.
            </summary>
            <param name="image">
            The image containing the barcode to read.
            </param>
            <param name="type">
            The type of the barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image.
            </param>
            <param name="validate">
            Specifies whether to validate the barcode's data. If the barcode type is Codabar, Code 39, or Interleaved 2 of 5, the error 
            correction information is used to validate the results. For all other barcode types, either no validation is performed or 
            the validation is performed automatically because the type requires it. The default is False.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.BarcodeReport" crefType="Unqualified"/> object containing information about the barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Read the Ean8 barcode on the viewer.
            Dim Report As BarcodeReport = Algorithms.ReadBarcode (imageViewer1.Image, BarcodeTypes.Ean8, imageViewer1.Roi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Read the Ean8 barcode on the viewer.
            BarcodeReport report = Algorithms.ReadBarcode(imageViewer1.Image, BarcodeTypes.Ean8, imageViewer1.Roi);
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadPdf417Barcode(NationalInstruments.Vision.VisionImage)">
            <summary>
            Reads PDF417 barcodes from an image.
            </summary>
            <param name="image">
            The image containing the PDF417 barcode to read.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.Pdf417Report" crefType="Unqualified"/> object containing information about the 
            PDF417 barcodes, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadPdf417Barcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Reads PDF417 barcodes from an image.
            </summary>
            <param name="image">
            The image containing the PDF417 barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcodes in the image. The first contour of roi must be a rectangle, 
            rotated rectangle, oval, annulus or closed contour. Pass null or Nothing for this parameter to use the entire image. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.Pdf417Report" crefType="Unqualified"/> object containing information about the 
            PDF417 barcodes, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadPdf417Barcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.Pdf417SearchMode)">
            <summary>
            Reads PDF417 barcodes from an image.
            </summary>
            <param name="image">
            The image containing the PDF417 barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcodes in the image. The first contour of roi must be a rectangle, 
            rotated rectangle, oval, annulus or closed contour. Pass null or Nothing for this parameter to use the entire image. 
            </param>
            <param name="searchMode">
            Specifies the mode the method uses to search for barcodes.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.Pdf417Report" crefType="Unqualified"/> object containing information about the 
            PDF417 barcodes, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Reads the PDF417 barcode on the viewer.
            Dim Reports As Collection(Of Pdf417Report) = Algorithms.ReadPdf417Barcode (imageViewer1.Image, 
            imageViewer1.Roi, Pdf417SearchMode.Single)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Reads the PDF417 barcode on the viewer.
            Collection&lt;Pdf417Report&gt; reports = Algorithms.ReadPdf417Barcode(imageViewer1.Image, 
            imageViewer1.Roi, Pdf417SearchMode.Single);
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadQRCode(NationalInstruments.Vision.VisionImage)">
            <summary>
            Reads a QR code from an image.
            </summary>
            <param name="image">
            The image containing the QR code to read.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.QRReport" crefType="Unqualified"/> object containing information about 
            the QR code, including a string containing the decoded code data.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadQRCode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Reads a QR code from an image.
            </summary>
            <param name="image">
            The image containing the QR code to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the code in the image. The first contour of 
            <format type="italics">roi</format> must be a rectangle, rotated rectangle, or closed contour.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.QRReport" crefType="Unqualified"/> object containing information about 
            the QR code, including a string containing the decoded code data.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadQRCode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.QRDescriptionOptions)">
            <summary>
            Reads a QR code from an image. Many of the options provided by this method allow for automatic detection of 
            properties of the QR code or what methods the function should use to locate and decode the code. Specifying 
            specific properties and methods for these options will greatly increase the performance of the method.
            </summary>
            <param name="image">
            The image containing the QR code to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the code in the image. The first contour of 
            <format type="italics">roi</format> must be a rectangle, rotated rectangle, or closed contour.
            </param>
            <param name="descriptionOptions">
            Describes the QR code the method should look for.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.QRReport" crefType="Unqualified"/> object containing information about 
            the QR code, including a string containing the decoded code data.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadQRCode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.QRDescriptionOptions,NationalInstruments.Vision.Analysis.QRSizeOptions)">
            <summary>
            Reads a QR code from an image. Many of the options provided by this method allow for automatic detection of 
            properties of the QR code or what methods the function should use to locate and decode the code. Specifying 
            specific properties and methods for these options will greatly increase the performance of the method.
            </summary>
            <param name="image">
            The image containing the QR code to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the code in the image. The first contour of 
            <format type="italics">roi</format> must be a rectangle, rotated rectangle, or closed contour.
            </param>
            <param name="descriptionOptions">
            Describes the QR code the method should look for.
            </param>
            <param name="sizeOptions">
            Specifies the sizing information for the QR code the method should look for.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.QRReport" crefType="Unqualified"/> object containing information about 
            the QR code, including a string containing the decoded code data.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadQRCode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.QRDescriptionOptions,NationalInstruments.Vision.Analysis.QRSizeOptions,NationalInstruments.Vision.Analysis.QRSearchOptions)">
            <summary>
            Reads a QR code from an image. Many of the options provided by this method allow for automatic detection of 
            properties of the QR code or what methods the function should use to locate and decode the code. Specifying 
            specific properties and methods for these options will greatly increase the performance of the method.
            </summary>
            <param name="image">
            The image containing the QR code to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the code in the image. The first contour of 
            <format type="italics">roi</format> must be a rectangle, rotated rectangle, or closed contour.
            </param>
            <param name="descriptionOptions">
            Describes the QR code the method should look for.
            </param>
            <param name="sizeOptions">
            Specifies the sizing information for the QR code the method should look for.
            </param>
            <param name="searchOptions">
            Specifies the parameters the method uses to search for the QR code.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.QRReport" crefType="Unqualified"/> object containing information about 
            the QR code, including a string containing the decoded code data.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Reads the QR code on the viewer.
            'Assumes the QR code is 141x141, black on white, and not mirrored.
            Dim DescriptionOptions As New QRDescriptionOptions(QRDimension.Size141x141, QRPolarity.BlackOnWhite, QRMirrorMode.Normal)
            Dim Report As QRReport = Algorithms.ReadQRCode (imageViewer1.Image, imageViewer1.Roi, DescriptionOptions)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Reads the QR code on the viewer.
            // Assumes the QR code is 141x141, black on white, and not mirrored.
            QRDescriptionOptions descriptionOptions = new QRDescriptionOptions(QRDimension.Size141x141, QRPolarity.BlackOnWhite, QRMirrorMode.Normal);
            QRReport report = Algorithms.ReadQRCode(imageViewer1.Image, imageViewer1.Roi, descriptionOptions);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)">
            <summary>
            Reads a Data Matrix barcode from an image.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to read.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.DataMatrixReport" crefType="Unqualified"/> object containing information 
            about the Data Matrix barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Reads a Data Matrix barcode from an image.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.DataMatrixReport" crefType="Unqualified"/> object containing information 
            about the Data Matrix barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.DataMatrixGradingMode)">
            <summary>
            Reads a Data Matrix barcode from an image.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image. 
            </param>
            <param name="gradingMode">
            Specifies if the method should make calculations needed to prepare to grade the Data Matrix barcode.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.DataMatrixReport" crefType="Unqualified"/> object containing information 
            about the Data Matrix barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.DataMatrixGradingMode,NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions)">
            <summary>
            Reads a Data Matrix barcode from an image. Many of the options provided by this method allow for automatic detection 
            of properties of the Data Matrix barcode or what methods the function should use to locate and decode the barcode. 
            Specificying specific properties and methods for these options will greatly increase the performance of the method.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image. 
            </param>
            <param name="gradingMode">
            Specifies if the method should make calculations needed to prepare to grade the Data Matrix barcode.
            </param>
            <param name="descriptionOptions">
            Describes the Data Matrix barcode the method should look for.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.DataMatrixReport" crefType="Unqualified"/> object containing information 
            about the Data Matrix barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.DataMatrixGradingMode,NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions,NationalInstruments.Vision.Analysis.DataMatrixSizeOptions)">
            <summary>
            Reads a Data Matrix barcode from an image. Many of the options provided by this method allow for automatic detection 
            of properties of the Data Matrix barcode or what methods the function should use to locate and decode the barcode. 
            Specificying specific properties and methods for these options will greatly increase the performance of the method.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image. 
            </param>
            <param name="gradingMode">
            Specifies if the method should make calculations needed to prepare to grade the Data Matrix barcode.
            </param>
            <param name="descriptionOptions">
            Describes the Data Matrix barcode the method should look for.
            </param>
            <param name="sizeOptions">
            Specifies the sizing information for the Data Matrix barcode the method should look for.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.DataMatrixReport" crefType="Unqualified"/> object containing information 
            about the Data Matrix barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.DataMatrixGradingMode,NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions,NationalInstruments.Vision.Analysis.DataMatrixSizeOptions,NationalInstruments.Vision.Analysis.DataMatrixSearchOptions)">
            <summary>
            Reads a Data Matrix barcode from an image. Many of the options provided by this method allow for automatic detection 
            of properties of the Data Matrix barcode or what methods the function should use to locate and decode the barcode. 
            Specificying specific properties and methods for these options will greatly increase the performance of the method.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image. 
            </param>
            <param name="gradingMode">
            Specifies if the method should make calculations needed to prepare to grade the Data Matrix barcode.
            </param>
            <param name="descriptionOptions">
            Describes the Data Matrix barcode the method should look for.
            </param>
            <param name="sizeOptions">
            Specifies the sizing information for the Data Matrix barcode the method should look for.
            </param>
            <param name="searchOptions">
            Specifies the parameters the method uses to search for the Data Matrix barcode.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.DataMatrixReport" crefType="Unqualified"/> object containing information 
            about the Data Matrix barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Read the Data Matrix barcode on the viewer.
            'This assumes the barcode is 19 rows by 17 columns.
            Dim Report As DataMatrixReport = Algorithms.ReadDataMatrixBarcode (imageViewer1.Image, 
            imageViewer1.Roi, DataMatrixGradingMode.None, New DataMatrixDescriptionOptions(19, 17))
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Read the Data Matrix barcode on the viewer.
            // This assumes the barcode is 19 rows by 17 columns.
            DataMatrixReport report = Algorithms.ReadDataMatrixBarcode(imageViewer1.Image, imageViewer1.Roi, 
            DataMatrixGradingMode.None, new DataMatrixDescriptionOptions(19, 17));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode3(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.DataMatrixGradingMode,NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions,NationalInstruments.Vision.Analysis.DataMatrixSizeOptions,NationalInstruments.Vision.Analysis.DataMatrixSearchOptions,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.DataMatrixAdvancedOptions})">
            <summary>
            Reads a Data Matrix barcode from an image. Many of the options provided by this method allow for automatic detection 
            of properties of the Data Matrix barcode or what methods the function should use to locate and decode the barcode. 
            Specificying specific properties and methods for these options will greatly increase the performance of the method.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image. 
            </param>
            <param name="gradingMode">
            Specifies if the method should make calculations needed to prepare to grade the Data Matrix barcode.
            </param>
            <param name="descriptionOptions">
            Describes the Data Matrix barcode the method should look for.
            </param>
            <param name="sizeOptions">
            Specifies the sizing information for the Data Matrix barcode the method should look for.
            </param>
            <param name="searchOptions">
            Specifies the parameters the method uses to search for the Data Matrix barcode.
            </param>
            <param name="advancedOptions">
            Specifies advanced options.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.DataMatrixReport" crefType="Unqualified"/> object containing information 
            about the Data Matrix barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Read the Data Matrix barcode on the viewer.
            'This assumes the barcode is 19 rows by 17 columns.
            Dim Report As DataMatrixReport = Algorithms.ReadDataMatrixBarcode (imageViewer1.Image, 
            imageViewer1.Roi, DataMatrixGradingMode.None, New DataMatrixDescriptionOptions(19, 17))
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Read the Data Matrix barcode on the viewer.
            // This assumes the barcode is 19 rows by 17 columns.
            DataMatrixReport report = Algorithms.ReadDataMatrixBarcode3(imageViewer1.Image, imageViewer1.Roi, 
            DataMatrixGradingMode.None, new DataMatrixDescriptionOptions(19, 17));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode4(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.DataMatrixGradingMode,NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions,NationalInstruments.Vision.Analysis.DataMatrixSizeOptions,NationalInstruments.Vision.Analysis.DataMatrixSearchOptions,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.DataMatrixAdvancedOptions},System.Single@)">
            <summary>
            Reads a Data Matrix barcode from an image. Many of the options provided by this method allow for automatic detection 
            of properties of the Data Matrix barcode or what methods the function should use to locate and decode the barcode. 
            Specificying specific properties and methods for these options will greatly increase the performance of the method.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to read.
            </param>
            <param name="roi">
            A region of interest specifying the location of the barcode in the image. 
            </param>
            <param name="gradingMode">
            Specifies if the method should make calculations needed to prepare to grade the Data Matrix barcode.
            </param>
            <param name="descriptionOptions">
            Describes the Data Matrix barcode the method should look for.
            </param>
            <param name="sizeOptions">
            Specifies the sizing information for the Data Matrix barcode the method should look for.
            </param>
            <param name="searchOptions">
            Specifies the parameters the method uses to search for the Data Matrix barcode.
            </param>
            <param name="advancedOptions">
            Specifies advanced options.
            </param>
            <param name="meanLight">
            Specifies value for mean light.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.DataMatrixReport" crefType="Unqualified"/> object containing information 
            about the Data Matrix barcode, including a string containing the decoded barcode data.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Read the Data Matrix barcode on the viewer.
            'This assumes the barcode is 19 rows by 17 columns.
            Dim Report As DataMatrixReport = Algorithms.ReadDataMatrixBarcode (imageViewer1.Image, 
            imageViewer1.Roi, DataMatrixGradingMode.None, New DataMatrixDescriptionOptions(19, 17))
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Read the Data Matrix barcode on the viewer.
            // This assumes the barcode is 19 rows by 17 columns.
            DataMatrixReport report = Algorithms.ReadDataMatrixBarcode4(imageViewer1.Image, imageViewer1.Roi, 
            DataMatrixGradingMode.None, new DataMatrixDescriptionOptions(19, 17));
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GradeDataMatrixBarcodeAim(NationalInstruments.Vision.VisionImage)">
            <summary>
            Grades a Data Matrix barcode using the AIM Print Quality metrics (included in the ISO 16022 specification).
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to grade. You must first prepare this image for grading using the
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.AimGradeReport" crefType="Unqualified"/> object containing the AIM 
            standard grades for the Data Matrix barcode and the raw scores used to derive the grades. If a Data Matrix 
            barcode can not be located by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method, the 
            method will assign the barcode an AimGrade of 
            <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="Unqualified"/> for all grades and 0 for all raw 
            scores.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Assumes the image in Viewer1 has already been read with
            'Algorithms.ReadDataMatrixBarcode
            Dim GradeReport As AimGradeReport
            GradeReport = Algorithms.GradeDataMatrixBarcodeAim (imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Assumes the image in Viewer1 has already been read with
            // Algorithms.ReadDataMatrixBarcode
            AimGradeReport gradeReport;
            gradeReport = Algorithms.GradeDataMatrixBarcodeAim(imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GradeDataMatrixBarcodeAimDpm(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CalibReflectanceStruct)">
            <summary>
            Grades a Data Matrix barcode using the AIM Print Quality metrics included in the AIM DPM specification.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to grade. You must first prepare this image for grading using the
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.AimDpmGradeReport" crefType="Unqualified"/> object containing the AIM 
            standard grades for the Data Matrix barcode and the raw scores used to derive the grades. If a Data Matrix 
            barcode can not be located by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method, the 
            method will assign the barcode an AimGrade of 
            <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="Unqualified"/> for all grades and 0 for all raw 
            scores.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Assumes the image in Viewer1 has already been read with
            'Algorithms.ReadDataMatrixBarcode
            Dim GradeReport As AimDpmGradeReport
            GradeReport = Algorithms.GradeDataMatrixBarcodeAIMDPM (imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Assumes the image in Viewer1 has already been read with
            // Algorithms.ReadDataMatrixBarcode
            AimDpmGradeReport gradeReport;
            gradeReport = Algorithms.GradeDataMatrixBarcodeAIMDPM(imageViewer1.Image, CalibReflectanceStruct);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GradeDataMatrixBarcodeISO15415(NationalInstruments.Vision.VisionImage)">
            <summary>
            Grades a Data Matrix barcode using the Print Quality metrics included in the ISO 15415 specification.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to grade. You must first prepare this image for grading using the
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.GradeReportISO15415" crefType="Unqualified"/> object containing the AIM 
            standard grades for the Data Matrix barcode and the raw scores used to derive the grades. If a Data Matrix 
            barcode can not be located by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method, the 
            method will assign the barcode an AimGrade of 
            <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="Unqualified"/> for all grades and 0 for all raw 
            scores.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Assumes the image in Viewer1 has already been read with
            'Algorithms.ReadDataMatrixBarcode
            Dim GradeReport As GradeReportISO15415
            GradeReport = Algorithms.GradeDataMatrixBarcodeISO15415 (imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Assumes the image in Viewer1 has already been read with
            // Algorithms.ReadDataMatrixBarcode
            GradeReportISO15415 gradeReport;
            gradeReport = Algorithms.GradeDataMatrixBarcodeISO15415(imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GradeDataMatrixBarcodeISO16022(NationalInstruments.Vision.VisionImage)">
            <summary>
            Grades a Data Matrix barcode using the Print Quality metrics included in the ISO 16022 specification.
            </summary>
            <param name="image">
            The image containing the Data Matrix barcode to grade. You must first prepare this image for grading using the
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.GradeReportISO16022" crefType="Unqualified"/> object containing the AIM 
            standard grades for the Data Matrix barcode and the raw scores used to derive the grades. If a Data Matrix 
            barcode can not be located by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method, the 
            method will assign the barcode an AimGrade of 
            <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="Unqualified"/> for all grades and 0 for all raw 
            scores.
            </returns>
            <remarks>
            Use this method with U8, I16, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Assumes the image in Viewer1 has already been read with
            'Algorithms.ReadDataMatrixBarcode
            Dim GradeReport As GradeReportISO16022
            GradeReport = Algorithms.GradeDataMatrixBarcodeISO16022 (imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Assumes the image in Viewer1 has already been read with
            // Algorithms.ReadDataMatrixBarcode
            GradeReportISO16022 gradeReport;
            gradeReport = Algorithms.GradeDataMatrixBarcodeISO16022(imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ShapeMatch(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Finds objects in an image whose shape matches the shape of the object specified by a template.
            </summary>
            <param name="source">
            The image in which the function searches for shapes. 
            </param>
            <param name="template">
            The 8-bit image containing the shape to find. 
            </param>
            <param name="destination">
            The resulting image that contains the objects in the source image that match the object in the 
            template image.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ShapeReport" crefType="Unqualified"/> object containing information
            about the matched objects.
            </returns>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">template</format> must be U8 binary 
            images that contain only pixel values of 0 or 1.
            <para>
            The matching process is invariant to rotation. You can set the match process to be invariant to the 
            scale of the objects. This method labels each object in the image with a unique identification number 
            before performing the match operation.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ShapeMatch(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Boolean)">
            <summary>
            Finds objects in an image whose shape matches the shape of the object specified by a template.
            </summary>
            <param name="source">
            The image in which the function searches for shapes. 
            </param>
            <param name="template">
            The 8-bit image containing the shape to find. 
            </param>
            <param name="destination">
            The resulting image that contains the objects in the source image that match the object in the 
            template image.
            </param>
            <param name="scaleInvariant">
            Set this parameter to True to search for shapes regardless of size. Set this parameter to False to search 
            for shapes that are ± 10 percent the same size as the template shape. The default is True.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ShapeReport" crefType="Unqualified"/> object containing information
            about the matched objects.
            </returns>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">template</format> must be U8 binary 
            images that contain only pixel values of 0 or 1.
            <para>
            The matching process is invariant to rotation. You can set the match process to be invariant to the 
            scale of the objects. This method labels each object in the image with a unique identification number 
            before performing the match operation.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ShapeMatch(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Boolean,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Finds objects in an image whose shape matches the shape of the object specified by a template.
            </summary>
            <param name="source">
            The image in which the function searches for shapes. 
            </param>
            <param name="template">
            The 8-bit image containing the shape to find. 
            </param>
            <param name="destination">
            The resulting image that contains the objects in the source image that match the object in the 
            template image.
            </param>
            <param name="scaleInvariant">
            Set this parameter to True to search for shapes regardless of size. Set this parameter to False to search 
            for shapes that are ± 10 percent the same size as the template shape. The default is True.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are 
            touching. Set this parameter to Connectivity4 to use connectivity-4 to determine whether particles 
            are touching. The default is Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ShapeReport" crefType="Unqualified"/> object containing information
            about the matched objects.
            </returns>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">template</format> must be U8 binary 
            images that contain only pixel values of 0 or 1.
            <para>
            The matching process is invariant to rotation. You can set the match process to be invariant to the 
            scale of the objects. This method labels each object in the image with a unique identification number 
            before performing the match operation.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ShapeMatch(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Boolean,NationalInstruments.Vision.Analysis.Connectivity,System.Double)">
            <summary>
            Finds objects in an image whose shape matches the shape of the object specified by a template.
            </summary>
            <param name="source">
            The image in which the function searches for shapes. 
            </param>
            <param name="template">
            The 8-bit image containing the shape to find. 
            </param>
            <param name="destination">
            The resulting image that contains the objects in the source image that match the object in the 
            template image.
            </param>
            <param name="scaleInvariant">
            Set this parameter to True to search for shapes regardless of size. Set this parameter to False to search 
            for shapes that are ± 10 percent the same size as the template shape. The default is True.
            </param>
            <param name="connectivity">
            Set this parameter to Connectivity8 to use connectivity-8 to determine whether particles are 
            touching. Set this parameter to Connectivity4 to use connectivity-4 to determine whether particles 
            are touching. The default is Connectivity8. For more information about connectivity, refer to the 
            <format type="italics">NI Vision Concepts Help</format>.
            </param>
            <param name="tolerance">
            Specifies the allowable difference between the template shape and similar shapes in the image. The 
            difference is expressed as a value from 0 to 1. The default is .03.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.ShapeReport" crefType="Unqualified"/> object containing information
            about the matched objects.
            </returns>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">template</format> must be U8 binary 
            images that contain only pixel values of 0 or 1.
            <para>
            The matching process is invariant to rotation. You can set the match process to be invariant to the 
            scale of the objects. This method labels each object in the image with a unique identification number 
            before performing the match operation.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Match the template shape stored in i in the image in Viewer1.
            'Store the result in the image in Viewer2
            Dim i As New VisionImage
             
            'Convert the image in Viewer1 into a binary image
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255))
             
            'Convert i into a binary image
            Algorithms.Threshold (i, i, New Range(128, 255))
             
            'Perform the ShapeMatch
            Dim Reports As Collection(Of ShapeReport) = Algorithms.ShapeMatch (imageViewer1.Image, i, imageViewer2.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            //Match the template shape stored in i in the image in Viewer1.
            //Store the result in the image in Viewer2
            VisionImage i = new VisionImage();
             
            //Convert the image in Viewer1 into a binary image
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255));
             
            //Convert i into a binary image
            Algorithms.Threshold(i, i, new Range(128, 255));
             
            //Perform the ShapeMatch
            Collection&lt;ShapeReport&gt; reports = Algorithms.ShapeMatch(imageViewer1.Image, i, imageViewer2.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Centroid(NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the centroid of an image.
            </summary>
            <param name="image">
            The image whose centroid the method calculates.
            </param>
            <returns>
            The centroid of the image. On failure, an exception is thrown.</returns>
            <remarks>
            Use this method with image types U8, I16, and Sgl.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Centroid(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the centroid of an image.
            </summary>
            <param name="image">
            The image whose centroid the method calculates.
            </param>
            <param name="mask">
            Specifies the region in the image to use for computing the centroid. The method uses only those source image pixels whose corresponding mask pixels are non-zero to compute the centroid. Do not set this parameter if you want the method to use the whole image in the centroid calculation.
            </param>
            <returns>
            The centroid of the image. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with image types U8, I16, and Sgl. <format type="italics">mask</format> must be a U8 image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim centroid As PointContour
            Dim maskImage As New VisionImage
            'Do something here to populate the maskImage
            'Calculate the centroid of the Image in Viewer1 using
            'maskImage as a mask.
            centroid = Algorithms.Centroid (imageViewer1.Image, maskImage)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            PointContour centroid;
            VisionImage maskImage = new VisionImage();
            //Do something here to populate the maskImage
            //Calculate the centroid of the Image in Viewer1 using
            //maskImage as a mask.
            centroid = Algorithms.Centroid(imageViewer1.Image, maskImage);
            	</code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the histogram, or pixel value distribution, of an image.
            </summary>
            <param name="image">
            The image the method uses to compute the histogram.
            </param>
            <returns>
            A HistogramReport describing the pixel value classification. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8, U16, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage,System.Int32)">
            <summary>
            Calculates the histogram, or pixel value distribution, of an image.
            </summary>
            <param name="image">
            The image the method uses to compute the histogram.
            </param>
            <param name="classes">
            The number of classes into which the method separates the pixels. The default is 256.
            </param>
            <returns>
            A HistogramReport describing the pixel value classification. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8, U16, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Range)">
            <summary>
            Calculates the histogram, or pixel value distribution, of an image.
            </summary>
            <param name="image">
            The image the method uses to compute the histogram.
            </param>
            <param name="classes">
            The number of classes into which the method separates the pixels. The default is 256.
            </param>
            <param name="intervalRange">
            The minimum and maximum values for the range of pixel values to consider for the histogram. 
            Pixel values outside of the range are not considered. The default value is (0, 0), which considers all pixels in the image.
            </param>
            <returns>
            A HistogramReport describing the pixel value classification. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8, U16, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Histogram(NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Range,NationalInstruments.Vision.VisionImage)">
            <summary>
            Calculates the histogram, or pixel value distribution, of an image.
            </summary>
            <param name="image">
            The image the method uses to compute the histogram.
            </param>
            <param name="classes">
            The number of classes into which the method separates the pixels. The default is 256.
            </param>
            <param name="intervalRange">
            The minimum and maximum values for the range of pixel values to consider for the histogram. 
            Pixel values outside of the range are not considered. The default value is (0, 0), which considers all pixels in the image.
            </param>
            <param name="mask">
            the region in which the method computes the histogram. The method processes only those pixels in the image whose corresponding 
            pixels in the mask are non-zero. Pass null or Nothing for this parameter if you want to calculate the histogram for the entire 
            image.
            </param>
            <returns>
            A HistogramReport describing the pixel value classification. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8, U16, I16, and Single images. <format type="italics">mask</format> must be a U8 image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim Report As HistogramReport
            Dim Mask As New VisionImage
             
            'Find the histogram of a portion of the image in Viewer1
            'defined by the regions on Viewer1.
            Algorithms.RoiToMask (Mask, imageViewer1.Roi)
             
            Report = Algorithms.Histogram (imageViewer1.Image, 256, New Range(), Mask)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            HistogramReport report;
            VisionImage mask = new VisionImage();
             
            //Find the histogram of a portion of the image in Viewer1
            //defined by the regions on Viewer1.
            Algorithms.RoiToMask(mask, imageViewer1.Roi);
             
            report = Algorithms.Histogram(imageViewer1.Image, 256, new Range(), mask);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LineProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Computes the profile of a line of pixels. This method returns other information such as pixel statistics and 
            the coordinates of the pixels along the line.
            </summary>
            <param name="image">
            The image on which the method computes the line profile.
            </param>
            <param name="line">
            The ROI containing the line along which the method computes the profile.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.LineProfileReport" crefType="Unqualified"/> object containing information
            about the line.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LineProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.LineContour)">
            <summary>
            Computes the profile of a line of pixels. This method returns other information such as pixel statistics and 
            the coordinates of the pixels along the line.
            </summary>
            <param name="image">
            The image on which the method computes the line profile.
            </param>
            <param name="line">
            The line along which the method computes the profile.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.LineProfileReport" crefType="Unqualified"/> object containing information
            about the line.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This example requires you to have a ListBox named List1 on the form.
            Dim line As New LineContour (New PointContour (10, 10), New PointContour (100, 100))
            'Find the profile along the line in the image on Viewer1
            Dim Report As LineProfileReport = Algorithms.LineProfile (imageViewer1.Image, line)
            'Display the pixel values in the listbox
            If Report.ProfileData.Count &gt; 0 Then
                List1.Items.Clear ()
                For Each Val As Double In Report.ProfileData
                    List1.Items.Add (val)
                Next
            End If
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // This example requires you to have a ListBox named List1 on the form.
            LineContour line = new LineContour(new PointContour(10, 10), new PointContour(100, 100));
            // Find the profile along the line in the image on Viewer1
            LineProfileReport report = Algorithms.LineProfile(imageViewer1.Image, line);
            // Display the pixel values in the listbox
            if (report.ProfileData.Count) {
                List1.Items.Clear();
                foreach (double val in Report.ProfileData) {
                    List1.Items.Add(val);
                }
            }
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractCurves(NationalInstruments.Vision.VisionImage)">
            <summary>
            Finds curves in an image.
            </summary>
            <param name="image">
            The source image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CurveReport" crefType="Unqualified"/> objects that describe the curves in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractCurves(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Finds curves in an image.
            </summary>
            <param name="image">
            The source image.
            </param>
            <param name="options">
            The parameters used when finding curves in an image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CurveReport" crefType="Unqualified"/> objects that describe the curves in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractCurves(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Finds curves in an image.
            </summary>
            <param name="image">
            The source image.
            </param>
            <param name="options">
            The parameters used when finding curves in an image.
            </param>
            <param name="roi">
            The ROI in which the method finds curves. Pass null or Nothing for this parameter to seach the entire image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.CurveReport" crefType="Unqualified"/> objects that describe the curves in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim options As New CurveOptions
             
            ' Find the curves in the image in Viewer1
            Algorithms.ExtractCurves (imageViewer1.Image, options)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            CurveOptions options = new CurveOptions();
                
            // Find the curves in the image in Viewer1
            Algorithms.ExtractCurves(imageViewer1.Image, options);
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LinearAverages(NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the mean line profile of an image.
            </summary>
            <param name="image">
            The image on which to perform the linear average.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.LinearAveragesReport" crefType="Unqualified"/> object containing the
            linear averages of the image.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LinearAverages(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LinearAveragesModes)">
            <summary>
            Computes the mean line profile of an image.
            </summary>
            <param name="image">
            The image on which to perform the linear average.
            </param>
            <param name="mode">
            The types of linear averages the function should compute. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.LinearAveragesReport" crefType="Unqualified"/> object containing the
            linear averages of the image.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LinearAverages(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LinearAveragesModes,NationalInstruments.Vision.Roi)">
            <summary>
            Computes the mean line profile of an image.
            </summary>
            <param name="image">
            The image on which to perform the linear average.
            </param>
            <param name="mode">
            The types of linear averages the function should compute. 
            </param>
            <param name="rectangle">
            Sets the region of interest in which the function calculates the averages.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.LinearAveragesReport" crefType="Unqualified"/> object containing the
            linear averages of the image.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
            <returns>
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Compute the linear averages on the image in viewer1.
            'Use the ROI that's on the viewer.
            Dim Report As LinearAveragesReport = Algorithms.LinearAverages (imageViewer1.Image, 
             
            LinearAveragesModes.AllLinearAverages, imageViewer1.Roi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Compute the linear averages on the image in viewer1.
            // Use the ROI that's on the viewer.
            LinearAveragesReport report = Algorithms.LinearAverages(imageViewer1.Image, 
             
            LinearAveragesModes.AllLinearAverages, imageViewer1.Roi)
             
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LinearAverages(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LinearAveragesModes,NationalInstruments.Vision.RectangleContour)">
            <summary>
            Computes the mean line profile of an image.
            </summary>
            <param name="image">
            The image on which to perform the linear average.
            </param>
            <param name="mode">
            The types of linear averages the function should compute. 
            </param>
            <param name="rectangle">
            Sets the rectangular area in which the function calculates the averages.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.LinearAveragesReport" crefType="Unqualified"/> object containing the
            linear averages of the image.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Quantify(NationalInstruments.Vision.VisionImage)">
            <summary>
            Quantifies the contents of an image or the regions within an image. The region definition is performed with a 
            labeled image mask. Each region of the mask has a single unique value.
            </summary>
            <param name="image">
            The image to quantify.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.QuantifyReport" crefType="Unqualified"/> conintaining information about the regions in the image.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Quantify(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Quantifies the contents of an image or the regions within an image. The region definition is performed with a 
            labeled image mask. Each region of the mask has a single unique value.
            </summary>
            <param name="image">
            The image to quantify.
            </param>
            <param name="mask">
            An 8-bit or 16-bit image specifying the regions to quantify in the image. Only the pixels in the original image 
            that correspond to an equivalent pixel in the mask different from 0 are used for the quantification. Each pixel in 
            this image (mask) indicates, by its value, which region belongs to the corresponding pixel in Image. Up to 255 
            regions for a U8, or 65,535 regions for an I16, can be quantified directly from the Image. Pass null or Nothing for 
            this parameter to quantify the entire image.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.QuantifyReport" crefType="Unqualified"/> conintaining information about the regions in the image.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim MaskImage As New VisionImage
            Dim Report As QuantifyReport
            'If there are regions on Viewer1
            If imageViewer1.Roi.Count &gt; 0 Then
                'Create the mask from the regions you selected on Viewer1
                Algorithms.RoiToMask (MaskImage, imageViewer1.Roi)
                'Label the mask image
                Algorithms.Label (maskImage, maskImage)
                'Quantify the image based on the regions
                Report = Algorithms.Quantify (imageViewer1.Image, maskImage)
            Else
                'Quantify the entire image
                Report = Algorithms.Quantify (imageViewer1.Image)
            End If
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage maskImage = new VisionImage();
            QuantifyReport report;
            // If there are regions on Viewer1
            if (imageViewer1.Roi.Count &gt; 0) {
                // Create the mask from the regions you selected on Viewer1
                Algorithms.RoiToMask(maskImage, imageViewer1.Roi);
                // Label the mask image
                Algorithms.Label(maskImage, maskImage);
                // Quantify the image based on the regions
                report = Algorithms.Quantify(imageViewer1.Image, maskImage);
            } else {
                // Quantify the entire image
                report = Algorithms.Quantify(imageViewer1.Image);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Threshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Thresholds an image. The method sets pixels values outside of the given range to 0. The method sets 
            pixel values within the range to a given value or leaves the values unchanged.
            </summary>
            <param name="source">
            The image to threshold.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. This method is optimized for MMX.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Threshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Range)">
            <summary>
            Thresholds an image. The method sets pixels values outside of the given range to 0. The method sets 
            pixel values within the range to a given value or leaves the values unchanged.
            </summary>
            <param name="source">
            The image to threshold.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="range">
            The range of pixel values to keep. The default is (128,255).
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. This method is optimized for MMX.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Threshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Range,System.Boolean)">
            <summary>
            Thresholds an image. The method sets pixels values outside of the given range to 0. The method sets 
            pixel values within the range to a given value or leaves the values unchanged.
            </summary>
            <param name="source">
            The image to threshold.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="range">
            The range of pixel values to keep. The default is (128,255).
            </param>
            <param name="replaceValue">
            Set this parameter to True to set the pixel values within the <format type="italics">range</format> 
            to 1. Set this parameter to False to leave the pixel values unchanged.
            This parameter has a default value of True.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. This method is optimized for MMX.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Threshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Range,System.Boolean,System.Double)">
            <summary>
            Thresholds an image. The method sets pixels values outside of the given range to 0. The method sets 
            pixel values within the range to a given value or leaves the values unchanged.
            </summary>
            <param name="source">
            The image to threshold.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="range">
            The range of pixel values to keep. The default is (128,255).
            </param>
            <param name="replaceValue">
            Set this parameter to True to set the pixel values within the <format type="italics">range</format> 
            to the value specified in <format type="italics">newValue</format>. Set this parameter to False to 
            leave the pixel values unchanged. This parameter has a default value of True.
            </param>
            <param name="newValue">
            If <format type="italics">replaceValue</format> is set to True, 
            <format type="italics">newValue</format> is the replacement value for pixels within the 
            <format type="italics">range</format>. If <format type="italics">replaceValue</format> is set to 
            False, the pixel values are not changed. The default value is 1.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
             
            ' Threshold the image in Viewer1 and store the result in i.
            Algorithms.Threshold (imageViewer1.Image, i, New Range(128, 255), True, 255)
             
            ' Threshold the image in Viewer1.
            ' Do the operation in-place.
            Algorithms.Threshold (imageViewer1.Image, imageViewer1.Image, New Range(128, 255), False)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
             
            // Threshold the image in Viewer1 and store the result in i.
            Algorithms.Threshold(imageViewer1.Image, i, new Range(128, 255), true, 255);
             
            // Threshold the image in Viewer1.
            // Do the operation in-place.
            Algorithms.Threshold(imageViewer1.Image, imageViewer1.Image, new Range(128, 255), false);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Threshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ThresholdData)">
            <summary>
            Thresholds an image. The method sets pixels values outside of the given range to 0. The method sets 
            pixel values within the range to a given value or leaves the values unchanged.
            </summary>
            <param name="source">
            The image to threshold.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="thresholdData">
            The options to use to threshold the image.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. This method is optimized for MMX.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MultiThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ThresholdData})">
            <summary>
            Thresholds an image into multiple classes. The method classifies each pixel into the last threshold 
            range of which it is a member. If a pixel is not a member of any of the given ranges, the method 
            sets it to 0.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="thresholdData">
            The data required to perform the multithreshold.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images.
            <para>
            The threshold operations are performed in the order that the data is received from ThresholdData. 
            A pixel can be taken into account only once, even if the pixel is included in the threshold range 
            of two different thresholds.
            </para>
            	<para>
            For example, consider the following ThresholdData input:
            </para>
            	<list type="bullet">
            		<item>
            			<description>
            Item 1: ThresholdData.Range = (80, 150), UseNewValue = True, NewValue = 255	
            </description>
            		</item>
            		<item>
            			<description>
            Item 2: ThresholdData.Range = (120, 200), UseNewValue = False
            </description>
            		</item>
            	</list>
            	<para>
            This example shows two threshold ranges with an overlap between 120 and 150. Therefore, the 
            pixels between 120 and 150 are treated only by the second threshold. The following results occur 
            after execution of this method:
            </para>
            	<list type="bullet">
            		<item>
            			<description>
            Pixel values between 0 and 79 are replaced by 0.
            </description>
            		</item>
            		<item>
            			<description>
            Pixel values between 80 and 120 are replaced by 255.
            </description>
            		</item>
            		<item>
            			<description>
            Pixel values between 121 and 200 keep their original values.
            </description>
            		</item>
            		<item>
            			<description>
            Pixel values greater than 200 are set to 0.
            </description>
            		</item>
            	</list>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            Dim i As New VisionImage
            Dim thresholdData As Collection(Of ThresholdData)
             
            'AutoThreshold the image in Viewer1 into 3 classes
            'Store the result in i
            thresholdData = Algorithms.AutoThreshold (imageViewer1.Image, i, 3)
                
            'Use ThresholdData result to MultiThreshold the Viewer inplace
            Algorithms.MultiThreshold (imageViewer1.Image, imageViewer1.Image, thresholdData)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            VisionImage i = new VisionImage();
            Collection&lt;ThresholdData&gt; thresholdData;
                
            //AutoThreshold the image in Viewer1 into 3 classes
            //Store the result in i
            thresholdData = Algorithms.AutoThreshold(imageViewer1.Image, i, 3);
              
            //Use ThresholdData result to MultiThreshold the Viewer inplace
            Algorithms.MultiThreshold(imageViewer1.Image, imageViewer1.Image, thresholdData);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.AutoThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Automatically thresholds an image into multiple classes.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting U8 image.
            </param>
            <returns>
            A collection of ThresholdData objects that specifies the threshold ranges. On failure, an exception is thrown.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.AutoThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32)">
            <summary>
            Automatically thresholds an image into multiple classes.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting U8 image.
            </param>
            <param name="numberOfClasses">
            The number of classes into which to threshold the image. Valid values range from 2 to 256.
            </param>
            <returns>
            A collection of ThresholdData objects that specifies the threshold ranges. On failure, an exception is thrown.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.AutoThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Analysis.ThresholdMethod)">
            <summary>
            Automatically thresholds an image into multiple classes.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting U8 image.
            </param>
            <param name="numberOfClasses">
            The number of classes into which to threshold the image. Valid values range from 2 to 256.
            </param>
            <param name="method">
            Specifies the threshold method to use if numberOfClasses is 2. The method ignores this parameter if numberOfClasses is not 2.
            </param>
            <returns>
            A collection of ThresholdData objects that specifies the threshold ranges. On failure, an exception is thrown.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.AutoThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Analysis.ThresholdMethod,NationalInstruments.Vision.VisionImage)">
            <summary>
            Automatically thresholds an image into multiple classes.
            </summary>
            <param name="source">
            The image to process.
            </param>
            <param name="destination">
            The resulting U8 image.
            </param>
            <param name="numberOfClasses">
            The number of classes into which to threshold the image. Valid values range from 2 to 256.
            </param>
            <param name="method">
            A <see cref="T:NationalInstruments.Vision.Analysis.ThresholdMethod" crefType="Unqualified"/> value that specifies the threshold method to use if numberOfClasses is 2. The method ignores this parameter if numberOfClasses is not 2.
            </param>
            <param name="mask">
            Specifies the region in which the method computes the <format type="italics">method</format>.The method processes only those pixels in the image whose corresponding pixels in the mask are non-zero. Do not set this parameter if you want to calculate the <format type="italics">method</format> for the entire image.
            </param>
            <returns>
            A collection of ThresholdData objects that specifies the threshold ranges. On failure, an exception is thrown.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim ThresholdData(,) As Single 
             
            'AutoThreshold the image in Viewer1 into 3 classes 
            'Store the result in i 
            Algorithms.AutoThreshold(imageViewer1.Image, i, 3, ThresholdMethod.Clustering, ThesholdData)
             
            'Use AutoThreshold result to MultiThreshold the Viewer inplace 
            Algorithms.MultiThreshold(imageViewer1.Image, imageViewer1.Image, ThresholdData)
             
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            float[,] ThresholdData = null;
                
            //AutoThreshold the image in Viewer1 into 3 classes
            //Store the result in i
            Algorithms.AutoThreshold(imageViewer1.Image, i, 3, ThresholdMethod.Clustering, ThesholdData);
                
            //Use AutoThreshold result to MultiThreshold the Viewer inplace
            Algorithms.MultiThreshold(imageViewer1.Image, imageViewer1.Image, ThresholdData);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LocalThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Automatically thresholds an image into a binary image based on the requested local adaptive thresholding method.
            </summary>
            <param name="source">
            The image to threshold.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            Use this method with U8 and I16 images. All of the images you pass to this method must be of the same type.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LocalThreshold(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.LocalThresholdOptions)">
            <summary>
            Automatically thresholds an image into a binary image based on the requested local adaptive thresholding method.
            </summary>
            <param name="source">
            The image to threshold.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="options">
            Specifies the options to use to perform the local threshold.
            </param>
            <remarks>
            Use this method with U8 and I16 images. All of the images you pass to this method must be of the same type.
            The window size you specify in <format type="italics">options</format> should be sized as large as 
            possible but small enough that each window contains pixels under similar lighting conditions. 
            This method will produce inconsistent results for windows that contain uniform pixel values.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Do a local threshold on the image in viewer1
            Algorithms.LocalThreshold (imageViewer1.Image, imageViewer1.Image)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            'Do a local threshold on the image in viewer1
            Algorithms.LocalThreshold(imageViewer1.Image, imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MagicWand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour)">
            <summary>
            Creates an image mask by extracting a region surrounding a reference pixel, called the origin, and 
            using a tolerance (+ or -) of intensity variations based on this reference pixel. Using this origin, 
            the method searches for its neighbors with an intensity that equals or falls within the tolerance 
            value of the point of reference. The resulting image is binary.
            </summary>
            <param name="source">
            The source image containing the particle to mask.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="point">
            The origin.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">destination</format> must be 
            a U8 image. If <format type="italics">source</format> and <format type="italics">destination</format> 
            are the same image, then <format type="italics">source</format> must be a U8 image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MagicWand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Creates an image mask by extracting a region surrounding a reference pixel, called the origin, and 
            using a tolerance (+ or -) of intensity variations based on this reference pixel. Using this origin, 
            the method searches for its neighbors with an intensity that equals or falls within the tolerance 
            value of the point of reference. The resulting image is binary.
            </summary>
            <param name="source">
            The source image containing the particle to mask.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="point">
            The ROI containing the origin.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">destination</format> must be 
            a U8 image. If <format type="italics">source</format> and <format type="italics">destination</format> 
            are the same image, then <format type="italics">source</format> must be a U8 image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MagicWand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.Double)">
            <summary>
            Creates an image mask by extracting a region surrounding a reference pixel, called the origin, and 
            using a tolerance (+ or -) of intensity variations based on this reference pixel. Using this origin, 
            the method searches for its neighbors with an intensity that equals or falls within the tolerance 
            value of the point of reference. The resulting image is binary.
            </summary>
            <param name="source">
            The source image containing the particle to mask.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="point">
            The origin.
            </param>
            <param name="tolerance">
            Specifies the pixel value tolerance that the method uses to determine whether neighbors of the reference 
            point are part of the particle. The default is 20.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">destination</format> must be 
            a U8 image. If <format type="italics">source</format> and <format type="italics">destination</format> 
            are the same image, then <format type="italics">source</format> must be a U8 image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MagicWand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,System.Double)">
            <summary>
            Creates an image mask by extracting a region surrounding a reference pixel, called the origin, and 
            using a tolerance (+ or -) of intensity variations based on this reference pixel. Using this origin, 
            the method searches for its neighbors with an intensity that equals or falls within the tolerance 
            value of the point of reference. The resulting image is binary.
            </summary>
            <param name="source">
            The source image containing the particle to mask.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="point">
            The ROI containing the origin.
            </param>
            <param name="tolerance">
            Specifies the pixel value tolerance that the method uses to determine whether neighbors of the reference 
            point are part of the particle. The default is 20.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">destination</format> must be 
            a U8 image. If <format type="italics">source</format> and <format type="italics">destination</format> 
            are the same image, then <format type="italics">source</format> must be a U8 image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MagicWand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.Double,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Creates an image mask by extracting a region surrounding a reference pixel, called the origin, and 
            using a tolerance (+ or -) of intensity variations based on this reference pixel. Using this origin, 
            the method searches for its neighbors with an intensity that equals or falls within the tolerance 
            value of the point of reference. The resulting image is binary.
            </summary>
            <param name="source">
            The source image containing the particle to mask.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="point">
            The origin.
            </param>
            <param name="tolerance">
            Specifies the pixel value tolerance that the method uses to determine whether neighbors of the reference 
            point are part of the particle. The default is 20.
            </param>
            <param name="connectivity">Set this parameter to Connectivity8 to use connectivity-8 to determine 
            whether particles are touching. Set this parameter to Connectivity4 to use connectivity-4 to 
            determine whether particles are touching. The default is Connectivity8. Refer to the 
            <format type="italics">NI Vision Concepts Help</format> for more information about connectivity.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">destination</format> must be 
            a U8 image. If <format type="italics">source</format> and <format type="italics">destination</format> 
            are the same image, then <format type="italics">source</format> must be a U8 image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MagicWand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,System.Double,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Creates an image mask by extracting a region surrounding a reference pixel, called the origin, and 
            using a tolerance (+ or -) of intensity variations based on this reference pixel. Using this origin, 
            the method searches for its neighbors with an intensity that equals or falls within the tolerance 
            value of the point of reference. The resulting image is binary.
            </summary>
            <param name="source">
            The source image containing the particle to mask.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="point">
            The ROI containing the origin.
            </param>
            <param name="tolerance">
            Specifies the pixel value tolerance that the method uses to determine whether neighbors of the reference 
            point are part of the particle. The default is 20.
            </param>
            <param name="connectivity">Set this parameter to Connectivity8 to use connectivity-8 to determine 
            whether particles are touching. Set this parameter to Connectivity4 to use connectivity-4 to 
            determine whether particles are touching. The default is Connectivity8. Refer to the 
            <format type="italics">NI Vision Concepts Help</format> for more information about connectivity.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">destination</format> must be 
            a U8 image. If <format type="italics">source</format> and <format type="italics">destination</format> 
            are the same image, then <format type="italics">source</format> must be a U8 image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MagicWand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,System.Double,NationalInstruments.Vision.Analysis.Connectivity,System.Double)">
            <summary>
            Creates an image mask by extracting a region surrounding a reference pixel, called the origin, and 
            using a tolerance (+ or -) of intensity variations based on this reference pixel. Using this origin, 
            the method searches for its neighbors with an intensity that equals or falls within the tolerance 
            value of the point of reference. The resulting image is binary.
            </summary>
            <param name="source">
            The source image containing the particle to mask.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="point">
            The ROI containing the origin.
            </param>
            <param name="tolerance">
            Specifies the pixel value tolerance that the method uses to determine whether neighbors of the reference 
            point are part of the particle. The default is 20.
            </param>
            <param name="connectivity">Set this parameter to Connectivity8 to use connectivity-8 to determine 
            whether particles are touching. Set this parameter to Connectivity4 to use connectivity-4 to 
            determine whether particles are touching. The default is Connectivity8. Refer to the 
            <format type="italics">NI Vision Concepts Help</format> for more information about connectivity.
            </param>
            <param name="replaceValue">
            The value to which the method sets pixels in the selected particle. The method sets pixels outside 
            the particle to 0. This parameter has a default value of 1.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">destination</format> must be 
            a U8 image. If <format type="italics">source</format> and <format type="italics">destination</format> 
            are the same image, then <format type="italics">source</format> must be a U8 image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Private Sub CWIMAQViewer1_RegionsChanged(Count As Variant)
                If Count &gt;= 1 Then
                    If CWIMAQViewer1.Regions(1).Shape = cwimaqRegionPoint Then
                        CWIMAQVision1.MagicWand2 CWIMAQViewer1.Image, CWIMAQViewer2.Image, CWIMAQViewer1.Regions(1), , , 255
                    End If
                End If
            End Sub
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MagicWand(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.Double,NationalInstruments.Vision.Analysis.Connectivity,System.Double)">
            <summary>
            Creates an image mask by extracting a region surrounding a reference pixel, called the origin, and 
            using a tolerance (+ or -) of intensity variations based on this reference pixel. Using this origin, 
            the method searches for its neighbors with an intensity that equals or falls within the tolerance 
            value of the point of reference. The resulting image is binary.
            </summary>
            <param name="source">
            The source image containing the particle to mask.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="point">
            The origin.
            </param>
            <param name="tolerance">
            Specifies the pixel value tolerance that the method uses to determine whether neighbors of the reference 
            point are part of the particle. The default is 20.
            </param>
            <param name="connectivity">Set this parameter to Connectivity8 to use connectivity-8 to determine 
            whether particles are touching. Set this parameter to Connectivity4 to use connectivity-4 to 
            determine whether particles are touching. The default is Connectivity8. Refer to the 
            <format type="italics">NI Vision Concepts Help</format> for more information about connectivity.
            </param>
            <param name="replaceValue">
            The value to which the method sets pixels in the selected particle. The method sets pixels outside 
            the particle to 0. This parameter has a default value of 1.
            </param>
            <remarks>
            Use this method with U8, I16, and Single images. <format type="italics">destination</format> must be 
            a U8 image. If <format type="italics">source</format> and <format type="italics">destination</format> 
            are the same image, then <format type="italics">source</format> must be a U8 image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Do a magic wand operation on the ROI in viewer1, if it's a point.
            If imageViewer1.Roi.Count = 1 AndAlso imageViewer1.Roi(0).Type = ContourType.Point Then
                Algorithms.MagicWand (imageViewer1.Image, imageViewer2.Image, New PointContour (), 20, 
            Connectivity.Connectivity8, 255)
            End If
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Do a magic wand operation on the ROI in viewer1, if it's a point.
            if (imageViewer1.Roi.Count == 1 &amp;&amp; imageViewer1.Roi[0].Type == ContourType.Point) {
               Algorithms.MagicWand(imageViewer1.Image, imageViewer2.Image, new PointContour(), 20, 
            Connectivity.Connectivity8, 255);
            }
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.GetFileInformation(System.String)">
            <summary>
            Returns information regarding the contents of an image file. You can retrieve information from the following 
            image file formats only: AIPD, BMP, JPEG, JPEG2000, PNG, and TIFF.
            </summary>
            <param name="fileName">
            The name of the file from which the method gets information.
            </param>
            <returns>
            Information about the file, such as calibration information, height, width, and image type.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim filename As String
             
            'Set the filename in the variable named filename
             
            'Get the file information
            Algorithms.GetFileInformation (filename)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            string filename;
               
            //Set the filename in the variable named filename
               
            //Get the file information
            Algorithms.GetFileInformation(filename);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ComplexAttenuate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>Attenuates the frequencies of a complex image.
            </summary>
            <param name="source">The source image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">destination</format> must be Complex images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ComplexAttenuate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.AttenuateMode)">
            <summary>Attenuates the frequencies of a complex image.
            </summary>
            <param name="source">The source image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <param name="attenuateMode">Determines which frequencies to attenuate. Set this parameter to <see cref="F:NationalInstruments.Vision.Analysis.AttenuateMode.High" crefType="Unqualified"/> to attenuate the high frequencies or <see cref="F:NationalInstruments.Vision.Analysis.AttenuateMode.Low" crefType="Unqualified"/> to attenuate the low frequencies.
            </param>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">destination</format> must be Complex images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Make i a Complex image
            Dim i As New VisionImage(ImageType.Complex)
            'Attenuate the frequencies of the Complex image in Viewer1.
            'Store the result in i.
            Algorithms.ComplexAttenuate (imageViewer1.Image, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Make i a Complex image
            VisionImage i = new VisionImage(ImageType.Complex);
            //Attenuate the frequencies of the Complex image in Viewer1.
            //Store the result in i.
            Algorithms.ComplexAttenuate(imageViewer1.Image, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ComplexConjugate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the conjugate of a complex image, converting the complex pixel data (z = a + ib) into (z = a - ib).
            </summary>
            <param name="source">The source image.
            </param>
            <param name="destination">The resulting image.
            </param>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">destination</format> must be Complex images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Make i a Complex image
            Dim i As New VisionImage(ImageType.Complex)
            'Complete the conjugate of the Complex image in Viewer1.
            'Store the result in i.
            Algorithms.ComplexConjugate (imageViewer1.Image, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Make i a Complex image
            VisionImage i = new VisionImage(ImageType.Complex);
            //Complete the conjugate of the Complex image in Viewer1.
            //Store the result in i.
            Algorithms.ComplexConjugate(imageViewer1.Image, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.Fft(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the Fourier transform of an image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The complex image containing the resulting FFT image.
            </param>
            <remarks>
            	<format type="italics">source</format> must be an U8, I16, Single, or Complex image. <format type="italics">destination</format> 
            must be a Complex image. The image can be any size, but the method works faster if the image dimensions are in powers of 2. 
            The <format type="italics">source</format> image and <format type="italics">destination</format> image must be different to 
            perform this operation. This method is optimized for MMX.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            ' Make i a complex image.
            Dim i As New VisionImage(ImageType.Complex)
             
            ' Perform an FFT on the image in Viewer1 and store the resulting complex image in i.
            Algorithms.Fft (imageViewer1.Image, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Make i a complex image.
            VisionImage i = new VisionImage(ImageType.Complex);
               
            // Perform an FFT on the image in Viewer1 and store the resulting complex image in i.
            Algorithms.Fft(imageViewer1.Image, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ComplexFlipFrequency(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Transposes the high and low frequencies of a complex image. The method flips the high and low frequency components of an FFT image to produce a central, symmetric representation of the spatial frequencies.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            All images must be Complex.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Make i a Complex image
            Dim i As New VisionImage(ImageType.Complex)
            'Flip the frequencies of the Complex image in Viewer1.
            'Store the result in i.
            Algorithms.ComplexFlipFrequency (imageViewer1.Image, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Make i a Complex image
            VisionImage i = new VisionImage(ImageType.Complex);
            //Flip the frequencies of the Complex image in Viewer1.
            //Store the result in i.
            Algorithms.ComplexFlipFrequency(imageViewer1.Image, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.InverseFft(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Takes the inverse Fourier transform of an image.
            </summary>
            <param name="source">
            The image whose inverse Fourier transform the method takes. 
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            	<format type="italics">source</format> must be a Complex image. <format type="italics">destination</format>
            must be a U8, I16, SGL, or Complex image. <format type="italics">source</format> and 
            <format type="italics">destination</format> must be different to perform this operation.
            <para>
            This method uses a buffer equal to the size of the complex image. An 8-bit image with a resolution of 
            256 x 256 pixels uses 64 KB of memory. The FFT associated with this image requires eight times the memory, 
            or 512 KB. The calculation of the inverse FFT also requires a temporary buffer of 512 KB. Therefore, the 
            total memory necessary for this operation is 1080 KB.</para>
            	<para>
            This method is optimized for MMX.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This example assumes that the image in Viewer1 is a complex image.
            Dim i As New VisionImage
             
            'Perform an inverse FFT on the image in Viewer1.
            'Store the result in i.
            Algorithms.InverseFFT (imageViewer1.Image, i)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //This example assumes that the image in Viewer1 is a complex image.
             
            VisionImage i = new VisionImage();
                
            //Perform an inverse FFT on the image in Viewer1.
            //Store the result in i.
            Algorithms.InverseFFT(imageViewer1.Image, i);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ComplexTruncate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Truncates the frequencies of a complex image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <remarks>
            All images must be Complex.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ComplexTruncate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.TruncateMode)">
            <summary>
            Truncates the frequencies of a complex image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="truncateMode">Determines which frequencies are truncated. Set this parameter to <see cref="F:NationalInstruments.Vision.Analysis.TruncateMode.High" crefType="Unqualified"/> to truncate the high frequencies or <see cref="F:NationalInstruments.Vision.Analysis.TruncateMode.Low" crefType="Unqualified"/> to truncate the low frequencies.
            The default is Low.
            </param>
            <remarks>
            All images must be Complex.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ComplexTruncate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.TruncateMode,System.Double)">
            <summary>
            Truncates the frequencies of a complex image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image.
            </param>
            <param name="truncateMode">Determines which frequencies are truncated. Set this parameter to <see cref="F:NationalInstruments.Vision.Analysis.TruncateMode.High" crefType="Unqualified"/> to truncate the high frequencies or <see cref="F:NationalInstruments.Vision.Analysis.TruncateMode.Low" crefType="Unqualified"/> to truncate the low frequencies.
            The default is Low.</param>
            <param name="ratioToKeep">The percentage of the frequencies retained within a Fourier transformed (complex) image. The default value is 10 percent. The percentage works in conjunction with the length of the diagonal of the FFT image and the parameter <format type="italics">truncateMode</format>. For example, if you set <format type="italics">truncateMode</format> to <see cref="F:NationalInstruments.Vision.Analysis.TruncateMode.Low" crefType="Unqualified"/> and set <format type="italics">ratioToKeep</format> to 10 percent, the method retains 10 percent of the frequencies starting from the center (low frequencies). If you set <format type="italics">truncateMode</format> to <see cref="F:NationalInstruments.Vision.Analysis.TruncateMode.High" crefType="Unqualified"/> and set <format type="italics">ratioToKeep</format> to 10 percent, the method retains 10 percent of the frequencies starting from the outer periphery.
            The default is 10.0.
            </param>
            <remarks>
            All images must be Complex.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Make i a Complex image
            Dim i As New VisionImage(ImageType.Complex)
            'Truncate the frequencies of the Complex image in Viewer1 at 25 percent.
            'Store the result in i.
            Algorithms.ComplexTruncate (imageViewer1.Image, i, TruncateMode.Low, 25)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Make i a Complex image
            VisionImage i = new VisionImage(ImageType.Complex);
            //Truncate the frequencies of the Complex image in Viewer1 at 25 percent.
            //Store the result in i.
            Algorithms.ComplexTruncate(imageViewer1.Image, i, TruncateMode.Low, 25);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractColorPlanes(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ColorMode,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Extracts the three planes (RGB, HSL, HSV, or HSI) from an image. The type of planes that you extract does not need 
            to be the same as the image type. For example, you can extract the Hue, Saturation, and Luminance plane from an 
            Rgb32 image.
            </summary>
            <param name="image">
            The color image from which the method extracts the color planes.
            </param>
            <param name="colorMode">
            The color spaced used for the operation.
            </param>
            <param name="plane1">
            The image for the first extracted plane. It contains either the red plane (RGB) or the hue plane 
            (HSL, HSV, or HSI).
            </param>
            <param name="plane2">
            The image for the second extracted plane. It contains either the green plane (RGB) or the saturation plane 
            (HSL, HSV, or HSI).
            </param>
            <param name="plane3">
            The image for the third extracted plane. It contains either the blue plane (RGB), the luminance plane (HSL), 
            the value plane (HSV), or the Intensity plane (HSI).
            </param>
            <remarks>
            The source image must be Rgb32, Hsl32, or RgbU64 and the destination images must be U8 for Rgb32 and Hsl32 
            and I16 for RgbU64. Only the red, green, or blue plane can be extracted from RgbU64 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            ' This example assumes that the image in Viewer1 is an Rgb32 image.
            Dim red As New VisionImage
            Dim green As New VisionImage
            Dim blue As New VisionImage
            Dim hue As New VisionImage
            Dim saturation As New VisionImage
            Dim luminance As New VisionImage
            Dim value As New VisionImage
            Dim intensity As New VisionImage
             
            ' Extract the red, green and blue planes from the image in Viewer1.
            Algorithms.ExtractColorPlanes (imageViewer1.Image, ColorMode.Rgb, red, green, blue)
             
            ' Extract the hue, saturation and luminance planes from the image in Viewer1.
            Algorithms.ExtractColorPlanes (imageViewer1.Image, ColorMode.Hsl, hue, saturation, luminance)
             
            ' Extract the hue, saturation, and intensity planes from the image in Viewer1.
            Algorithms.ExtractColorPlanes (imageViewer1.Image, ColorMode.Hsi, hue, saturation, intensity)
             
            ' Extract the hue, saturation, and value planes from the image in Viewer1.
            Algorithms.ExtractColorPlanes (imageViewer1.Image, ColorMode.Hsv, hue, saturation, value)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // This example assumes that the image in Viewer1 is an Rgb32 image.
             
            VisionImage red = new VisionImage();
            VisionImage green = new VisionImage();
            VisionImage blue = new VisionImage();
            VisionImage hue = new VisionImage();
            VisionImage saturation = new VisionImage();
            VisionImage luminance = new VisionImage();
            VisionImage value = new VisionImage();
            VisionImage intensity = new VisionImage();
                
            // Extract the red, green and blue planes from the image in Viewer1.
            Algorithms.ExtractColorPlanes(imageViewer1.Image, ColorMode.Rgb, red, green, blue);
                
            // Extract the hue, saturation and luminance planes from the image in Viewer1.
            Algorithms.ExtractColorPlanes(imageViewer1.Image, ColorMode.Hsl, hue, saturation, luminance);
                
            // Extract the hue, saturation, and intensity planes from the image in Viewer1.
            Algorithms.ExtractColorPlanes(imageViewer1.Image, ColorMode.Hsi, hue, saturation, intensity);
                
            // Extract the hue, saturation, and value planes from the image in Viewer1.
            Algorithms.ExtractColorPlanes(imageViewer1.Image, ColorMode.Hsv, hue, saturation, value);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReplaceColorPlanes(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ColorMode,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Replaces one or more image planes from a color image (RGB, HSL, HSV, or HSI). The method replaces 
            only the planes supplied as input. If all three planes are supplied, the source image is ignored, 
            and only the destination image is used. The image is resized to the dimensions of the planes passed 
            on input. Therefore, their sizes must be identical. If one or two planes are supplied, the planes 
            must have the same dimension as the source image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="colorMode">
            The color space in which the function replaces planes. 
            </param>
            <param name="plane1">
            The first plane of replacement data. For Rgb32 and Hsl32 images, the plane is a VisionImage object 
            of type U8 that contains either the red plane (RGB) or the hue plane (HSL, HSV, or HSI). For 
            RgbU64 images, the plane is a VisionImage of type I16 that contains the red plane (RGB). Pass null or Nothing for 
            this parameter if you do not want to replace the red or hue plane.
            </param>
            <param name="plane2">
            The second plane of replacement data. For Rgb32 and Hsl32 images, the plane is a VisionImage object 
            of type U8 that contains either the green plane (RGB) or the saturation plane (HSL, HSV, or HSI). 
            For RgbU64 images, the plane is a VisionImage of type I16 that contains the green plane (RGB). Pass null or Nothing for 
            this parameter if you do not want to replace the green or saturation plane.
            </param>
            <param name="plane3">
            The second plane of replacement data. For Rgb32 and Hsl32 images, the plane is a VisionImage object of type 
            U8 that contains either the blue plane (RGB), the luminance plane (HSL), the value plane (HSV), or the 
            intensity plane (HSI). For RgbU64 images, the plane is a VisionImage of type I16 that contains the blue 
            plane (RGB). Pass null or Nothing for this parameter if you do not want to replace the blue, light, 
            value, or intensity plane.
            </param>
            <remarks>
            Use this method with Rgb32, Hsl32, and RgbU64 images. Only RGB planes can be replaced in an RgbU64 image.
            All source images must be the same size.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstrument.Vision
            Imports NationalInstrument.Vision.Analysis
             
            Dim redPlane As New VisionImage
            'Only replace the red plane of the image in viewer1.
            Algorithms.ReplaceColorPlanes (imageViewer1.Image, imageViewer1.Image, ColorMode.Rgb, redPlane, Nothing, Nothing)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstrument.Vision.Analysis;
             
            VisionImage redPlane = new VisionImage();
            // Only replace the red plane of the image in viewer1.
            Algorithms.ReplaceColorPlanes(imageViewer1.Image, imageViewer1.Image, ColorMode.Rgb, redPlane, null, null);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ArrayToComplexPlane(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Single[0:,0:])">
            <summary>
            Replaces a plane of a complex image with the given array of pixel values. 
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="newPixels">
            The 2D array of pixel values. This array must be the same size as source image.
            </param>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">destination</format> must be complex images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ArrayToComplexPlane(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Single[0:,0:],NationalInstruments.Vision.ComplexPlane)">
            <summary>
            Replaces a plane of a complex image with the given array of pixel values. 
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="newPixels">
            The 2D array of pixel values. This array must be the same size as source image.
            </param>
            <param name="plane">
            The plane to replace. Set this parameter to <see cref="F:NationalInstruments.Vision.ComplexPlane.Real" crefType="Unqualified"/> to replace the real plane or <see cref="F:NationalInstruments.Vision.ComplexPlane.Imaginary" crefType="Unqualified"/> to replace the imaginary plane.
            </param>
            <remarks>
            	<format type="italics">source</format> and <format type="italics">destination</format> must be complex images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
            Dim RealArray(,) As Single
            Dim ImaginaryArray(,) As Single
             
            'Do something here to populate RealArray and ImaginaryArray so that 
            'they are the same size as the image in imageViewer1
             
            'Replace the imaginary plane of the image in imageViewer1 with the data
            'stored in the array named ImaginaryArray.
            'Store the results in image i.
            Algorithms.ArrayToComplexPlane(imageViewer1.Image, i, ImaginaryArray, ComplexPlane.Imaginary)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
            float[,] realArray;
            float[,] imaginaryArray;
             
            //Do something here to populate realArray and imaginaryArray so that 
            //they are the same size as the image in imageViewer1
             
            //Replace the imaginary plane of the image in imageViewer1 with the data
            //stored in the array named imaginaryArray.
            //Store the results in image i.
            Algorithms.ArrayToComplexPlane(imageViewer1.Image, i, imaginaryArray, ComplexPlane.Imaginary);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractComplexPlane(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Extracts a plane from a complex image and places the plane into another image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image containing the extracted plane.
            </param>
            <remarks>
            Use this method with Complex images. The destination image must be a U8, I16, or Single image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractComplexPlane(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ComplexPlane)">
            <summary>
            Extracts a plane from a complex image and places the plane into another image.
            </summary>
            <param name="source">
            The source image.
            </param>
            <param name="destination">
            The resulting image containing the extracted plane.
            </param>
            <param name="plane">
            The plane to extract. The default is ComplexPlane.Real.
            </param>
            <remarks>
            Use this method with Complex images. The destination image must be a U8, I16, or Single image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This example assumes that the image in Viewer1 is a Complex image
            'and the image in Viewer2 is a Complex image.
             
            'Set the plane types to Single
            Dim r As New VisionImage(ImageType.Single)
            Dim i as New VisionImage(ImageType.Single)
                
            'Extract the real plane on the image in Viewer1 into r.
            Algorithms.ExtractComplexPlane (imageViewer1.Image, r, ComplexPlane.Real)
                
            'Extract the imaginary plane on the image in Viewer1 into i.
            Algorithms.ExtractComplexPlane (imageViewer1.Image, i, ComplexPlane.Imaginary)
                
            'Replace the real plane of Viewer2 with the data in r.
            Algorithms.ReplaceComplexPlane (r, imageViewer2.Image, ComplexPlane.Real)
                
            'Replace the imaginary plane of Viewer2 with the data in i.
            Algorithms.ReplaceComplexPlane (i, imageViewer2.Image, ComplexPlane.Imaginary)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //This example assumes that the image in Viewer1 is a Complex image
            //and the image in Viewer2 is a Complex image.
             
            // Set the plane type to Single
            VisionImage r = new VisionImage(ImageType.Single);
            VisionImage i = new VisionImage(ImageType.Single);
                
            //Extract the real plane on the image in Viewer1 into r.
            Algorithms.ExtractComplexPlane(imageViewer1.Image, r, ComplexPlane.Real);
                
            //Extract the imaginary plane on the image in Viewer1 into i.
            Algorithms.ExtractComplexPlane(imageViewer1.Image, i, ComplexPlane.Imaginary);
                
            //Replace the real plane of Viewer2 with the data in r.
            Algorithms.ReplaceComplexPlane(r, imageViewer2.Image, ComplexPlane.Real);
                
            //Replace the imaginary plane of Viewer2 with the data in i.
            Algorithms.ReplaceComplexPlane(i, imageViewer2.Image, ComplexPlane.Imaginary);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReplaceComplexPlane(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Replaces a plane of a complex image with the pixel values from a given image
            </summary>
            <param name="source">
            The image whose data the method modifies.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <remarks>
            	<format type="italics">source</format> must be a U8, I16, Single, or Complex image. 
            <format type="italics">destination</format> must be a Complex image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReplaceComplexPlane(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.ComplexPlane)">
            <summary>
            Replaces a plane of a complex image with the pixel values from a given image
            </summary>
            <param name="source">
            The image whose data the method modifies.
            </param>
            <param name="destination">
            The destination image.
            </param>
            <param name="plane">
            The complex image plane to replace. Set this value to ComplexPlane.Real or ComplexPlane.Imaginary. If 
            <format type="italics">source</format> is a Complex image, then this parameter also selects which plane 
            of the source image is used as the replacement.
            </param>
            <remarks>
            	<format type="italics">source</format> must be a U8, I16, Single, or Complex image. 
            <format type="italics">destination</format> must be a Complex image.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'This example assumes that the image in Viewer1 is a Complex image
            'and the image in Viewer2 is a Complex image.
             
            Dim r As New VisionImage
            Dim i As New VisionImage
                
            'Set the plane types to Single
            r.Type = ImageType.Single
            i.Type = ImageType.Single
                
            'Extract the real plane on the image in Viewer1 into r.
            Algorithms.ExtractComplexPlane (imageViewer1.Image, r, ComplexPlane.Real)
                
            'Extract the imaginary plane on the image in Viewer1 into i.
            Algorithms.ExtractComplexPlane (imageViewer1.Image, i, ComplexPlane.Imaginary)
                
            'Replace the real plane of Viewer2 with the data in r.
            Algorithms.ReplaceComplexPlane (r, imageViewer2.Image, ComplexPlane.Real)
              
            'Replace the imaginary plane of Viewer2 with the data in i.
            Algorithms.ReplaceComplexPlane (i, imageViewer2.Image, ComplexPlane.Imaginary)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //This example assumes that the image in Viewer1 is a Complex image
            //and the image in Viewer2 is a Complex image.
             
            VisionImage r = new VisionImage();
            VisionImage i = new VisionImage();
                
            //Set the plane types to Single
            r.Type = ImageType.Single;
            i.Type = ImageType.Single;
                
            //Extract the real plane on the image in Viewer1 into r.
            Algorithms.ExtractComplexPlane(imageViewer1.Image, r, ComplexPlane.Real);
                
            //Extract the imaginary plane on the image in Viewer1 into i.
            Algorithms.ExtractComplexPlane(imageViewer1.Image, i, ComplexPlane.Imaginary);
                
            //Replace the real plane of Viewer2 with the data in r.
            Algorithms.ReplaceComplexPlane(r, imageViewer2.Image, ComplexPlane.Real);
                
            //Replace the imaginary plane of Viewer2 with the data in i.
            Algorithms.ReplaceComplexPlane(i, imageViewer2.Image, ComplexPlane.Imaginary);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindLcdSegments(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour)">
            <summary>
            Calculates the region of interest of each digit from a rectangular area of interest around whole LCD and 
            electroluminescent indicators, which can contain multiple digits. Use this method first in a calibration phase. You can
            process the ROI with the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadLcd(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method.
            This method requires that all segments of the indicator are activated.
            </summary>
            <param name="image">
            The image containing the LCD. All segments of the LCD must be on.
            </param>
            <param name="rectangle">
            The rectangle containing the indicator.
            </param>
            <returns>
            A region of interest containing contours around each digit.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images. This method is designed for LCD and electroluminescent indicators. 
            It is resistant to light drift.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindLcdSegments(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Calculates the region of interest of each digit from a rectangular area of interest around whole LCD and 
            electroluminescent indicators, which can contain multiple digits. Use this method first in a calibration phase. You can
            process the ROI with the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadLcd(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method.
            This method requires that all segments of the indicator are activated.
            </summary>
            <param name="image">
            The image containing the LCD. All segments of the LCD must be on.
            </param>
            <param name="rectangle">
            The rectangle containing the indicator.
            </param>
            <returns>
            A region of interest containing contours around each digit.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images. This method is designed for LCD and electroluminescent 
            indicators. It is resistant to light drift.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindLcdSegments(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour,NationalInstruments.Vision.Analysis.LcdOptions)">
            <summary>
            Calculates the region of interest of each digit from a rectangular area of interest around whole LCD and 
            electroluminescent indicators, which can contain multiple digits. Use this method first in a calibration phase. You can
            process the ROI with the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadLcd(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method.
            This method requires that all segments of the indicator are activated.
            </summary>
            <param name="image">
            The image containing the LCD. All segments of the LCD must be on.
            </param>
            <param name="rectangle">
            The rectangle containing the indicator.
            </param>
            <param name="options">
            Controls how the method performs the search.
            </param>
            <returns>
            A region of interest containing contours around each digit.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images. This method is designed for LCD and electroluminescent 
            indicators. It is resistant to light drift.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindLcdSegments(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.LcdOptions)">
            <summary>
            Calculates the region of interest of each digit from a rectangular area of interest around whole LCD and 
            electroluminescent indicators, which can contain multiple digits. Use this method first in a calibration phase. You can
            process the ROI with the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadLcd(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)" crefType="Unqualified"/> method.
            This method requires that all segments of the indicator are activated.
            </summary>
            <param name="image">
            The image containing the LCD. All segments of the LCD must be on.
            </param>
            <param name="rectangle">
            The rectangle containing the indicator.
            </param>
            <param name="options">
            Controls how the method performs the search.
            </param>
            <returns>
            A region of interest containing contours around each digit.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images. This method is designed for LCD and electroluminescent 
            indicators. It is resistant to light drift.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            ' Assumes there is an image in Viewer1 with an ROI around the LCD.
            Dim LcdRoi As Roi = Algorithms.FindLcdSegments (imageViewer1.Image, imageViewer1.Roi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Assumes there is an image in Viewer1 with an ROI around the LCD.
            Roi lcdRoi = Algorithms.FindLcdSegments(imageViewer1.Image, imageViewer1.Roi);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadLcd(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Reads the numeric value of a seven-segment LCD. 
            </summary>
            <param name="image">
            The image containing the LCD to read. 
            </param>
            <param name="roi">
            A region of interest consisting of rectangles around each of the digits of the LCD. Generate this ROI by 
            calling the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.FindLcdSegments(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour)" crefType="Unqualified"/> method. 
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.LcdReport" crefType="Unqualified"/> object describing the state of the LCD.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ReadLcd(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.LcdOptions)">
            <summary>
            Reads the numeric value of a seven-segment LCD. 
            </summary>
            <param name="image">
            The image containing the LCD to read. 
            </param>
            <param name="roi">
            A region of interest consisting of rectangles around each of the digits of the LCD. Generate this ROI by 
            calling the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.FindLcdSegments(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.RectangleContour)" crefType="Unqualified"/> method. 
            </param>
            <param name="options">
            Controls how the LCD is read.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.LcdReport" crefType="Unqualified"/> object describing the state of the LCD.
            </returns>
            <remarks>
            Use this method with U8, I16, and Single images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim LcdRoi As Roi
             
            'Assumes the LcdRoi has been populated with FindLcdSegments.
            Dim Report As LcdReport = Algorithms.ReadLcd (imageViewer1.Image, LcdRoi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            Roi lcdRoi;
             
            // Assumes the lcdRoi has been populated with FindLcdSegments.
            LcdReport report = Algorithms.ReadLcd(imageViewer1.Image, lcdRoi);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RoiToMask(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Transforms a region of interest (ROI) into a mask image. 
            </summary>
            <param name="destination">
            The resulting mask image. 
            </param>
            <param name="roi">
            The ROI to transform.
            </param>
            <returns>
            	<format type="bold">true</format> if the ROI is a true representation of the mask.
            </returns>
            <remarks>
            	<format type="italics">destination</format> must be a U8 image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RoiToMask(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.PixelValue)">
            <summary>
            Transforms a region of interest (ROI) into a mask image. 
            </summary>
            <param name="destination">
            The resulting mask image. 
            </param>
            <param name="roi">
            The ROI to transform.
            </param>
            <param name="fillValue">
            The pixel value of the mask. All pixels inside the region of interest take this value.
            The default is 255.
            </param>
            <returns>
            	<format type="bold">true</format> if the ROI is a true representation of the mask.
            </returns>
            <remarks>
            	<format type="italics">destination</format> must be a U8 image.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RoiToMask(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.PixelValue,NationalInstruments.Vision.VisionImage)">
            <summary>
            Transforms a region of interest (ROI) into a mask image. 
            </summary>
            <param name="destination">
            The resulting mask image. 
            </param>
            <param name="roi">
            The ROI to transform.
            </param>
            <param name="fillValue">
            The pixel value of the mask. All pixels inside the region of interest take this value.
            The default is 255.
            </param>
            <param name="imageModel">
            An optional template for the destination mask image. This parameter can be any image type that NI Vision 
            supports. If you supply an <format type="italics">imageModel</format>, the mask image is the size of the 
            model. If you set <format type="italics">imageModel</format> to null or Nothing, the size of mask is 
            equal to the size of the bounding rectangle of the ROI, which reduces the amount of memory used. 
            The method sets the offset of the mask image to reflect the real position of the ROI. 
            </param>
            <returns>
            	<format type="bold">true</format> if the ROI is a true representation of the mask.
            </returns>
            <remarks>
            	<format type="italics">destination</format> must be a U8 image.
            <para>
            You can use this method in two ways. The simplest technique is to supply the 
            <format type="italics">imageModel</format> parameter. In this case you can use the source image, in 
            which the ROI was drawn, as a template for the final destination image by supplying 
            <format type="italics">imageModel</format>. The output image automatically acquires the size of the 
            image and location of the ROI as found in the original source image.
            </para>
            	<para>
            However, you do not have to supply the <format type="italics">imageModel</format> parameter. In this 
            case the ROI requires an offset that is determined automatically from the upper-left corner of the 
            bounding rectangle described by the ROI. These offset values are automatically set to the image mask.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim i As New VisionImage
                
            'Convert the ROI selected on Viewer1 into a mask and
            'store the result in i.
            Algorithms.RoiToMask (imageViewer1.Image, imageViewer1.Roi)
                
            'Convert the ROI selected on Viewer1 into a mask using
            'the image in Viewer1 as a model and store the resulting
            'mask image in the image in Viewer2.
            Algorithms.RoiToMask (imageViewer2.Image, imageViewer1.Roi, New PixelValue (255), imageViewer1.Image)
            </code>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            VisionImage i = new VisionImage();
                
            //Convert the ROI selected on Viewer1 into a mask and
            //store the result in i.
            Algorithms.RoiToMask(imageViewer1.Image, imageViewer1.Roi);
                
            //Convert the ROI selected on Viewer1 into a mask using
            //the image in Viewer1 as a model and store the resulting
            //mask image in the image in Viewer2.
            Algorithms.RoiToMask(imageViewer2.Image, imageViewer1.Roi, new PixelValue(255), imageViewer1.Image);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MaskToRoi(NationalInstruments.Vision.VisionImage)">
            <summary>
            Transforms a mask image into a region of interest (ROI) descriptor. 
            </summary>
            <param name="mask">
            The mask image that the method transforms into an ROI. <format type="italics">mask</format> must be a U8 image.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.Vision.Analysis.MaskToRoiReport" crefType="Unqualified"/> object that contains the
            ROI and indicates whether the ROI is a true representation of the mask.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Get an ROI from the mask image in viewer1.
            Dim roi As Roi = Algorithms.MaskToRoiReport (imageViewer1.Image).Roi
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Get an ROI from the mask image in viewer1.
            Roi roi = Algorithms.MaskToRoiReport(imageViewer1.Image).Roi;
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.RoiProfile(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Calculates the profile of the pixels along the edge of each contour in a region of interest (ROI). 
            </summary>
            <param name="image">
            The image from which the method gets the profile. 
            </param>
            <param name="roi">
            The ROI describing the pixels about which the method gets information. 
            </param>
            <returns>
            An <see cref="T:NationalInstruments.Vision.Analysis.RoiProfileReport" crefType="Unqualified"/> object containing
            information about the points along the edge of each contour in the ROI.
            </returns>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Find the profile on the image in Viewer1 along
            'the boundary of the regions selected on Viewer1.
            Dim Report As RoiProfileReport = Algorithms.RoiProfile (imageViewer1.Image, imageViewer1.Roi)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            //Find the profile on the image in Viewer1 along
            //the boundary of the regions selected on Viewer1.
            RoiProfileReport report = Algorithms.RoiProfile(imageViewer1.Image, imageViewer1.Roi);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.TransformRoi(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            Rotates and translates a region of interest (ROI) from one coordinate system to another coordinate 
            system within an image. 
            </summary>
            <param name="roi">
            The ROI to transform.
            </param>
            <param name="transform">
            Specifies how to transform pixel coordinates based on the difference between the reference 
            coordinate system and the measurement coordinate system.
            </param>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            Dim coordinateSystem As New CoordinateTransform
             
            ' Transform the regions on Viewer1 and store the result in the ROI.
            Dim roi As New Roi(imageViewer1.Roi)
            Algorithms.TransformRoi (roi, coordinateSystem)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            CoordinateTransform coordinateSystem = new CoordinateTransform();
             
            // Transform the regions on Viewer1 and store the result in the ROI.
            Roi roi = new Roi(imageViewer1.Roi);
            Algorithms.TransformRoi(roi, coordinateSystem);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LabelToRoi(NationalInstruments.Vision.VisionImage)">
            <summary>
            Converts a label image into an ROI. Multiple contours are added to an ROI if more than 
            one particle is present for the respective label.
            </summary>
            <param name="image">
            The image containing the image label that is transformed into a region of interest. 
            </param>
            <returns>
            	<format type="bold">LabelToRoiReport</format> having collection of ROIs, labels and 
            	TooManyVectors Array.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LabelToRoi(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{System.UInt32})">
            <summary>
            Converts a label image into an ROI. Multiple contours are added to an ROI if more than 
            one particle is present for the respective label.
            </summary>
            <param name="image">
            The image containing the image label that is transformed into a region of interest. 
            </param>
            <param name="labelsIn">
            LabelsIn is a collection of label numbers. The label number must match the labels 
            in the label image.
            </param>
            <returns>
            	<format type="bold">LabelToRoiReport</format> having collection of ROIs, labels and 
            	TooManyVectors Array.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LabelToRoi(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{System.UInt32},System.Int32)">
            <summary>
            Converts a label image into an ROI. Multiple contours are added to an ROI if more than 
            one particle is present for the respective label.
            </summary>
            <param name="image">
            The image containing the image label that is transformed into a region of interest. 
            </param>
            <param name="labelsIn">
            LabelsIn is a collection of label numbers. The label number must match the labels 
            in the label image.
            </param>
            <param name="maxNumberOfVectors">
            Max number of vectors in ROI is the limit of points that define the contour of a 
            region of interest. The default is 2500.
            </param>
            <returns>
            	<format type="bold">LabelToRoiReport</format> having collection of ROIs, labels and 
            	TooManyVectors Array.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LabelToRoi(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{System.UInt32},System.Int32,System.Boolean)">
            <summary>
            Converts a label image into an ROI. Multiple contours are added to an ROI if more than 
            one particle is present for the respective label.
            </summary>
            <param name="image">
            The image containing the image label that is transformed into a region of interest. 
            </param>
            <param name="labelsIn">
            LabelsIn is a collection of label numbers. The label number must match the labels 
            in the label image.
            </param>
            <param name="maxNumberOfVectors">
            Max number of vectors in ROI is the limit of points that define the contour of a 
            region of interest. The default is 2500.
            </param>
            <param name="isExternalEdges">
            It specifies whether only the external edges are transformed. The default is TRUE. 
            </param>
            <returns>
            	<format type="bold">LabelToRoiReport</format> having collection of ROIs, labels and 
            	TooManyVectors Array. The TooManyVectors is a Collection of bools to indicate 
            	specific cases where number of points in a contour exceeded the maximum limit
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment)">
            <summary>
            Compares a template image to an inspection image at a specified alignment.
            </summary>
            <param name="image">The image to inspect.
            </param>
            <param name="goldenTemplate">The golden template to compare against the inspection image.
            </param>
            <param name="defects">A reference to the destination image for bright and dark defects.
            </param>
            <param name="alignment">The location within the inspection image where the template image is located.
            </param>
            <remarks>
            Use one of the following methods of configuring the template image you want to use with this method:
            <list type="bullet">
            		<item>
            			<description>
            Load a previously saved template image that you created using the NI Vision Template Editor.
            <note type="note">
            To use the NI Vision Template Editor to configure a template image, click <format type="bold">Start<entity value="#0187"/>All Programs<entity value="#0187"/>National Instruments<entity value="#0187"/>Vision<entity value="#0187"/>Template Editor</format>
            				</note>
            			</description>
            		</item>
            		<item>
            			<description>
            Use a <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method to learn the golden template image.
            </description>
            		</item>
            	</list>
            	<para>
            Use this method with U8 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment)">
            <summary>
            Compares a template image to an inspection image at a specified alignment.
            </summary>
            <param name="image">The image to inspect.
            </param>
            <param name="goldenTemplate">The golden template to compare against the inspection image.
            </param>
            <param name="brightDefects">A reference to the destination image for bright defects.
            </param>
            <param name="darkDefects">A reference to the destination image for dark defects.
            </param>
            <param name="alignment">The location within the inspection image where the template image is located.
            </param>
            <remarks>
            Use one of the following methods of configuring the template image you want to use with this method:
            <list type="bullet">
            		<item>
            			<description>
            Load a previously saved template image that you created using the NI Vision Template Editor.
            <note type="note">
            To use the NI Vision Template Editor to configure a template image, click <format type="bold">Start<entity value="#0187"/>All Programs<entity value="#0187"/>National Instruments<entity value="#0187"/>Vision<entity value="#0187"/>Template Editor</format>
            				</note>
            			</description>
            		</item>
            		<item>
            			<description>
            Use a <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method to learn the golden template image.
            </description>
            		</item>
            	</list>
            	<para>
            Use this method with U8 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment,NationalInstruments.Vision.Analysis.InspectionOptions)">
            <summary>
            Compares a template image to an inspection image at a specified alignment.
            </summary>
            <param name="image">The image to inspect.
            </param>
            <param name="goldenTemplate">The golden template to compare against the inspection image.
            </param>
            <param name="defects">The destination image for bright and dark defects.
            </param>
            <param name="alignment">The location within the inspection image where the template image is located.
            </param>
            <param name="options">An <see cref="T:NationalInstruments.Vision.Analysis.InspectionOptions" crefType="Unqualified"/> object that specifies the options to use for comparison.
            </param>
            <remarks>
            Use one of the following methods of configuring the template image you want to use with this method:
            <list type="bullet">
            		<item>
            			<description>
            Load a previously saved template image that you created using the NI Vision Template Editor.
            <note type="note">
            To use the NI Vision Template Editor to configure a template image, click <format type="bold">Start<entity value="#0187"/>All Programs<entity value="#0187"/>National Instruments<entity value="#0187"/>Vision<entity value="#0187"/>Template Editor</format>
            				</note>
            			</description>
            		</item>
            		<item>
            			<description>
            Use a <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method to learn the golden template image.
            </description>
            		</item>
            	</list>
            	<para>
            Use this method with U8 images.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment,NationalInstruments.Vision.Analysis.InspectionOptions)">
            <summary>
            Compares a template image to an inspection image at a specified alignment.
            </summary>
            <param name="image">The image to inspect.
            </param>
            <param name="goldenTemplate">The golden template to compare against the inspection image.
            </param>
            <param name="brightDefects">A reference to the destination image for bright defects.
            </param>
            <param name="darkDefects">A reference to the destination image for dark defects.
            </param>
            <param name="alignment">The location within the inspection image where the template image is located.
            </param>
            <param name="options">An <see cref="T:NationalInstruments.Vision.Analysis.InspectionOptions" crefType="Unqualified"/> object that specifies the options to use for comparison.
            </param>
            <remarks>
            Use one of the following methods of configuring the template image you want to use with this method:
            <list type="bullet">
            		<item>
            			<description>
            Load a previously saved template image that you created using the NI Vision Template Editor.
            <note type="note">
            To use the NI Vision Template Editor to configure a template image, click <format type="bold">Start<entity value="#0187"/>All Programs<entity value="#0187"/>National Instruments<entity value="#0187"/>Vision<entity value="#0187"/>Template Editor</format>
            				</note>
            			</description>
            		</item>
            		<item>
            			<description>
            Use a <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method to learn the golden template image.
            </description>
            		</item>
            	</list>
            	<para>
            Use this method with U8 images.
            </para>
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Learn the golden template in viewer1.
            Algorithms.LearnGoldenTemplate (imageViewer1.Image)
            'Compare this template with the image in viewer2.
            Dim Defects As New VisionImage
            Algorithms.CompareGoldenTemplate (imageViewer2.Image, imageViewer1.Image, Defects, New InspectionAlignment ())
            'Find the number of bad pixels.
            Dim HistogramReport As HistogramReport = Algorithms.Histogram (Defects)
            Dim NumberOfBadPixels As Integer = HistogramReport.NumberOfPixels - HistogramReport.Histogram(0)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Learn the golden template in viewer1.
            Algorithms.LearnGoldenTemplate(imageViewer1.Image);
            // Compare this template with the image in viewer2.
            VisionImage defects = new VisionImage();
            Algorithms.CompareGoldenTemplate(imageViewer2.Image, imageViewer1.Image, defects, new InspectionAlignment());
            // Find the number of bad pixels.
            HistogramReport histogramReport = Algorithms.Histogram(defects);
            int numberOfBadPixels = histogramReport.NumberOfPixels - histogramReport.Histogram[0];
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the golden template image you are going to compare against when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment)" crefType="Unqualified"/> 
            method. This description data is appended to the input template image.
            </summary>
            <param name="image">
            The golden template image that you want to compare against during inspection.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour)">
            <summary>
            Creates a description of the golden template image you are going to compare against when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment)" crefType="Unqualified"/> 
            method. This description data is appended to the input template image.
            </summary>
            <param name="image">
            The golden template image that you want to compare against during inspection.
            </param>
            <param name="originOffset">
            Secifies the number of pixels the method shifts the origin of the template from the center of the 
            template image.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Creates a description of the golden template image you are going to compare against when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment)" crefType="Unqualified"/> 
            method. This description data is appended to the input template image.
            </summary>
            <param name="image">
            The golden template image that you want to compare against during inspection.
            </param>
            <param name="originOffset">
            The ROI containing the pixels the method shifts the origin of the template from the center of the 
            template image.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the golden template image you are going to compare against when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment)" crefType="Unqualified"/> 
            method. This description data is appended to the input template image.
            </summary>
            <param name="image">
            The golden template image that you want to compare against during inspection.
            </param>
            <param name="originOffset">
            The ROI containing the pixels the method shifts the origin of the template from the center of the 
            template image.
            </param>
            <param name="mask">
            An 8-bit image the same size as the template that specifies what regions and edges to ignore in the template. 
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
             
            'Learn the golden template in viewer1.
            Algorithms.LearnGoldenTemplate (imageViewer1.Image)
            'Compare this template with the image in viewer2.
            Dim Defects As New VisionImage
            Algorithms.CompareGoldenTemplate (imageViewer2.Image, imageViewer1.Image, Defects, New InspectionAlignment ())
            'Find the number of bad pixels.
            Dim HistogramReport As HistogramReport = Algorithms.Histogram (Defects)
            Dim NumberOfBadPixels As Integer = HistogramReport.NumberOfPixels - HistogramReport.Histogram(0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
             
            // Learn the golden template in viewer1.
            Algorithms.LearnGoldenTemplate(imageViewer1.Image);
            // Compare this template with the image in viewer2.
            VisionImage defects = new VisionImage();
            Algorithms.CompareGoldenTemplate(imageViewer2.Image, imageViewer1.Image, defects, new InspectionAlignment());
            // Find the number of bad pixels.
            HistogramReport histogramReport = Algorithms.Histogram(defects);
            int numberOfBadPixels = histogramReport.NumberOfPixels - histogramReport.Histogram[0];
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the golden template image you are going to compare against when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CompareGoldenTemplate(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.InspectionAlignment)" crefType="Unqualified"/> 
            method. This description data is appended to the input template image.
            </summary>
            <param name="image">
            The golden template image that you want to compare against during inspection.
            </param>
            <param name="originOffset">
            Secifies the number of pixels the method shifts the origin of the template from the center of the 
            template image.
            </param>
            <param name="mask">
            An 8-bit image the same size as the template that specifies what regions and edges to ignore in the template. 
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <param name="originOffset">
            Specifies the number of pixels the method shifts the origin of the template from the 
            center of the template image.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <param name="originOffset">
            Specifies the number of pixels the method shifts the origin of the template from the 
            center of the template image.
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to create the 
            template image.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <param name="originOffset">
            Specifies the number of pixels the method shifts the origin of the template from the 
            center of the template image.
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to create the 
            template image.
            </param>
            <param name="options">
            Advanced options for determining the information the algorithm learns about the geometric pattern. 
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions,NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <param name="originOffset">
            Specifies the number of pixels the method shifts the origin of the template from the 
            center of the template image.
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to create the 
            template image.
            </param>
            <param name="options">
            Advanced options for determining the information the algorithm learns about the geometric pattern. 
            </param>
            <param name="mask">
            An image, which is the same size as the template, that specifies where to search for edges in the 
            template.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.Double)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <param name="originOffset">
            Specifies the number of pixels the method shifts the origin of the template from the 
            center of the template image.
            </param>
            <param name="angleOffset">
            Specifies the angle, in degrees, the method shifts the template from the center of the image.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.Double,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <param name="originOffset">
            Specifies the number of pixels the method shifts the origin of the template from the 
            center of the template image.
            </param>
            <param name="angleOffset">
            Specifies the angle, in degrees, the method shifts the template from the center of the image.
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to create the 
            template image.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.Double,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <param name="originOffset">
            Specifies the number of pixels the method shifts the origin of the template from the 
            center of the template image.
            </param>
            <param name="angleOffset">
            Specifies the angle, in degrees, the method shifts the template from the center of the image.
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to create the 
            template image.
            </param>
            <param name="options">
            Advanced options for determining the information the algorithm learns about the geometric pattern. 
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.PointContour,System.Double,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions,NationalInstruments.Vision.VisionImage)">
            <summary>
            Creates a description of the template image you are going to look for when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method. This description data is appended to the input template image. During the matching step, 
            the description data is extracted from the template image and used to search for the template image 
            in the match image.
            </summary>
            <param name="template">
            The image about which the method learns pattern matching information. The method appends the 
            pattern matching information to this image. 
            </param>
            <param name="originOffset">
            Specifies the number of pixels the method shifts the origin of the template from the 
            center of the template image.
            </param>
            <param name="angleOffset">
            Specifies the angle, in degrees, the method shifts the template from the center of the image.
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to create the 
            template image.
            </param>
            <param name="options">
            Advanced options for determining the information the algorithm learns about the geometric pattern. 
            </param>
            <param name="mask">
            An image, which is the same size as the template, that specifies where to search for edges in the 
            template.
            </param>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Learn the geometric template in viewer1.
            'Set the center of the template to (5, 10).
            Algorithms.LearnGeometricPattern (imageViewer1.Image, New PointContour(5, 10), 0)
            'Match the template in viewer2, searching for 4 matches that could be rotated.
            Dim MatchOptions As New MatchGeometricPatternEdgeBasedOptions (GeometricMatchModes.ShiftInvariant + GeometricMatchModes.RotationInvariant, 4)
            Dim Matches As Collection(Of GeometricEdgeBasedPatternMatch)
            Matches = Algorithms.MatchGeometricPatternEdgeBased (imageViewer2.Image, imageViewer1.Image, New CurveOptions (), MatchOptions)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Learn the geometric template in viewer1.
            // Set the center of the template to (5, 10).
            Algorithms.LearnGeometricPattern(imageViewer1.Image, new PointContour(5, 10), 0);
            // Match the template in viewer2, searching for 4 matches that could be rotated.
            MatchGeometricPatternEdgeBasedOptions matchOptions = new MatchGeometricPatternEdgeBasedOptions(GeometricMatchModes.ShiftInvariant + GeometricMatchModes.RotationInvariant, 4);
            Collection&lt;GeometricEdgeBasedPatternMatch&gt; matches;
            matches = Algorithms.MatchGeometricPatternEdgeBased(imageViewer2.Image, imageViewer1.Image, new CurveOptions(), matchOptions);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Searches for areas in an image that match a given geometric template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method prior to using this method to ensure that the template image has been 
            configured for the geometric pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The template image to be located during the geometric matching process. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Searches for areas in an image that match a given geometric template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method prior to using this method to ensure that the template image has been 
            configured for the geometric pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The template image to be located during the geometric matching process. 
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to match the template image. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions)">
            <summary>
            Searches for areas in an image that match a given geometric template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method prior to using this method to ensure that the template image has been 
            configured for the geometric pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The template image to be located during the geometric matching process. 
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to match the template image. 
            </param>
            <param name="options">
            Describes how to search for the template image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Searches for areas in an image that match a given geometric template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method prior to using this method to ensure that the template image has been 
            configured for the geometric pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The template image to be located during the geometric matching process. 
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to match the template image. 
            </param>
            <param name="options">
            Describes how to search for the template image.
            </param>
            <param name="roi">
            Specifies the ROI within an image in which to search for the template image. Pass null or Nothing for this parameter to 
            search the entire image. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Searches for areas in an image that match a given geometric template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method prior to using this method to ensure that the template image has been 
            configured for the geometric pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The template image to be located during the geometric matching process. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Searches for areas in an image that match a given geometric template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method prior to using this method to ensure that the template image has been 
            configured for the geometric pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The template image to be located during the geometric matching process. 
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to match the template image. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions)">
            <summary>
            Searches for areas in an image that match a given geometric template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method prior to using this method to ensure that the template image has been 
            configured for the geometric pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The template image to be located during the geometric matching process. 
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to match the template image. 
            </param>
            <param name="options">
            Describes how to search for the template image.
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch" crefType="Unqualified"/> 
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions,NationalInstruments.Vision.Roi)">
            <summary>
            Searches for areas in an image that match a given geometric template image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method prior to using this method to ensure that the template image has been 
            configured for the geometric pattern match stage.
            </summary>
            <param name="image">
            The image in which the method finds matches to the template image. 
            </param>
            <param name="template">
            The template image to be located during the geometric matching process. 
            </param>
            <param name="curveOptions">
            Describes how the method identifies the curves in the image the method will use to match the template image. 
            </param>
            <param name="options">
            Describes how to search for the template image.
            </param>
            <param name="roi">
            Specifies the ROI within an image in which to search for the template image. Pass null or Nothing for this parameter to 
            search the entire image. 
            </param>
            <returns>
            A collection of <see cref="T:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch" crefType="Unqualified"/>
            objects containing information about each match found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
            <example>
            	<code lang="VB.NET">
            Imports NationalInstruments.Vision
            Imports NationalInstruments.Vision.Analysis
            Imports System.Collections.ObjectModel
             
            'Learn the geometric template in viewer1.
            'Set the center of the template to (5, 10).
            Algorithms.LearnGeometricPattern (imageViewer1.Image, New PointContour(5, 10), 0)
            'Match the template in viewer2, searching for 4 matches that could be rotated.
            Dim MatchOptions As New MatchGeometricPatternEdgeBasedOptions (GeometricMatchModes.ShiftInvariant + GeometricMatchModes.RotationInvariant, 4)
            Dim Matches As Collection(Of GeometricEdgeBasedPatternMatch)
            Matches = Algorithms.MatchGeometricPatternEdgeBased (imageViewer2.Image, imageViewer1.Image, New CurveOptions (), MatchOptions)
            </code>
            </example>
            <example>
            	<code lang="C#">
            using NationalInstruments.Vision;
            using NationalInstruments.Vision.Analysis;
            using System.Collections.ObjectModel;
             
            // Learn the geometric template in viewer1.
            // Set the center of the template to (5, 10).
            Algorithms.LearnGeometricPattern(imageViewer1.Image, new PointContour(5, 10), 0);
            // Match the template in viewer2, searching for 4 matches that could be rotated.
            MatchGeometricPatternEdgeBasedOptions matchOptions = new MatchGeometricPatternEdgeBasedOptions(GeometricMatchModes.ShiftInvariant + GeometricMatchModes.RotationInvariant, 4);
            Collection&lt;GeometricEdgeBasedPatternMatch&gt; matches;
            matches = Algorithms.MatchGeometricPatternEdgeBased(imageViewer2.Image, imageViewer1.Image, new CurveOptions(), matchOptions);
            </code>
            </example>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractTextureFeatures(NationalInstruments.Vision.VisionImage)">
            <summary>
            Extracts texture features from the image. Features are extracted by computing the wavelet 
            bands from the image and then computing co-occurrence Haralick features from the extracted bands. 
            The features are extracted within a specified window and the window is moved across the 
            image from the top-left to the right-bottom corner.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <returns>
            An instance of TextureFeaturesReport having wavelet Bands used and TextureFeatures extacted.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractTextureFeatures(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Extracts texture features from the image. Features are extracted by computing the wavelet 
            bands from the image and then computing co-occurrence Haralick features from the extracted bands. 
            The features are extracted within a specified window and the window is moved across the 
            image from the top-left to the right-bottom corner.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the texture features.
            </param>
            <returns>
            An instance of TextureFeaturesReport having wavelet Bands used and TextureFeatures extacted.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractTextureFeatures(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.WindowOptions)">
            <summary>
            Extracts texture features from the image. Features are extracted by computing the wavelet 
            bands from the image and then computing co-occurrence Haralick features from the extracted bands. 
            The features are extracted within a specified window and the window is moved across the 
            image from the top-left to the right-bottom corner.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the texture features.
            </param>
            <param name="windowOptions">
            Window Options specifies the options for the window within which features are extracted 
            and specifies how the window is moved across the image.
            </param>
            <returns>
            An instance of TextureFeaturesReport having wavelet Bands used and TextureFeatures extacted.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractTextureFeatures(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.WindowOptions,NationalInstruments.Vision.Analysis.WaveletOptions)">
            <summary>
            Extracts texture features from the image. Features are extracted by computing the wavelet 
            bands from the image and then computing co-occurrence Haralick features from the extracted bands. 
            The features are extracted within a specified window and the window is moved across the 
            image from the top-left to the right-bottom corner.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the texture features.
            </param>
            <param name="windowOptions">
            Window Options specifies the options for the window within which features are extracted 
            and specifies how the window is moved across the image.
            </param>
            <param name="waveletOptions">
            Wavelet Options specifes how the VI extracts the wavelet bands that are used to compute texture features.
            </param>
            <returns>
            An instance of TextureFeaturesReport having wavelet Bands used and TextureFeatures extacted.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractTextureFeatures(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.WindowOptions,NationalInstruments.Vision.Analysis.WaveletOptions,System.Collections.ObjectModel.Collection{System.Int32})">
            <summary>
            Extracts texture features from the image. Features are extracted by computing the wavelet 
            bands from the image and then computing co-occurrence Haralick features from the extracted bands. 
            The features are extracted within a specified window and the window is moved across the 
            image from the top-left to the right-bottom corner.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the texture features.
            </param>
            <param name="windowOptions">
            Window Options specifies the options for the window within which features are extracted 
            and specifies how the window is moved across the image.
            </param>
            <param name="waveletOptions">
            Wavelet Options specifes how the VI extracts the wavelet bands that are used to compute texture features.
            </param>
            <param name="waveletBands">
            Wavelet Bands collection specifes the wavelet bands that are used to compute texture features.
            </param>
            <returns>
            An instance of TextureFeaturesReport having wavelet Bands used and TextureFeatures extacted.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractTextureFeatures(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.WindowOptions,NationalInstruments.Vision.Analysis.WaveletOptions,System.Collections.ObjectModel.Collection{System.Int32},NationalInstruments.Vision.Analysis.CooccurrenceOptions)">
            <summary>
            Extracts texture features from the image. Features are extracted by computing the wavelet 
            bands from the image and then computing co-occurrence Haralick features from the extracted bands. 
            The features are extracted within a specified window and the window is moved across the 
            image from the top-left to the right-bottom corner.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the texture features.
            </param>
            <param name="windowOptions">
            Window Options specifies the options for the window within which features are extracted 
            and specifies how the window is moved across the image.
            </param>
            <param name="waveletOptions">
            Wavelet Options specifes how the VI extracts the wavelet bands that are used to compute texture features.
            </param>
            <param name="waveletBands">
            Wavelet Bands collection specifes the wavelet bands that are used to compute texture features.
            </param>
            <param name="CooccurrenceOptions">
            Co-occurrence Options specifies the options for computing the co-occurrence matrix of each window in the image. 
            The Haralick features are then extracted from the co-occurrence matrix.
            </param>
            <returns>
            An instance of TextureFeaturesReport having wavelet Bands used and TextureFeatures extacted.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractTextureFeatures(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.WindowOptions,NationalInstruments.Vision.Analysis.WaveletOptions,System.Collections.ObjectModel.Collection{System.Int32},NationalInstruments.Vision.Analysis.CooccurrenceOptions,System.Boolean)">
            <summary>
            Extracts texture features from the image. Features are extracted by computing the wavelet 
            bands from the image and then computing co-occurrence Haralick features from the extracted bands. 
            The features are extracted within a specified window and the window is moved across the 
            image from the top-left to the right-bottom corner.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the texture features.
            </param>
            <param name="windowOptions">
            Window Options specifies the options for the window within which features are extracted 
            and specifies how the window is moved across the image.
            </param>
            <param name="waveletOptions">
            Wavelet Options specifes how the VI extracts the wavelet bands that are used to compute texture features.
            </param>
            <param name="waveletBands">
            Wavelet Bands collection specifes the wavelet bands that are used to compute texture features.
            </param>
            <param name="cooccurrenceOptions">
            Co-occurrence Options specifies the options for computing the co-occurrence matrix of each window in the image. 
            The Haralick features are then extracted from the co-occurrence matrix.
            </param>
            <param name="useWindow">
            Boolean to indicate wehether to use windows for extraction or not
            </param>
            <returns>
            An instance of TextureFeaturesReport having wavelet Bands used and TextureFeatures extacted.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractWaveletBands(NationalInstruments.Vision.VisionImage)">
            <summary>
            Extracts wavelet bands from the image.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <returns>
            Returns the Report having all the bands retrieved and the dimensions of the bands.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractWaveletBands(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.WaveletOptions)">
            <summary>
            Extracts wavelet bands from the image.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="waveletOptions">
            Wavelet Options specifes how the VI extracts the wavelet bands that are used to compute texture features.
            </param>
            <returns>
            Returns the Report having all the bands retrieved and the dimensions of the bands.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractWaveletBands(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.WaveletOptions,System.Collections.ObjectModel.Collection{System.Int32})">
            <summary>
            Extracts wavelet bands from the image.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="waveletOptions">
            Wavelet Options specifes how the VI extracts the wavelet bands that are used to compute texture features.
            </param>
            <param name="waveletBands">
            Wavelet Bands Used specifies the wavelet bands used to compute the features.
            </param>
            <returns>
            Returns the Report having all the bands retrieved and the dimensions of the bands.
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CooccurrenceMatrixAnalysis(NationalInstruments.Vision.VisionImage,System.Int32)">
            <summary>
            Performs the Cooccurrence Matrix Texture Analysis.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="levelPixel">
            Cooccurrence Level specifies the number of gray levels the image is quantized to before the cooccurrence
            matrix is computed. The larger this value, the longer the VI will take to compute the matrix.
            </param>
            <returns>
            Returns the Report having Cooccurrence Matrix and Feature Vector
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CooccurrenceMatrixAnalysis(NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Roi)">
            <summary>
            Performs the Cooccurrence Matrix Texture Analysis.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="levelPixel">
            Cooccurrence Level specifies the number of gray levels the image is quantized to before the cooccurrence
            matrix is computed. The larger this value, the longer the VI will take to compute the matrix.
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the cooccurrence matrix and features
            </param>
            <returns>
            Returns the Report having Cooccurrence Matrix and Feature Vector
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CooccurrenceMatrixAnalysis(NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.DisplacementVector)">
            <summary>
            Performs the Cooccurrence Matrix Texture Analysis.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="levelPixel">
            Cooccurrence Level specifies the number of gray levels the image is quantized to before the cooccurrence
            matrix is computed. The larger this value, the longer the VI will take to compute the matrix.
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the cooccurrence matrix and features
            </param>
            <param name="displacementVector">
            Displacement Vector specifies the distance of the neighboring pixels to consider when computing
            the co-occurrence matrix
            </param>
            <returns>
            Returns the Report having Cooccurrence Matrix and Feature Vector
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.CooccurrenceMatrixAnalysis(NationalInstruments.Vision.VisionImage,System.Int32,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.DisplacementVector,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.CooccurrenceFeature})">
            <summary>
            Performs the Cooccurrence Matrix Texture Analysis.
            </summary>
            <param name="sourceImage">
            Image Src is a reference to the source image. 
            </param>
            <param name="levelPixel">
            Cooccurrence Level specifies the number of gray levels the image is quantized to before the cooccurrence
            matrix is computed. The larger this value, the longer the VI will take to compute the matrix.
            </param>
            <param name="roi">
            ROI Descriptor specifies the region of the image in which to extract the cooccurrence matrix and features
            </param>
            <param name="displacementVector">
            Displacement Vector specifies the distance of the neighboring pixels to consider when computing
            the co-occurrence matrix
            </param>
            <param name="featureOption">
            Haralick Feature Type specifies the type of Haralick features to extract from the image.
            </param>
            <returns>
            Returns the Report having Cooccurrence Matrix and Feature Vector
            </returns>
            <remarks>
            Use this method with U8, U16 and I16 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindCircularEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Detects circular edges inside an ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <returns>
            A FindCircularEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindCircularEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindCircularEdgeOptions)">
            <summary>
            Detects circular edges inside an ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <param name="findCircularEdgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel 
            analysis of the edges.
            </param>
            <returns>
            A FindCircularEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindCircularEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindCircularEdgeOptions,NationalInstruments.Vision.Analysis.CircularEdgeFitOptions)">
            <summary>
            Detects circular edges inside an ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <param name="findCircularEdgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel 
            analysis of the edges.
            </param>
            <param name="circularEdgeFitOptions">
            Defines the Circle Fit options to use for Edge Detection.
            </param>
            <returns>
            A FindCircularEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindCircularEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindCircularEdgeOptions,NationalInstruments.Vision.Analysis.CircularEdgeFitOptions,NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            Detects circular edges inside an ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <param name="findCircularEdgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel 
            analysis of the edges.
            </param>
            <param name="circularEdgeFitOptions">
            Defines the Circle Fit options to use for Edge Detection.
            </param>
            <param name="transform">
            Specifies how to transform the location of the edge detection based on the difference between the reference 
            coordinate system and the measurement coordinate system.
            </param>
            <returns>
            A FindCircularEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindConcentricEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            Detects straight edges inside an Annulus ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <returns>
            A FindConcentricEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindConcentricEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions)">
            <summary>
            Detects straight edges inside an Annulus ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <param name="findConcentricEdgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel 
            analysis of the edges.
            </param>
            <returns>
            A FindConcentricEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindConcentricEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions,NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions)">
            <summary>
            Detects straight edges inside an Annulus ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <param name="findConcentricEdgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel 
            analysis of the edges.
            </param>
            <param name="concentricEdgeFitOptions">
            Defines the Circle Fit options to use for Edge Detection.
            </param>
            <returns>
            A FindConcentricEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.FindConcentricEdge(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions,NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions,NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            Detects straight edges inside an Annulus ROI, and optionally overlays the information used to search for the edges.
            </summary>
            <param name="image">
            The input image.
            </param>
            <param name="roi">
            The region of the image on which the method is performed. The first contour of <format type="italics">roi</format> must be 
            a RectangleContour or RotatedRectangleContour.
            </param>
            <param name="findConcentricEdgeOptions">
            Defines the characteristics the method uses to find the edges and the parameters it needs for subpixel 
            analysis of the edges.
            </param>
            <param name="concentricEdgeFitOptions">
            Defines the Circle Fit options to use for Edge Detection.
            </param>
            <param name="transform">
            Specifies how to transform the location of the edge detection based on the difference between the reference 
            coordinate system and the measurement coordinate system.
            </param>
            <returns>
            A FindConcentricEdgeReport containing the information about the detected edges.
            </returns>
            <remarks>
            Use this method with U8, I16, Single, Rgb32, Hsl32, RgbU64 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractContour(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ExtractContourDirection)">
            <summary>
            Extracts a single, best contour from an image. If the input image is calibrated, the contour will be learned with calibration.
            </summary>
            <param name="image">
            The image is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor is a descriptor that defines the region within which to search for contours. 
            </param>
            <param name="direction">
            Specifies the direction in which the Region of Interest (ROI) is examined. 
            </param>                          
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ExtractContourReport" crefType="Unqualified"/>
            object containing contour points information in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractContour(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ExtractContourDirection,NationalInstruments.Vision.Analysis.CurveParameters)">
            <summary>
            Extracts a single, best contour from an image. If the input image is calibrated, the contour will be learned with calibration.
            </summary>
            <param name="image">
            The image is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor is a descriptor that defines the region within which to search for contours. 
            </param>
            <param name="direction">
            Specifies the direction in which the Region of Interest (ROI) is examined. 
            </param>
            <param name="parameters">
            Describes  information about how curves are extracted from the image.
            </param>                     
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ExtractContourReport" crefType="Unqualified"/>
            object containing contour points information in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractContour(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ExtractContourDirection,NationalInstruments.Vision.Analysis.CurveParameters,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ConnectionConstraint})">
            <summary>
            Extracts a single, best contour from an image. If the input image is calibrated, the contour will be learned with calibration.
            </summary>
            <param name="image">
            The image is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor is a descriptor that defines the region within which to search for contours. 
            </param>
            <param name="direction">
            Specifies the direction in which the Region of Interest (ROI) is examined. 
            </param>
            <param name="parameters">
            Describes  information about how curves are extracted from the image.
            </param>
            <param name="connectionConstraints">
            Specifies how to connect curves. Select a maximum of 1 constraint of each type. 
            </param>              
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ExtractContourReport" crefType="Unqualified"/>
            object containing contour points information in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractContour(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ExtractContourDirection,NationalInstruments.Vision.Analysis.CurveParameters,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ConnectionConstraint},NationalInstruments.Vision.Analysis.ExtractContourSelection)">
            <summary>
            Extracts a single, best contour from an image. If the input image is calibrated, the contour will be learned with calibration.
            </summary>
            <param name="image">
            The image is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor is a descriptor that defines the region within which to search for contours. 
            </param>
            <param name="direction">
            Specifies the direction in which the Region of Interest (ROI) is examined. 
            </param>
            <param name="parameters">
            Describes  information about how curves are extracted from the image.
            </param>
            <param name="connectionConstraints">
            Specifies how to connect curves. Select a maximum of 1 constraint of each type. 
            </param>
            <param name="selection">
            Selects an extracted contour based on the property you choose. 
            </param>        
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ExtractContourReport" crefType="Unqualified"/>
            object containing contour points information in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractContour(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.ExtractContourDirection,NationalInstruments.Vision.Analysis.CurveParameters,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ConnectionConstraint},NationalInstruments.Vision.Analysis.ExtractContourSelection,NationalInstruments.Vision.VisionImage)">
            <summary>
            Extracts a single, best contour from an image. If the input image is calibrated, the contour will be learned with calibration.
            </summary>
            <param name="image">
            The image is a reference to the source image. 
            </param>
            <param name="roi">
            ROI Descriptor is a descriptor that defines the region within which to search for contours. 
            </param>
            <param name="direction">
            Specifies the direction in which the Region of Interest (ROI) is examined. 
            </param>
            <param name="curveParameters">
            Describes  information about how curves are extracted from the image.
            </param>
            <param name="connectionConstraints">
            Specifies how to connect curves. Select a maximum of 1 constraint of each type. 
            </param>
            <param name="selection">
            Selects an extracted contour based on the property you choose. 
            </param>
            <param name="contourImage">
            Contour Image is a reference to the destination image. If this input is connected, the Contour image will be the image extracted from the ROI bounding box.
            </param>
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ExtractContourReport" crefType="Unqualified"/>
            object containing contour points information in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourInfo(NationalInstruments.Vision.VisionImage)">
            <summary>
            Returns all the information describing a contour.
            </summary>
            <param name="image">
            The image is a reference to the image containing a contour. 
            </param>        
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ContourInfoReport" crefType="Unqualified"/>
            object containing information about the contour found in the image.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourOverlay(NationalInstruments.Vision.VisionImage)">
            <summary>
            Overlays the Contour on the image.
            </summary>
            <param name="image">
            The image reference to the source image. 
            </param>                                      
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourOverlay(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Overlays the Contour on the image.
            </summary>
            <param name="image">
            The image reference to the source image. 
            </param>
            <param name="contourImage">
            Contour Image is a reference to the image containing a contour.
            </param>                              
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourOverlay(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ContourOverlaySettings)">
            <summary>
            Overlays the Contour on the image.
            </summary>
            <param name="image">
            The image reference to the source image.  
            </param>
            <param name="contourImage">
            Contour Image is a reference to the image containing a contour.
            </param>
            <param name="pointsSettings">
            PointSettings specifies the settings for the contour points in the overlay.
            </param>                     
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourOverlay(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ContourOverlaySettings,NationalInstruments.Vision.Analysis.ContourOverlaySettings)">
            <summary>
            Overlays the Contour on the image.
            </summary>
            <param name="image">
            The image reference to the source image. 
            </param>
            <param name="contourImage">
            Contour Image is a reference to the image containing a contour.
            </param>
            <param name="pointsSettings">
            PointSettings specifies the settings for the contour points in the overlay.
            </param>
            <param name="equationSettings">
            Equation Settings specifies the settings for the contour equation in the overlay. 
            </param>             
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourOverlay(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Analysis.ContourOverlaySettings,NationalInstruments.Vision.Analysis.ContourOverlaySettings,System.String)">
            <summary>
            Overlays the Contour on the image.
            </summary>
            <param name="image">
            The image reference to the source image. 
            </param>
            <param name="contourImage">
            Contour Image is a reference to the image containing a contour.
            </param>
            <param name="pointsSettings">
            PointSettings specifies the settings for the contour points in the overlay.
            </param>
            <param name="equationSettings">
            Equation Settings specifies the settings for the contour equation in the overlay. 
            </param>
            <param name="groupName">
            Specifies the group to which you want to add the overlay information.
            </param>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourComputeCurvature(NationalInstruments.Vision.VisionImage)">
            <summary>
            Computes the curvature profile along the contour.
            </summary>
            <param name="image">
            The image is a reference to the image containing a contour.
            </param>        
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ComputeCurvatureReport" crefType="Unqualified"/>
            object containing curvature profile information.
            </returns>     
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourComputeCurvature(NationalInstruments.Vision.VisionImage,System.UInt32)">
            <summary>
            Computes the curvature profile along the contour.
            </summary>
            <param name="image">
            The image is a reference to the image containing a contour. 
            </param>
            <param name="kernel">
            Kernel specifies the size of the kernel used to compute the curvature profile of the selected contour.
            </param>
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ComputeCurvatureReport" crefType="Unqualified"/>
            object containing curvature profile information.
            </returns>     
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourClassifyCurvature(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.RangeLabel})">
            <summary>
            Classifies the contour located in the given image.
            </summary>
            <param name="image">
            The image is a reference to the image containing a contour. 
            </param>         
            <param name="curvatureClasses">
            Curvature classes a collection is with one element for every curvature class in the image. 
            </param>                 
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport" crefType="Unqualified"/>
            object containing information of classified cureves.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourClassifyCurvature(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.RangeLabel},System.UInt32)">
            <summary>
            Classifies the contour located in the given image.
            </summary>
            <param name="image">
            The image is a reference to the image containing a contour.
            </param>         
            <param name="curvatureClasses">
            Curvature classes a collection is with one element for every curvature class in the image. 
            </param> 
            <param name="kernel">
            Kernel specifies the size of the kernel used to compute the curvature profile of the selected contour.
            </param>         
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport" crefType="Unqualified"/>
            object containing information of classified cureves.
            </returns>
            <remarks>
            Use this method with U8 images.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourComputeDistances(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)">
            <summary>
            Compares a target contour with a template contour, and calculates the distance between the contours.
            </summary>
            <param name="targetImage">
            Target Image is a reference to the image containing the target contour.
            </param>         
            <param name="templateImage">
            Template Image is a reference to the template image.
            </param>                     
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ComputeDistanceReport" crefType="Unqualified"/>
            object containing information of distance between the contours.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourComputeDistances(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.UInt32)">
            <summary>
            Compares a target contour with a template contour, and calculates the distance between the contours.
            </summary>
            <param name="targetImage">
            Target Image is a reference to the image containing the target contour.
            </param>         
            <param name="templateImage">
            Template Image is a reference to the template image.
            </param>             
            <param name="smoothingKernel">
            Smoothing Kernel specifies the size of the smoothing kernel.
            </param>
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ComputeDistanceReport" crefType="Unqualified"/>
            object containing information of distance between the contours.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourComputeDistances(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.UInt32,NationalInstruments.Vision.Analysis.SetupMatchPatternData)">
            <summary>
            Compares a target contour with a template contour, and calculates the distance between the contours.
            </summary>
            <param name="targetImage">
            Target Image is a reference to the image containing the target contour.
            </param>         
            <param name="templateImage">
            Template Image is a reference to the template image.
            </param> 
            <param name="matchSetupData">
            Match Setup Data is a string that contains information from the SetupMatchContourPattern function.
            </param>     
            <param name="smoothingKernel">
            Smoothing Kernel specifies the size of the smoothing kernel.
            </param>
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ComputeDistanceReport" crefType="Unqualified"/>
            object containing information of distance between the contours.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourClassifyDistances(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.RangeLabel})">
            <summary>
            Classifies the distance between a image containing a contour and a template image containing a contour.
            </summary>
            <param name="targetImage">
            Target Image is a reference to the image containing the target contour.
            </param>         
            <param name="templateImage">
            Template Image is a reference to the template image.
            </param> 
            <param name="distanceClasses">
            Distance Classes is an array with one element for every distance class. 
            </param>                     
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ClassifyDistancesReport" crefType="Unqualified"/>
            object containing information of classifeied distance between the contours.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourClassifyDistances(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.RangeLabel},System.UInt32)">
            <summary>
            Classifies the distance between a image containing a contour and a template image containing a contour.
            </summary>
            <param name="targetImage">
            Target Image is a reference to the image containing the target contour.
            </param>         
            <param name="templateImage">
            Template Image is a reference to the template image.
            </param> 
            <param name="distanceClasses">
            Distance Classes is an array with one element for every distance class. 
            </param>             
            <param name="smoothingKernel">
            Smoothing Kernel specifies the size of the smoothing kernel.
            </param>
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ClassifyDistancesReport" crefType="Unqualified"/>
            object containing information of classifeied distance between the contours.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourClassifyDistances(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.RangeLabel},System.UInt32,NationalInstruments.Vision.Analysis.SetupMatchPatternData)">
            <summary>
            Classifies the distance between a image containing a contour and a template image containing a contour.
            </summary>
            <param name="targetImage">
            Target Image is a reference to the image containing the target contour.
            </param>         
            <param name="templateImage">
            Template Image is a reference to the template image.
            </param> 
            <param name="distanceClasses">
            Distance Classes is an array with one element for every distance class. 
            </param> 
            <param name="matchSetupData">
            Match Setup Data is a string that contains information from the SetupMatchContourPattern function.
            </param>     
            <param name="smoothingKernel">
            Smoothing Kernel specifies the size of the smoothing kernel.
            </param>
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.ClassifyDistancesReport" crefType="Unqualified"/>
            object containing information of classifeied distance between the contours.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourSetupMatchPattern">
            <summary>
            Sets parameters that are used during the matching process.
            </summary>                          
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.SetupMatchPatternData" crefType="Unqualified"/>
            SetupMatchPatternData contains information about the setup parameters for the matching phase.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourSetupMatchPattern(NationalInstruments.Vision.Analysis.ContourMatchMode)">
            <summary>
            Sets parameters that are used during the matching process.
            </summary>
            <param name="matchMode">
            Specifies conditions under which you want the function to find template matches.
            </param>                                 
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.SetupMatchPatternData" crefType="Unqualified"/>
            SetupMatchPatternData contains information about the setup parameters for the matching phase.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourSetupMatchPattern(NationalInstruments.Vision.Analysis.ContourMatchMode,System.Boolean)">
            <summary>
            Sets parameters that are used during the matching process.
            </summary>
            <param name="matchMode">
            Specifies conditions under which you want the function to find template matches.
            </param>         
            <param name="enableAccuracy">
            Subpixel Accuracy determines whether to return the match results with subpixel accuracy.
            </param>                            
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.SetupMatchPatternData" crefType="Unqualified"/>
            SetupMatchPatternData contains information about the setup parameters for the matching phase.
            </returns> 
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourSetupMatchPattern(NationalInstruments.Vision.Analysis.ContourMatchMode,System.Boolean,NationalInstruments.Vision.Analysis.CurveParameters)">
            <summary>
            Sets parameters that are used during the matching process.
            </summary>
            <param name="matchMode">
            Specifies conditions under which you want the function to find template matches.
            </param>         
            <param name="enableAccuracy">
            Subpixel Accuracy determines whether to return the match results with subpixel accuracy.
            </param> 
            <param name="curveParameters">
            Specifies the information of how curves are extracted from the image. 
            </param>                   
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.SetupMatchPatternData" crefType="Unqualified"/>
            SetupMatchPatternData contains information about the setup parameters for the matching phase.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourSetupMatchPattern(NationalInstruments.Vision.Analysis.ContourMatchMode,System.Boolean,NationalInstruments.Vision.Analysis.CurveParameters,System.Boolean)">
            <summary>
            Sets parameters that are used during the matching process.
            </summary>
            <param name="matchMode">
            Specifies conditions under which you want the function to find template matches.
            </param>         
            <param name="enableAccuracy">
            Subpixel Accuracy determines whether to return the match results with subpixel accuracy.
            </param> 
            <param name="curveParameters">
            Specifies the information of how curves are extracted from the image. 
            </param> 
            <param name="useLearnCurveParameters">
            Use Learn Curve Parameters specifies whether to use the Contour Learn Options parameters from the SetupLearnContourPattern function.
            </param>             
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.SetupMatchPatternData" crefType="Unqualified"/>
            SetupMatchPatternData contains information about the setup parameters for the matching phase.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourSetupMatchPattern(NationalInstruments.Vision.Analysis.ContourMatchMode,System.Boolean,NationalInstruments.Vision.Analysis.CurveParameters,System.Boolean,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.RangeSettings})">
            <summary>
            Sets parameters that are used during the matching process.
            </summary>
            <param name="matchMode">
            Specifies conditions under which you want the function to find template matches.
            </param>         
            <param name="enableAccuracy">
            Subpixel Accuracy determines whether to return the match results with subpixel accuracy.
            </param> 
            <param name="curveParameters">
            Specifies the information of how curves are extracted from the image. 
            </param> 
            <param name="useLearnCurveParameters">
            Use Learn Curve Parameters specifies whether to use the Contour Learn Options parameters from the SetupLearnContourPattern function.
            </param>     
            <param name="rangeSettings">
            Range Settings is a collection of the acceptable ranges for each Match Constraints option.
            </param>
            <returns>
            <see cref="T:NationalInstruments.Vision.Analysis.SetupMatchPatternData" crefType="Unqualified"/>
            SetupMatchPatternData contains information about the setup parameters for the matching phase.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourAdvancedSetupMatchPattern(NationalInstruments.Vision.Analysis.SetupMatchPatternData)">
            <summary>
            Optimizes and fine-tunes advanced parameters used during the contour matching phase.
            </summary>
            <param name="setupMatchData">
            SetupMatchData is a string that contains information from the ContourSetupMatchPattern function
            </param>                        
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourAdvancedSetupMatchPattern(NationalInstruments.Vision.Analysis.SetupMatchPatternData,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption})">
            <summary>
            Optimizes and fine-tunes advanced parameters used during the contour matching phase.
            </summary>
            <param name="setupMatchData">
            SetupMatchData is a string that contains information from the ContourSetupMatchPattern function
            </param>         
            <param name="setupDataOptions">
            SetupDataOptions is an array of options to use during the matching phase.
            </param>                
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitLine(NationalInstruments.Vision.VisionImage)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a line.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <returns>
            A ContourFitLineReport containing the information about the edge fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitLine(NationalInstruments.Vision.VisionImage,System.Double)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a line.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="pixelRadius">
            It specifies the neighborhood pixel relationship for the initial subset of points being used.
            </param>
            <returns>
            A ContourFitLineReport containing the information about the edge fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitCircle(NationalInstruments.Vision.VisionImage)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Circle.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <returns>
            A PartialCircle containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitCircle(NationalInstruments.Vision.VisionImage,System.Double)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Circle.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="pixelRadius">
            It specifies the neighborhood pixel relationship for the initial subset of points being used.
            </param>
            <returns>
            A PartialCircle containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitCircle(NationalInstruments.Vision.VisionImage,System.Double,System.Boolean)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Circle.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="pixelRadius">
            It specifies the neighborhood pixel relationship for the initial subset of points being used.
            </param>
            <param name="rejectOutliers">
            It controls whether to use every given radial point or only a subset of the points to fit the circle.
            </param>
            <returns>
            A PartialCircle containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitEllipse(NationalInstruments.Vision.VisionImage)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Ellipse.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <returns>
            A PartialEllipse containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitEllipse(NationalInstruments.Vision.VisionImage,System.Double)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Ellipse.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="pixelRadius">
            It specifies the neighborhood pixel relationship for the initial subset of points being used.
            </param>
            <returns>
            A PartialEllipse containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitEllipse(NationalInstruments.Vision.VisionImage,System.Double,System.Boolean)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Ellipse.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="pixelRadius">
            It specifies the neighborhood pixel relationship for the initial subset of points being used.
            </param>
            <param name="rejectOutliers">
            It controls whether to use every given radial point or only a subset of the points to fit the ellipse.
            </param>
            <returns>
            A PartialEllipse containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitSpline(NationalInstruments.Vision.VisionImage)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Spline.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <returns>
            A ContourFitSplineReport containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitSpline(NationalInstruments.Vision.VisionImage,System.UInt32)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Spline.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="degree">
            It specifies the order of polynomials that form the B-spline curve.
            </param>
            <returns>
            A ContourFitSplineReport containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitSpline(NationalInstruments.Vision.VisionImage,System.UInt32,System.UInt32)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a Spline.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="degree">
            It specifies the order of polynomials that form the B-spline curve.
            </param>
            <param name="nControlPoints">
            It specifies the number of control points on the B-spline curve.
            </param>
            <returns>
            A ContourFitSplineReport containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ContourFitPolynomial(NationalInstruments.Vision.VisionImage,System.UInt32)">
            <summary>
            Fits a contour with an equation. The fit will occur in corrected space if the contour 
            is calibrated. Fits a contour with a polynomial.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="order">
            It specifies the order of the polynomial equation. 
            </param>
            <returns>
            A ContourFitPolynomialReport containing the information about the contour fitted.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>        
            <param name="curveParameters">
            Specifies what parameters will be used to extract curves from the inspection image.
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ClampSettings)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>        
            <param name="curveParameters">
            Specifies what parameters will be used to extract curves from the inspection image.
            </param>
            <param name="clampSettings">
            Specifies clamp settings parameters to control the behavior of the clamp..
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ClampSettings,NationalInstruments.Vision.Analysis.ClampOverlaySettings)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>        
            <param name="curveParameters">
            Specifies what parameters will be used to extract curves from the inspection image.
            </param>
            <param name="clampSettings">
            Specifies clamp settings parameters to control the behavior of the clamp..
            </param>
            <param name="clampOverlaySettings">
            Specifies the information that is to be overlaid on the result image.
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ClampSettings,NationalInstruments.Vision.Analysis.ClampOverlaySettings,NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>        
            <param name="curveParameters">
            Specifies what parameters will be used to extract curves from the inspection image.
            </param>
            <param name="clampSettings">
            Specifies clamp settings parameters to control the behavior of the clamp..
            </param>
            <param name="clampOverlaySettings">
            Specifies the information that is to be overlaid on the result image.
            </param>
            <param name="transform">
            The coordinate system to which the ROI Descriptor is linked.
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>        
            <param name="curveParameters">
            Specifies what parameters will be used to extract curves from the inspection image.
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ClampSettings)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>        
            <param name="curveParameters">
            Specifies what parameters will be used to extract curves from the inspection image.
            </param>
            <param name="clampSettings">
            Specifies clamp settings parameters to control the behavior of the clamp..
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ClampSettings,NationalInstruments.Vision.Analysis.ClampOverlaySettings)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>        
            <param name="curveParameters">
            Specifies what parameters will be used to extract curves from the inspection image.
            </param>
            <param name="clampSettings">
            Specifies clamp settings parameters to control the behavior of the clamp..
            </param>
            <param name="clampOverlaySettings">
            Specifies the information that is to be overlaid on the result image.
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Algorithms.ClampMax2(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CurveOptions,NationalInstruments.Vision.Analysis.ClampSettings,NationalInstruments.Vision.Analysis.ClampOverlaySettings,NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            ClampMax Measures a distance from outside-in by a simulating a clamping action. The clamping direction is governed by the ROI direction and can vary within a user-defined angle tolerance. 
            When valid calibration is present, the distance is computed in pixel as well as real-world units.
            </summary>
            <param name="image">
            The input image containing a contour.
            </param>
            <param name="roi">
            It specifies roi to find clampMax.
            </param>        
            <param name="curveParameters">
            Specifies what parameters will be used to extract curves from the inspection image.
            </param>
            <param name="clampSettings">
            Specifies clamp settings parameters to control the behavior of the clamp..
            </param>
            <param name="clampOverlaySettings">
            Specifies the information that is to be overlaid on the result image.
            </param>
            <param name="transform">
            The coordinate system to which the ROI Descriptor is linked.
            </param>
            <returns>
            A ClampMaxReport containing the information about the Max clamp.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Algorithms.CoresUsed">
            <summary>
            This property allows you to specify how many processors all of your vision functions should take advantage of. The default is to use as many cores as possible. You may use this to get/set the number of cores to use. If a custom value is set to 0, this indicates use as many as possible, and the user is only allowed to specify as many cores as available by the operating system at maximum.
            </summary>
            <value>
            </value>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Internal.VisionDll.niocrSetCharacterSizeMinimum(System.IntPtr,System.Int32)">
            <exclude/>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.InterpolationMethod">
            <summary>
            Defines the interpolation method used.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.InterpolationMethod.ZeroOrder">
            <summary>
            The method uses an interpolation method that interpolates new pixel values using the nearest valid neighboring pixel. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.InterpolationMethod.Bilinear">
            <summary>
            The method uses an interpolation method that interpolates new pixel values using a bidirectional average of the neighboring pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.InterpolationMethod.Quadratic">
            <summary>
            The method uses an interpolation method that interpolates new pixel values using a quadratic approximating polynomial. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.InterpolationMethod.CubicSpline">
            <summary>
            The method uses an interpolation method that interpolates new pixel values by fitting them to a cubic spline curve, where the curve is based on known pixel values from the image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.InterpolationMethod.BilinearFixed">
            <summary>
            The method uses an interpolation method that interpolates new pixel values using a bidirectional average of the neighboring pixels. The function makes the averaging calculations using fixed-point mathematics, which increases the performance of the interpolation but reduces the accuracy. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RegistrationMethod">
            <summary>
            Specifies how the method registers the golden template and the image under inspection.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RegistrationMethod.None">
            <summary>
            No registration occurs. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RegistrationMethod.Perspective">
            <summary>
            Adjusts the image to correct for minor variations in alignment or perspective. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.NormalizationMethod">
            <summary>
            Specifies how the method normalizes the template image relative to the inspection image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NormalizationMethod.None">
            <summary>
            No normalization occurs.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NormalizationMethod.HistogramMatching">
            <summary>
            Adjusts the image so its histogram is similar to the golden template's histogram. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NormalizationMethod.AverageMatching">
            <summary>
            Adjusts the image so its mean pixel value equals the golden template's mean pixel value.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.Connectivity">
            <summary>
            Defines which of the surrounding pixels of a given pixel constitute its neighborhood.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Connectivity.Connectivity4">
            <summary>
            Only pixels adjacent in the horizontal and vertical directions are considered neighbors.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Connectivity.Connectivity8">
            <summary>
            All adjacent pixels are considered as neighbors.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RangeType">
            <summary>
            Specifies whether a match occurs inside or outside the criteria range in 
            <see cref="P:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.Range" crefType="PartiallyQualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RangeType.InsideRange">
            <summary>
            Specifies that a match occurs when the measurement is inside the range of
            <see cref="P:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.Range" crefType="PartiallyQualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RangeType.OutsideRange">
            <summary>
            Specifies that a match occurs when the measurement is outside the range of
            <see cref="P:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.Range" crefType="PartiallyQualified"/>.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MeasurementType">
            <summary>
            Specifies the type of measurement to perform on particles.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.CenterOfMassX">
            <summary>
            X-coordinate of the point representing the average position of the total particle mass assuming every point in the particle has a constant density. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.CenterOfMassY">
            <summary>
            Y-coordinate of the point representing the average position of the total particle mass assuming every point in the particle has a constant density. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.FirstPixelX">
            <summary>
            X-coordinate of the highest, leftmost particle pixel. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.FirstPixelY">
            <summary>
            Y-coordinate of the highest, leftmost particle pixel. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.BoundingRectLeft">
            <summary>
            X-coordinate of the leftmost particle point. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.BoundingRectTop">
            <summary>
            Y-coordinate of highest particle point. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.BoundingRectRight">
            <summary>
            X-coordinate of the rightmost particle point. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.BoundingRectBottom">
            <summary>
            Y-coordinate of the lowest particle point. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxFeretDiameterStartX">
            <summary>
            X-coordinate of the start of the line segment connecting the two perimeter points that are the furthest apart.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxFeretDiameterStartY">
            <summary>
            Y-coordinate of the start of the line segment connecting the two perimeter points that are the furthest apart.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxFeretDiameterEndX">
            <summary>
            X-coordinate of the end of the line segment connecting the two perimeter points that are the furthest apart.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxFeretDiameterEndY">
            <summary>
            Y-coordinate of the end of the line segment connecting the two perimeter points that are the furthest apart.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxHorizontalSegmentLengthLeft">
            <summary>
            X-coordinate of the leftmost pixel in the longest row of contiguous pixels in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxHorizontalSegmentLengthRight">
            <summary>
            X-coordinate of the rightmost pixel in the longest row of contiguous pixels in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxHorizontalSegmentLengthRow">
            <summary>
            Y-coordinate of all of the pixels in the longest row of contiguous pixels in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.BoundingRectWidth">
            <summary>
            Distance between the x-coordinate of the leftmost particle point and the x-coordinate of the rightmost particle point. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.BoundingRectHeight">
            <summary>
            Distance between the y-coordinate of highest particle point and the y-coordinate of the lowest particle point. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.BoundingRectDiagonal">
            <summary>
            Distance between opposite corners of the bounding rectangle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.Perimeter">
            <summary>
            Sum of the perimeters of each hole in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.ConvexHullPerimeter">
            <summary>
            Perimeter of the smallest convex polygon containing all points in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HolesPerimeter">
            <summary>
            Sum of the perimeters of each hole in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxFeretDiameter">
            <summary>
            Distance between the start and end of the line segment connecting the two perimeter points that are the furthest apart.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.EquivalentEllipseMajorAxis">
            <summary>
            Length of the major axis of the ellipse with the same perimeter and area as the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.EquivalentEllipseMinorAxis">
            <summary>
            Length of the minor axis of the ellipse with the same perimeter and area as the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.EquivalentEllipseMinorAxisFeret">
            <summary>
            Length of the minor axis of the ellipse with the same area as the particle, and Major Axis equal in length to 
            the MaxFeretDiameter.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.EquivalentRectLongSide">
            <summary>
            Longest side of the rectangle with the same perimeter and area as the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.EquivalentRectShortSide">
            <summary>
            Shortest side of the rectangle with the same perimeter and area as the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.EquivalentRectDiagonal">
            <summary>
            Distance between opposite corners of the rectangle with the same perimeter and area as the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.EquivalentRectShortSideFeret">
            <summary>
            Shortest side of the rectangle with the same area as the particle, and longest side equal in length to the MaxFeretDiameter. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.AverageHorizontalSegmentLength">
            <summary>
            Average length of a horizontal segment in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.AverageVerticalSegmentLength">
            <summary>
            Average length of a vertical segment in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HydraulicRadius">
            <summary>
            The particle Area divided by the particle Perimeter.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.WaddelDiskDiameter">
            <summary>
            Diameter of a disk with the same area as the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.Area">
            <summary>
            Area of the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HolesArea">
            <summary>
            Sum of the areas of each hole in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.ParticleAndHolesArea">
            <summary>
            Percentage of the particle Area in relation to its Particle and Holes' Area. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.ConvexHullArea">
            <summary>
            Area of the smallest convex polygon containing all points in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.ImageArea">
            <summary>
            Area of the image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NumberOfHoles">
            <summary>
            Number of holes in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NumberOfHorizontalSegments">
            <summary>
            Number of horizontal segments in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NumberOfVerticalSegments">
            <summary>
            Number of vertical segments in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.Orientation">
            <summary>
            The angle of the line that passes through the particle Center of Mass about which the particle has the lowest moment of inertia.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MaxFeretDiameterOrientation">
            <summary>
            The angle of the line segment connecting the two perimeter points that are the furthest apart. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.AreaByImageArea">
            <summary>
            Percentage of the particle Area covering the Image Area.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.AreaByParticleAndHolesArea">
            <summary>
            Percentage of the particle Area in relation to its Particle and Holes' Area. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.RatioOfEquivalentEllipseAxes">
            <summary>
            EquivalentEllipseMajorAxis divided by EquivalentEllipseMinorAxis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.RatioOfEquivalentRectSides">
            <summary>
            EquivalentRectLongSide divided by EquivalentRectShortSide.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.ElongationFactor">
            <summary>
            MaxFeretDiameter divided by EquivalentRectShortSideFeret. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.CompactnessFactor">
            <summary>
            Area divided by the product of BoundingRectWidth and BoundingRectHeight. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HeywoodCircularityFactor">
            <summary>
            Perimeter divided by the circumference of a circle with the same area. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.TypeFactor">
            <summary>
            Factor relating area to moment of inertia. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumX">
            <summary>
            The sum of all x-coordinates in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumY">
            <summary>
            The sum of all y-coordinates in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumXX">
            <summary>
            The sum of all x-coordinates squared in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumXY">
            <summary>
            The sum of all x-coordinates times y-coordinates in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumYY">
            <summary>
            The sum of all y-coordinates squared in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumXXX">
            <summary>
            The sum of all x-coordinates cubed in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumXXY">
            <summary>
            The sum of all x-coordinates squared times y-coordinates in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumXYY">
            <summary>
            The sum of all x-coordinates times y-coordinates squared in the particle. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.SumYYY">
            <summary>
            The sum of all y-coordinates cubed in the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MomentOfInertiaXX">
            <summary>
            The moment of inertia in the x-direction twice. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MomentOfInertiaXY">
            <summary>
            The moment of inertia in the x- and y-directions.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MomentOfInertiaYY">
            <summary>
            The moment of inertia in the y-direction twice.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MomentOfInertiaXXX">
            <summary>
            The moment of inertia in the x-direction three times. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MomentOfInertiaXXY">
            <summary>
            The moment of inertia in the x-direction twice and the y-direction once.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MomentOfInertiaXYY">
            <summary>
            The moment of inertia in the x-direction once and the y-direction twice. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.MomentOfInertiaYYY">
            <summary>
            The moment of inertia in the y-direction three times. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NormalizedMomentOfInertiaXX">
            <summary>
            The normalized moment of inertia in the x-direction twice.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NormalizedMomentOfInertiaXY">
            <summary>
            The normalized moment of inertia in the x- and y-directions.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NormalizedMomentOfInertiaYY">
            <summary>
            The normalized moment of inertia in the y-direction twice. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NormalizedMomentOfInertiaXXX">
            <summary>
            The normalized moment of inertia in the x-direction three times.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NormalizedMomentOfInertiaXXY">
            <summary>
            The normalized moment of inertia in the x-direction twice and the y-direction once.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NormalizedMomentOfInertiaXYY">
            <summary>
            The normalized moment of inertia in the x-direction once and the y-direction twice. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.NormalizedMomentOfInertiaYYY">
            <summary>
            The normalized moment of inertia in the y-direction three times.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HuMoment1">
            <summary>
            The first Hu moment.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HuMoment2">
            <summary>
            The second Hu moment.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HuMoment3">
            <summary>
            The third Hu moment.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HuMoment4">
            <summary>
            The fourth Hu moment. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HuMoment5">
            <summary>
            The fifth Hu moment.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HuMoment6">
            <summary>
            The sixth Hu moment. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeasurementType.HuMoment7">
            <summary>
            The seventh Hu moment. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrReadMode">
            <summary>
            Specifies what OCR information is read.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrReadMode.All">
            <summary>
            Reads both the character set data and the session properties from file. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrReadMode.CharacterSetOnly">
            <summary>
            Reads only the character set data from file. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrReadMode.PropertiesOnly">
            <summary>
            Reads only the session properties from file. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrReadStrategy">
            <summary>
            Specifies the level of checking that NI Vision performs when it reads text and analyzes it to 
            determine if the read objects match trained characters. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrReadStrategy.Aggressive">
            <summary>
            Configures NI Vision to perform fewer checks when analyzing objects to determine if they match 
            trained characters. This option increases performance by 20 percent, but might result in inaccurate 
            reads. You can successfully use the aggressive strategy for most cases. Use the aggressive strategy 
            unless the character set or image quality requires more stringent analysis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrReadStrategy.Conservative">
            <summary>
            Configures NI Vision to perform more checks to determine if an object matches a trained character. 
            This strategy is slower than the aggressive strategy, but it is more accurate and results in fewer 
            mismatches. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrReadResolution">
            <summary>
            Specifies the resolution the 
            <see cref="M:NationalInstruments.Vision.Analysis.OcrSession.ReadText(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method uses to 
            read characters. Refer to the <format type="italics">NI OCR Training Interface Help</format> 
            for more information.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrReadResolution.LowResolution">
            <summary>
            Configures NI Vision to use low resolution during the read process. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrReadResolution.MediumResolution">
            <summary>
            Configures NI Vision to use medium resolution during the read process. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrReadResolution.HighResolution">
            <summary>
            Configures NI Vision to use high resolution during the read process. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrThresholdMode">
            <summary>
            Specifies how NI Vision calculates the threshold method you want to use to analyze an image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrThresholdMode.FixedRange">
            <summary>
            Performs no automatic calculations. You manually set the threshold value. This mode provides the fastest thresholding method. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrThresholdMode.ComputedUniform">
            <summary>
            Calculates a single threshold value for the entire ROI.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrThresholdMode.ComputedLinear">
            <summary>
            Calculates a value on the left side of the ROI, calculates a value on the right size of the ROI, and 
            then linearly fills the middle values from left to right. The size of the steps from which to 
            calculate the left and right values is based on the value of 
            <see cref="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.BlockCount" crefType="PartiallyQualified"/>.
            Use this mode when the light intensity varies uniformly across the ROI. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrThresholdMode.ComputedNonlinear">
            <summary>
            Divides the ROI into the number of blocks specified by 
            <see cref="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.BlockCount" crefType="PartiallyQualified"/>, 
            calculates a threshold value for each block, and then uses the value to extract pixel data. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters">
            <summary>
            Specifies the predefined characters for the corresponding character position.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.AnyCharacter">
            <summary>
            Specifies that any character is valid for the corresponding position.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.UserDefinedCharacters">
            <summary>
            Indicates that the valid characters for this position are specified by a user-defined character string. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.Alphabetic">
            <summary>
            Specifies that the corresponding position can contain only alphabetical characters. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.AlphaNumeric">
            <summary>
            Specifies that the corresponding position contains alphabetic characters and the 
            numerical characters 0 to 9.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.UppercaseLetters">
            <summary>
            Specifies that the corresponding position can contain only uppercase alphabetical characters. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.LowercaseLetters">
            <summary>
            Specifies that the corresponding position can contain only lowercase alphabetical characters. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.DecimalDigits">
            <summary>
            Specifies that the corresponding position can contain only numerical characters from 0 to 9. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.HexadecimalDigits">
            <summary>
            Specifies that the corresponding position can contain only hexadecimal numerical characters, 
            which includes 0 to 9 and A to F. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.Pattern">
            <summary>
            Specifies that the corresponding position can contain only a pattern. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OcrPredefinedCharacters.ForceSpace">
            <summary>
            Specifies that the corresponding position is ignored and is replaced by a space in the output string. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SubPixelAccuracy">
            <summary>
            Specifies the number of samples to obtain from a pixel. For example, a subpixel accuracy of one-fourth specifies that each pixel is split into four subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.None">
            <summary>
            Does not split pixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneHalf">
            <summary>
            Splits each pixel into 2 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneThird">
            <summary>
            Splits each pixel into 3 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneFourth">
            <summary>
            Splits each pixel into 4 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneFifth">
            <summary>
            Splits each pixel into 5 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneSixth">
            <summary>
            Splits each pixel into 6 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneSeventh">
            <summary>
            Splits each pixel into 7 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneEighth">
            <summary>
            Splits each pixel into 8 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneNinth">
            <summary>
            Splits each pixel into 9 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneTenth">
            <summary>
            Splits each pixel into 10 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneEleventh">
            <summary>
            Splits each pixel into 11 subpixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SubPixelAccuracy.OneTwelfth">
            <summary>
            Splits each pixel into 12 subpixels.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SearchStrategy">
            <summary>
            Specifies how the features of the image are used during the search phase. Use the search strategy 
            parameter to optimize the speed of the pattern matching algorithm by allowing the algorithm to 
            inspect less data from the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SearchStrategy.Conservative">
            <summary>
            Instructs the pattern matching algorithm to use the largest possible amount of information from the image at the expense of slowing down the speed of the algorithm. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SearchStrategy.Balanced">
            <summary>
            Instructs the pattern matching algorithm to balance the amount of information from the image it uses with the speed of the algorithm.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SearchStrategy.Aggressive">
            <summary>
            Instructs the pattern matching algorithm to use a lower amount of information from the image, which allows the algorithm to run quickly but at the expense of accuracy. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SearchStrategy.VeryAggressive">
            <summary>
            Instructs the pattern matching algorithm to use the smallest possible amount of information from the image, which allows the algorithm to run at the highest speed possible but at the expense of accuracy. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GeometricMatchingSearchStrategy">
            <summary>
            Specifies how the features of the image are used during the search phase. Use the search strategy parameter to 
            optimize the speed of the pattern matching algorithm by allowing the algorithm to inspect less data from the image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricMatchingSearchStrategy.Conservative">
            <summary>
            Instructs the pattern matching algorithm to use the largest possible amount of information from the 
            image at the expense of slowing down the speed of the algorithm. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricMatchingSearchStrategy.Balanced">
            <summary>
            Instructs the pattern matching algorithm to balance the amount of information from the image 
            it uses with the speed of the algorithm. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricMatchingSearchStrategy.Aggressive">
            <summary>
            Instructs the pattern matching algorithm to use a lower amount of information from the image, which allows the 
            algorithm to run quickly but at the expense of accuracy. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ContrastMode">
            <summary>
            Specifies whether to search for matches with the same contrast or reverse contrast as 
            the template.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ContrastMode.Original">
            <summary>
            Searches for matches with the same contrast as the template.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ContrastMode.Reversed">
            <summary>
            Searches for matches with the inverse contrast of the template.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ContrastMode.Both">
            <summary>
            Searches for matches with the same contrast and inverse contrast.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LearnMode">
            <summary>
            Specifies the invariance mode the method uses when learning the pattern.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LearnMode.All">
            <summary>
            The method extracts information for shift- and rotation-invariant matching. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LearnMode.ShiftInformation">
            <summary>
            The method extracts information for shift-invariant matching. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LearnMode.RotationInformation">
            <summary>
            The method extracts information for rotation-invariant matching. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MatchMode">
            <summary>
            Specifies how to look for the pattern in the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MatchMode.ShiftInvariant">
            <summary>
            Searches for occurrences of the template image anywhere in the searchRect, assuming that the pattern is not rotated more than plus or minus 4 degrees. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MatchMode.RotationInvariant">
            <summary>
            Searches for occurrences of the pattern in the image with no restriction on the rotation of the pattern. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierType">
            <summary>
            Specifies the types of objects that a classifier can classify.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ClassifierType.Custom">
            <summary>
            The classifier session classifies vectors of doubles. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ClassifierType.Particle">
            <summary>
            The classifier session classifies particles in binary images. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ClassifierType.Color">
            <summary>
            The classifier session classifies particles based on color. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ClassifierType.TextureDefect">
            <summary>
            The classifier session classifies particles based on Texture Defect. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.WriteClassifierFileMode">
            <summary>
            Specifies what information to write to a classifier file.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WriteClassifierFileMode.All">
            <summary>
            Writes all information to the classifier file. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WriteClassifierFileMode.ClassifyOnly">
            <summary>
            Write only the information needed to classify to the classifier file. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ReadClassifierFileMode">
            <summary>
            Specifies the type of information to read from a classifier file.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ReadClassifierFileMode.All">
            <summary>
            Reads all data, including samples and properties.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ReadClassifierFileMode.Samples">
            <summary>
            Reads just the samples.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ReadClassifierFileMode.Properties">
            <summary>
            Reads just the properties.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierEngineType">
            <summary>
            Specifies the type of an engine on a classifier session.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ClassifierEngineType.None">
            <summary>
            This classifier has not been trained yet, and so has no engine.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ClassifierEngineType.NearestNeighbor">
            <summary>
            This classifier has been trained with the Nearest Neighbor engine.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ClassifierEngineType.SupportVectorMachine">
            <summary>
            This classifier has been trained with the SVM engine.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.NearestNeighborMethod">
            <summary>
            Specifies the methods to use with the Nearest Neighbor algorithm.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NearestNeighborMethod.MinimumMeanDistance">
            <summary>
            The minimum mean distance method.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NearestNeighborMethod.KNearestNeighbor">
            <summary>
            The k-nearest neighbor method. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NearestNeighborMethod.NearestPrototype">
            <summary>
            The nearest prototype method.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.NearestNeighborMetric">
            <summary>
            Specifies the metrics to use with the Nearest Neighbor algorithm.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NearestNeighborMetric.Maximum">
            <summary>
            The maximum metric. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NearestNeighborMetric.Sum">
            <summary>
            The sum metric. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.NearestNeighborMetric.Euclidean">
            <summary>
            The Euclidean metric. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ThresholdMethod">
            <summary>
            Defines how a method uses binary thresholding. For information about automatic 
            thresholding methods, refer to the <format type="italics">Thresholding</format> section of 
            the <format type="italics">NI Vision Concepts Help</format>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ThresholdMethod.Clustering">
            <summary>
            Sorts the histogram of the image within a discrete number of classes corresponding to the number of phases perceived in an image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ThresholdMethod.Entropy">
            <summary>
            Best for detecting particles that are present in minuscule proportions on the image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ThresholdMethod.Metric">
            <summary>
            Calculates an optimal threshold value using the surfaces representing the initial gray scale. Well-suited for images in which classes are not too disproportionate.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ThresholdMethod.Moments">
            <summary>
            Well-suited for images that have poor contrast.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ThresholdMethod.InterclassVariance">
            <summary>
            Determines an optimal threshold by maximizing the between-class variation with respect to the threshold. 
            Well-suited for images in which classes have well separated pixel value distributions.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ThresholdType">
            <summary>
            Specifies the type of thresholding to use.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ThresholdType.Manual">
            <summary>
            Uses manual thresholding. Manual thresholding is usesful if all the objects of interest in a grayscale
            image fall within a continuous range of intensities and you can specify the threshold range manually.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ThresholdType.Auto">
            <summary>
            Uses automatic thresholding. Automatic thresholding is well-suited for conditions in which the 
            light intensity varies from image to image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ThresholdType.Local">
            <summary>
            Uses local thresholding. Use local thresholding to isolate objects of interest from the background in
            images that exhibit nonuniform lighting changes.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColorClassifierResolution">
            <summary>
            Specifies the color resolution of feature vectors.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorClassifierResolution.High">
            <summary>
            Sets the color resolution to High, which enables 512 elements of feature vectors.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorClassifierResolution.Medium">
            <summary>
            Sets the color resolution to Medium, which enables 128 elements of feature vectors.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorClassifierResolution.Low">
            <summary>
            Sets the color resolution to Low, which enables 64 elements of feature vectors.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleType">
            <summary>
            Specifies what kind of particles to search for.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ParticleType.Bright">
            <summary>
            Searches for bright particles.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ParticleType.Dark">
            <summary>
            Searches for dark particles. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.KernelFamily">
            <summary>
            Specifies the family of the kernel matrix. For more information about kernels, refer to the <format type="italics">Image Processing</format> topic of the <format type="italics">NI Vision Concepts Help</format>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.KernelFamily.Gradient">
            <summary>
            The kernel is in the gradient family. Gradient kernels highlight the variations of light intensity along a specific direction, which has the effect of outlining edges and revealing texture. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.KernelFamily.Laplacian">
            <summary>
            The kernel is in the Laplacian family. Laplacian kernels highlight the variation of the light intensity surrounding a pixel. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.KernelFamily.Smoothing">
            <summary>
            The kernel is in the smoothing family. Smoothing kernels attenuate the variations of light intensity in the neighborhood of a pixel. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.KernelFamily.Gaussian">
            <summary>
            The kernel is in the Gaussian family. Gaussian kernels attenuate the variations of light 
            intensity in the neighborhood of a pixel. A Gaussian kernel is similar to a smoothing filter, 
            but its blurring effect is more subdued. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SizeToKeep">
            <summary>
            Determines the size of the particles the method keeps after the erosion.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SizeToKeep.KeepLarge">
            <summary>
            The method keeps large particles remaining after the erosion. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SizeToKeep.KeepSmall">
            <summary>
            The method keeps small particles eliminated by the erosion. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.StructuringElementShape">
            <summary>
            Specifies the shape of the structuring element. For more information on structuring elements, refer to
            the <format type="italics">Binary Morphology</format> section in 
            the <format type="italics">NI Vision Concepts Help</format>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.StructuringElementShape.Square">
            <summary>
            Sets the strucuturing element to square.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.StructuringElementShape.Hexagon">
            <summary>
            Sets the strucuturing element to hexagon.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.BarcodeTypes">
            <summary>
            Specifies the type of a barcode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Codabar">
            <summary>
            The barcode is of type Codabar. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Code39">
            <summary>
            The barcode is of type Code 39. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Code93">
            <summary>
            The barcode is of type Code 93. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Code128">
            <summary>
            The barcode is of type Code 128. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Ean8">
            <summary>
            The barcode is of type EAN 8. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Ean13">
            <summary>
            The barcode is of type EAN 13. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.I2Of5">
            <summary>
            The barcode is of type Code 25. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Msi">
            <summary>
            The barcode is of type MSI code. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.UpcA">
            <summary>
            The barcode is of type UPC A. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Pharmacode">
            <summary>
            The barcode is of type Pharmacode. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.RssLimited">
            <summary>
            The barcode is of type GS1 DataBar. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.BarcodeTypes.Unknown">
            <summary>
            The type of barcode is unknown.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.Pdf417SearchMode">
            <summary>
            Specifies whether the method searches for one barcode or multiple barcodes.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Pdf417SearchMode.Multiple">
            <summary>
            The method searches for multiple barcodes. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Pdf417SearchMode.Single">
            <summary>
            The function searches for barcodes, stopping after locating one valid barcode. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRDimension">
            <summary>
            Specifies the dimensions of the QR code.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.AutoDetect">
            <summary>
            The method should automatically detect the dimensions of the QR code.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size11x11">
            <summary>
            Specifies the dimensions of the QR code as 11 x 11.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size13x13">
            <summary>
            Specifies the dimensions of the QR code as 13 x 13.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size15x15">
            <summary>
            Specifies the dimensions of the QR code as 15 x 15.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size17x17">
            <summary>
            Specifies the dimensions of the QR code as 17 x 17.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size21x21">
            <summary>
            Specifies the dimensions of the QR code as 21 x 21.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size25x25">
            <summary>
            Specifies the dimensions of the QR code as 25 x 25.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size29x29">
            <summary>
            Specifies the dimensions of the QR code as 29 x 29.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size33x33">
            <summary>
            Specifies the dimensions of the QR code as 33 x 33.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size37x37">
            <summary>
            Specifies the dimensions of the QR code as 37 x 37.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size41x41">
            <summary>
            Specifies the dimensions of the QR code as 41 x 41.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size45x45">
            <summary>
            Specifies the dimensions of the QR code as 45 x 45.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size49x49">
            <summary>
            Specifies the dimensions of the QR code as 49 x 49.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size53x53">
            <summary>
            Specifies the dimensions of the QR code as 53 x 53.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size57x57">
            <summary>
            Specifies the dimensions of the QR code as 57 x 57.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size61x61">
            <summary>
            Specifies the dimensions of the QR code as 61 x 61.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size65x65">
            <summary>
            Specifies the dimensions of the QR code as 65 x 65.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size69x69">
            <summary>
            Specifies the dimensions of the QR code as 69 x 69.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size73x73">
            <summary>
            Specifies the dimensions of the QR code as 73 x 73.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size77x77">
            <summary>
            Specifies the dimensions of the QR code as 77 x 77.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size81x81">
            <summary>
            Specifies the dimensions of the QR code as 81 x 81.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size85x85">
            <summary>
            Specifies the dimensions of the QR code as 85 x 85.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size89x89">
            <summary>
            Specifies the dimensions of the QR code as 89 x 89.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size93x93">
            <summary>
            Specifies the dimensions of the QR code as 93 x 93.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size97x97">
            <summary>
            Specifies the dimensions of the QR code as 97 x 97.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size101x101">
            <summary>
            Specifies the dimensions of the QR code as 101 x 101.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size105x105">
            <summary>
            Specifies the dimensions of the QR code as 105 x 105.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size109x109">
            <summary>
            Specifies the dimensions of the QR code as 109 x 109.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size113x113">
            <summary>
            Specifies the dimensions of the QR code as 113 x 113.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size117x117">
            <summary>
            Specifies the dimensions of the QR code as 117 x 117.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size121x121">
            <summary>
            Specifies the dimensions of the QR code as 121 x 121.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size125x125">
            <summary>
            Specifies the dimensions of the QR code as 125 x 125.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size129x129">
            <summary>
            Specifies the dimensions of the QR code as 129 x 129.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size133x133">
            <summary>
            Specifies the dimensions of the QR code as 133 x 133.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size137x137">
            <summary>
            Specifies the dimensions of the QR code as 137 x 137.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size141x141">
            <summary>
            Specifies the dimensions of the QR code as 141 x 141.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size145x145">
            <summary>
            Specifies the dimensions of the QR code as 145 x 145.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size149x149">
            <summary>
            Specifies the dimensions of the QR code as 149 x 149.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size153x153">
            <summary>
            Specifies the dimensions of the QR code as 153 x 153.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size157x157">
            <summary>
            Specifies the dimensions of the QR code as 157 x 157.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size161x161">
            <summary>
            Specifies the dimensions of the QR code as 161 x 161.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size165x165">
            <summary>
            Specifies the dimensions of the QR code as 165 x 165.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size169x169">
            <summary>
            Specifies the dimensions of the QR code as 169 x 169.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size173x173">
            <summary>
            Specifies the dimensions of the QR code as 173 x 173.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDimension.Size177x177">
            <summary>
            Specifies the dimensions of the QR code as 177 x 177.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRPolarity">
            <summary>
            Specifies the polarity of the QR code to search for.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRPolarity.AutoDetect">
            <summary>
            The method should determine the polarity of the QR code.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRPolarity.BlackOnWhite">
            <summary>
            The method should search for a QR code with dark data on a bright background.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRPolarity.WhiteOnBlack">
            <summary>
            The method should search for a QR code with bright data on a dark background.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRMirrorMode">
            <summary>
            Specifies if the QR code appears normally in the image of if the code appears mirrored in the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRMirrorMode.AutoDetect">
            <summary>
            The method should determine if the QR code appears normal or mirrored.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRMirrorMode.Normal">
            <summary>
            The method should expect the QR code to appear normal.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRMirrorMode.Mirrored">
            <summary>
            The method should expect the QR code to appear mirrored.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRModelType">
            <summary>
            Specifies what type of QR code the detector will search for.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRModelType.AutoDetect">
            <summary>
            Specifies that the method will auto-detect what type of matrix the QR code is. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRModelType.Micro">
            <summary>
            Specifies the QR code is of a micro type. Micro QR codes have a single target in the top left of the code. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRModelType.Model1">
            <summary>
            Specifies the QR code is of a model1 type. This means the code has target patterns in the top left, top right, bottom left, and no alignment patterns in the data.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRModelType.Model2">
            <summary>
            Specifies the QR code is of a model2 type. This is most common type of QR code. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRRotationMode">
            <summary>
            Specifies the amount of QR code rotation the method should allow for.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRRotationMode.Unlimited">
            <summary>
            The method allows for unlimited rotation.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRRotationMode.Degrees0">
            <summary>
            The method allows for ±5 degrees of rotation.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRRotationMode.Degrees90">
            <summary>
            The method allows for between 85 and 95 degrees of rotation.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRRotationMode.Degrees180">
            <summary>
            The method allows for between 175 and 185 degrees of rotation.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRRotationMode.Degrees270">
            <summary>
            The method allows for between 265 and 275 degrees of rotation.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRDemodulationMode">
            <summary>
            Specifies the mode the method should use to demodulate (determine which cells are "on" or "off") the QR code.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDemodulationMode.AutoDetect">
            <summary>
            The method will try each demodulation mode and use the one which decodes the QR code within the fewest iterations and utilizing the least amount of error correction. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDemodulationMode.Histogram">
            <summary>
            The method uses a histogram of all of the QR cells to calculate a threshold. This threshold determines if a cell is on or off. This is the fastest mode, but requires images with consistent levels of contrast.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDemodulationMode.LocalContrast">
            <summary>
            The method examines each of the cell's neighbors to determine if the cell is on or off. This mode is slower, but works with images that have inconsistent levels of contrast. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDemodulationMode.Combined">
            <summary>
            The method uses the histogram of the QR code to calculate a threshold. For cells with pixel 
            values that are sufficiently below or above this threshold, the method will use the threshold 
            to determine if the cell is on or off. If the cell pixel values are close to the threshold, 
            the method will use the LocalContrast mode to determine if the cell is on or off. This mode is 
            slower, but works with images that contain a QR code with extremely low cell fill percentages 
            or gross print growth errors.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRDemodulationMode.All">
            <summary>
            The method tries Histogram, then LocalContrast, and then Combined, stopping once one mode is successful.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRCellSampleSize">
            <summary>
            Specifies the sample size, in pixels, the method should take to determine if each cell is on or off.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellSampleSize.AutoDetect">
            <summary>
            The method will try each sample size and use the one which decodes the QR code within the fewest iterations and utilizing the least amount of error correction. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellSampleSize.Size1x1">
            <summary>
            The method will use a 1x1 sized sample from each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellSampleSize.Size2x2">
            <summary>
            The method will use a 2x2 sized sample from each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellSampleSize.Size3x3">
            <summary>
            The method will use a 3x3 sized sample from each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellSampleSize.Size4x4">
            <summary>
            The method will use a 4x4 sized sample from each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellSampleSize.Size5x5">
            <summary>
            The method will use a 5x5 sized sample from each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellSampleSize.Size6x6">
            <summary>
            The method will use a 6x6 sized sample from each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellSampleSize.Size7x7">
            <summary>
            The method will use a 7x7 sized sample from each cell.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRCellFilterMode">
            <summary>
            Specifies the mode used to determine the pixel value for each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.AutoDetect">
            <summary>
            The method will try all filter modes and uses the one that decodes the QR code within the fewest iterations and utilizing the least amount of error correction. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.Average">
            <summary>
            The method sets the pixel value for the cell to the average of the sampled pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.Median">
            <summary>
            The method sets the pixel value for the cell to the median of the sampled pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.CentralAverage">
            <summary>
            The method sets the pixel value for the cell to the average of the pixels in the center of the cell sample. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.HighAverage">
            <summary>
            The method sets the pixel value for the cell to the average value of the ninth of the sampled pixels with the highest pixel values. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.LowAverage">
            <summary>
            The method sets the pixel value for the cell to the average value of the half of the sampled pixels with the lowest pixel values.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.VeryHighAverage">
            <summary>
            The method sets the pixel value for the cell to the average value of the ninth of the sampled pixels with the highest pixel values.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.VeryLowAverage">
            <summary>
            The method sets the pixel value for the cell to the average value of the ninth of the sampled pixels with the lowest pixel values.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRCellFilterMode.All">
            <summary>
            The method tries each filter mode, starting with Average and ending with VeryLowAverage, stopping once a filter mode decodes correctly.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRStreamMode">
            <summary>
            Specifies the format of the data encoded in the stream. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRStreamMode.Numeric">
            <summary>
            Specifies that the data was encoded using numeric mode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRStreamMode.Alphanumeric">
            <summary>
            Specifies that the data is encoded using alpha-numeric mode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRStreamMode.RawByte">
            <summary>
            Specifies that the data was not encoded but is only raw binary bytes, or encoded in JIS-8. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRStreamMode.Ean128Token">
            <summary>
            Specifies that the data has a special meaning represented by the application ID. 
            The application ID is located in the tokenized data stream.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRStreamMode.Ean128Data">
            <summary>
            Specifies that the data has a special meaning represented by the application ID.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRStreamMode.Eci">
            <summary>
            Specifies that the data is meant to be read using the language represented in the language ID. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.QRStreamMode.Kanji">
            <summary>
            Specifies that the data is encoded in Shift-JIS8 Japanese.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixGradingMode">
            <summary>
            Define what calculations the method makes to prepare to grade the Data Matrix barcode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixGradingMode.None">
            <summary>
            The method does not make any preparatory calculations. Attempts to grade this Data Matrix barcode will generate an error.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixGradingMode.PrepareForAim">
            <summary>
            The method prepares the image for grading using the AIM Print Quality metrics.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixEcc">
            <summary>
            Specifies the ECC used for the Data Matrix barcode in the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.AutoDetect">
            <summary>
            Sets the method to determine the Data Matrix barcode ECC automatically. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc000">
            <summary>
            Sets the method to read Data Matrix barcodes of ECC 000 only. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc050">
            <summary>
            Sets the method to read Data Matrix barcodes of ECC 050 only. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc080">
            <summary>
            Sets the method to read Data Matrix barcodes of ECC 080 only.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc100">
            <summary>
            Sets the method to read Data Matrix barcodes of ECC 100 only. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc140">
            <summary>
            Sets the method to read Data Matrix barcodes of ECC 140 only. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc000To140">
            <summary>
            Sets the method to read Data Matrix barcodes of ECC 000, ECC 050, ECC 080, ECC 100, and ECC 140 only. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc200">
            <summary>
            Sets the method to read Data Matrix barcodes of ECC 200 only. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixPolarity">
            <summary>
            Specifies the data-to-background contrast for the Data Matrix barcode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixPolarity.AutoDetect">
            <summary>
            Sets the method to determine the Data Matrix barcode polarity automatically. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixPolarity.BlackDataOnWhiteBackground">
            <summary>
            Sets the method to read Data Matrix barcodes with dark data on a bright background. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixPolarity.WhiteDataOnBlackBackground">
            <summary>
            Sets the method to read Data Matrix barcodes with bright data on a dark background. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode">
            <summary>
            Specifies the fill percentage for a cell that is in the "on" state.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode.AutoDetect">
            <summary>
            Sets the function to determine the Data Matrix barcode cell fill percentage automatically. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode.Low">
            <summary>
            Sets the function to read Data Matrix barcodes with a cell fill percentage of less than 30 percent. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode.Normal">
            <summary>
            Sets the function to read Data Matrix barcodes with a cell fill percentage greater than or equal to 30 percent. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixMirrorMode">
            <summary>
            Specifies if the Data Matrix barcode appears normally in the image or if the Data Matrix barcode appears mirrored in the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixMirrorMode.AutoDetect">
            <summary>
            Specifies that the method should determine if the Data Matrix barcode is mirrored. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixMirrorMode.Normal">
            <summary>
            Specifies that the method should expect the Data Matrix barcode to appear normal. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixMirrorMode.Mirrored">
            <summary>
            Specifies that the method should expect the Data Matrix barcode to appear mirrored. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixRotationMode">
            <summary>
            Specifies the amount of Data Matrix barcode rotation the method should allow for.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Unlimited">
            <summary>
            The method allows for unlimited rotation.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Degrees0">
            <summary>
            The method allows for between -5 and 5 degrees of rotation. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Degrees90">
            <summary>
            The method allows for between 85 and 95 degrees of rotation.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Degrees180">
            <summary>
            The method allows for between 175 and 185 degrees of rotation. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Degrees270">
            <summary>
            The method allows for between 265 and 275 degrees of rotation.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode">
            <summary>
            Specifies the mode the method should use to demodulate (determine which cells are on and which cells are off) the Data Matrix barcode.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.AutoDetect">
            <summary>
            The method will try each demodulation mode and use the one which decodes the Data Matrix barcode within the fewest iterations and utilizing the least amount of error correction. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.Histogram">
            <summary>
            The method uses a histogram of all of the Data Matrix cells to calculate a threshold. This threshold determines if a cell is on or off. This is the fastest mode, but requires images with consistent levels of contrast. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.LocalContrast">
            <summary>
            The method examines each of the cell's neighbors to determine if the cell is on or off. This mode is slower, but works with images that have inconsistent levels of contrast. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.Combined">
            <summary>
            The function uses the histogram of the Data Matrix barcode to calculate a threshold. For cells with pixel values 
            that are sufficiently below or above this threshold, the function will use the threshold to determine if the cell 
            is on or off. If the cell pixel values are close to the threshold, the function will use the LocalContrast mode to 
            determine if the cell is on or off. This mode is slower, but works with images that contain a Data Matrix barcode 
            with extremely low cell fill percentages or gross print growth errors. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.All">
            <summary>
            The method tries Histogram, then LocalContrast and then Combined, stopping once one mode is successful. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize">
            <summary>
            Specifies the sample size, in pixels, the function should take to determine if each cell is on or off.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.AutoDetect">
            <summary>
            The function will try each sample size and use the one which decodes the Data Matrix barcode within the fewest iterations and utilizing the least amount of error correction. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size1x1">
            <summary>
            The function will use a 1 x 1 sized sample from each cell. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size2x2">
            <summary>
            The function will use a 2 x 2 sized sample from each cell. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size3x3">
            <summary>
            The function will use a 3 x 3 sized sample from each cell. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size4x4">
            <summary>
            The function will use a 4 x 4 sized sample from each cell. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size5x5">
            <summary>
            The function will use a 5 x 5 sized sample from each cell. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size6x6">
            <summary>
            The function will use a 6 x 6 sized sample from each cell. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size7x7">
            <summary>
            The function will use a 7 x 7 sized sample from each cell. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode">
            <summary>
            Specifies the mode the function uses to determine the pixel value for each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.AutoDetect">
            <summary>
            The function will try all filter modes and uses the one that decodes the Data Matrix barcode within the fewest iterations and utilizing the least amount of error correction. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.Average">
            <summary>
            The function sets the pixel value for the cell to the average of the sampled pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.Median">
            <summary>
            The function sets the pixel value for the cell to the median of the sampled pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.CentralAverage">
            <summary>
            The function sets the pixel value for the cell to the average of the pixels in the center of the cell sample. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.HighAverage">
            <summary>
            The function sets the pixel value for the cell to the average value of the half of the sampled pixels with the highest pixel values. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.LowAverage">
            <summary>
            The function sets the pixel value for the cell to the average value of the half of the sampled pixels with the lowest pixel values. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.VeryHighAverage">
            <summary>
            The function sets the pixel value for the cell to the average value of the ninth of the sampled pixels with the highest pixel values. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.VeryLowAverage">
            <summary>
            The function sets the pixel value for the cell to the average value of the ninth of the sampled pixels with the lowest pixel values. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.All">
            <summary>
            The function tries each filter mode, starting with Average and ending with VeryLowAverage, stopping once a filter mode decodes correctly. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixAdvancedProcessing">
            <summary>
            Specifies the mode to use to determine the pixel value for each cell.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixAdvancedProcessing.LineDetection">
            <summary>
            Enables the line detection algorithm. Use LineDetection if the image has a cluttered background.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixAdvancedProcessing.HighlightFilter">
            <summary>
            Enables the highlight filter. Use the Highlight Filter if the image is blurry or has low contrast.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixAdvancedProcessing.AggressiveProcessing">
            <summary>
            Enables aggressive reading. Aggressive reading returns the decoded code immediately without minimizing detected errors.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixAdvancedProcessing.EnableFNC1">
            <summary>
            Enables decoding of FNC1 characters. Use this option if the data matrix code is GS1 compliant and encoded with FNC1 and Group Separators.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DataMatrixAdvancedProcessing.RefineBoundingBox">
            <summary>
            Enables refining the location of the bounding box. Use this option for a more consistent and accurate location.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.AimGrade">
            <summary>
            Describes the letter grade assigned to a Data Matrix barcode based on the AIM Print Quality standard, 
            where A represents the best grade and F represents the worst grade.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.AimGrade.F">
            <summary>
            Assigns the Data Matrix barcode a grade of F.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.AimGrade.D">
            <summary>
            Assigns the Data Matrix barcode a grade of D.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.AimGrade.C">
            <summary>
            Assigns the Data Matrix barcode a grade of C.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.AimGrade.B">
            <summary>
            Assigns the Data Matrix barcode a grade of B.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.AimGrade.A">
            <summary>
            Assigns the Data Matrix barcode a grade of A.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ConcentricRakeDirection">
            <summary>
            Specifies the direction in which the method searches for edges along the search lines.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ConcentricRakeDirection.CounterClockwise">
            <summary>
            Searches for edges in a counter-clockwise direction.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ConcentricRakeDirection.Clockwise">
            <summary>
            Searches for edges in a clockwise direction.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EdgeProcess">
            <summary>
            Defines the edges for which the method looks.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgeProcess.First">
            <summary>
            The method looks for the first edge. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgeProcess.FirstAndLast">
            <summary>
            The method looks for the first and last edge. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgeProcess.All">
            <summary>
            The method looks for all edges. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgeProcess.Best">
            <summary>
            The method looks for the best edge. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EdgePolaritySearchMode">
            <summary>
            Determines the polarity of edges to search for.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgePolaritySearchMode.All">
            <summary>
            Searches for all edges. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgePolaritySearchMode.Rising">
            <summary>
            Searches for rising edges only. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgePolaritySearchMode.Falling">
            <summary>
            Searches for falling edges only. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EdgePolarity">
            <summary>
            Specifies the polarity of an edge.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgePolarity.Falling">
            <summary>
            The edge is a falling edge.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgePolarity.Rising">
            <summary>
            The edge is a rising edge.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColumnProcessingMode">
            <summary>
            Specifies how the method processes the data extracted for edge detection.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColumnProcessingMode.Average">
            <summary>
            Averages the data extracted for edge detection. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColumnProcessingMode.Median">
            <summary>
            Takes the median of the data extracted for edge detection. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LocalThresholdMethod">
            <summary>
            Defines the way the method performs the local threshold.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LocalThresholdMethod.NiBlack">
            <summary>
            The method computes thresholds for each pixel based on its local statistics using the Niblack local thresholding algorithm. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LocalThresholdMethod.BackgroundCorrection">
            <summary>
            The method performs background correction first to eliminate non-uniform lighting effects, then performs thresholding using the Otsu thresholding algorithm. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MorphologyMethod">
            <summary>
            The morphological transformation the function applies. For more information about 
            morphological transformations, refer to the <format type="italics">Binary Morphology</format> topic 
            in the <format type="italics">NI Vision Concepts Help</format>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.AutoMedian">
            <summary>
            Uses dual combinations of openings and closings to generate simpler particles that have fewer details.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.Close">
            <summary>
            A dilation followed by an erosion.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.Dilate">
            <summary>
            Eliminates tiny holes isolated in particles and expands the contour of the particles.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.Erode">
            <summary>
            Eliminates isolated background pixels.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.Gradient">
            <summary>
            Extracts inner and outer contours of particles.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.GradientOut">
            <summary>
            Extracts the outer contours of particles.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.GradientIn">
            <summary>
            Extracts the inner contours of particles.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.HitMiss">
            <summary>
            Eliminates pixels that do not have the same pattern as the structuring element.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.Open">
            <summary>
            An erosion followed by a dilation.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.PClose">
            <summary>
            A succession of seven closings and openings.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.POpen">
            <summary>
            A succession of seven openings and closings.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.Thick">
            <summary>
            Activates all pixels that match the pattern in the structuring element.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyMethod.Thin">
            <summary>
            Deactivates all pixels that matches the pattern in the structuring element.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SkeletonMethod">
            <summary>
            Specifies how the method calculates the skeleton. For more information about skeleton functions, refer to 
            the <format type="italics">Binary Morphology</format> section in 
            the <format type="italics">NI Vision Concepts Help</format>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SkeletonMethod.L">
            <summary>
            Uses an L-shaped structuring element in the skeleton function. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SkeletonMethod.M">
            <summary>
            Uses an M-shaped structuring element in the skeleton function. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SkeletonMethod.Inverse">
            <summary>
            Uses an L-shaped structuring element on an inverse of the image in the skeleton function. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ExtractionMode">
            <summary>
            Specifies how the method identifies the locations of the curves in the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractionMode.NormalImage">
            <summary>
            Specifies that the method makes no assumptions about the uniformity of objects in the image or the image background. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractionMode.UniformRegions">
            <summary>
            Specifies that the method assumes that either the objects in the image or the image background consists of 
            uniform pixel values. This allows the method to more accurately calculate the external curves of the objects. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EdgeFilterSize">
            <summary>
            Specifies the width of the edge filter the function uses to identify curves in the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgeFilterSize.Fine">
            <summary>
            Specifies that the method uses a fine, or narrow, edge filter.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgeFilterSize.Normal">
            <summary>
            Specifies that the method uses a normal edge filter.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.EdgeFilterSize.ContourTracing">
            <summary>
            Sets the Edge Filter Size to contour tracing, which provides the best results for contour extraction but increases the time required to process the image.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LinearAveragesModes">
            <summary>
            Specifies which mean line profiles the method calculates. Use bitwise-OR to combine two or more values in order to calculate multiple mean line profiles with one function call.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LinearAveragesModes.None">
            <summary>
            Specifies that the method calculate no mean line profiles.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LinearAveragesModes.ColumnAverages">
            <summary>
            Specifies that the method calculates the mean pixel value of each column.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LinearAveragesModes.RowAverages">
            <summary>
            Specifies that the method calculates the mean pixel value of each row.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LinearAveragesModes.RisingDiagonalAverages">
            <summary>
            Specifies that the method calculates the mean pixel value of each diagonal running from the lower left to the upper right of the inspected area of the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LinearAveragesModes.FallingDiagonalAverages">
            <summary>
            Specifies that the method calculates the mean pixel value of each diagonal running 
            from the upper left to the lower right of the inspected area of the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LinearAveragesModes.AllLinearAverages">
            <summary>
            Specifies that the method calculates all four linear mean pixel values. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SymmetryOperation">
            <summary>
            Specifies the type of symmetry to use.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SymmetryOperation.Horizontal">
            <summary>
            Flips the image over the central horizontal axis.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SymmetryOperation.Vertical">
            <summary>
            Flips the image over the central vertical axis.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SymmetryOperation.Central">
            <summary>
            Flips the image over both the central vertical and central horizontal axes.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SymmetryOperation.DiagonalLeftToRight">
            <summary>
            Flips the image over an axis from the upper left corner to lower right corner.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SymmetryOperation.DiagonalRightToLeft">
            <summary>
            Flips the image over an axis from the upper right corner to lower left corner.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RectangleOrientation">
            <summary>
            Specifies the orientation of a resulting rectangular image relative to an annulus.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RectangleOrientation.BaseInside">
            <summary>
            Specifies that the base of the rectangular image lies along the inside edge of the annulus. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RectangleOrientation.BaseOutside">
            <summary>
            Specifies that the base of the rectangular image lies along the outside edge of the annulus. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.Direction3D">
            <summary>
            Defines the 3D orientation.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Direction3D.NorthWest">
            <summary>
            The viewing angle for the 3D image is from the northwest. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Direction3D.SouthWest">
            <summary>
            The viewing angle for the 3D image is from the southwest. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Direction3D.SouthEast">
            <summary>
            The viewing angle for the 3D image is from the southeast. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Direction3D.NorthEast">
            <summary>
            The viewing angle for the 3D image is from the northeast. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.Plane3D">
            <summary>
            Specifies the view a method uses to show complex images.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Plane3D.Real">
            <summary>
            The method shows the real part of complex images. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Plane3D.Imaginary">
            <summary>
            The method shows the imaginary part of complex images. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Plane3D.Magnitude">
            <summary>
            The method shows the magnitude part of complex images. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.Plane3D.Phase">
            <summary>
            The method shows the phase part of complex images. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MathLookupOperator">
            <summary>
            The transform function a method uses.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MathLookupOperator.Linear">
            <summary>
            The method uses linear remapping.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MathLookupOperator.Log">
            <summary>
            The method uses logarithmic remapping. Enhances contrast for small pixel values and reduces contrast for large pixel values. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MathLookupOperator.Exp">
            <summary>
            The method uses exponential remapping. Enhances contrast for large pixel values and reduces contrast for small pixel values. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MathLookupOperator.Square">
            <summary>
            The method uses square remapping. Similar to exponential remapping but with a more gradual effect. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MathLookupOperator.SquareRoot">
            <summary>
            The method uses square root remapping. Similar to logarithmic remapping but with a more gradual effect. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MathLookupOperator.PowX">
            <summary>
            The method uses power X remapping. Causes variable effect depending on power. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MathLookupOperator.Pow1X">
            <summary>
            The method uses power 1/X remapping. Causes variable effects depending on power. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ComparisonFunction">
            <summary>
            Specifies how the method compares images.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ComparisonFunction.ClearLess">
            <summary>
            The comparison is true if the source pixel value is less than the comparison image pixel value. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ComparisonFunction.ClearLessOrEqual">
            <summary>
            The comparison is true if the source pixel value is less than or equal to the comparison image pixel value. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ComparisonFunction.ClearEqual">
            <summary>
            The comparison is true if the source pixel value is equal to the comparison image pixel value. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ComparisonFunction.ClearGreaterOrEqual">
            <summary>
            The comparison is true if the source pixel value is greater than or equal to the comparison image pixel value. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ComparisonFunction.ClearGreater">
            <summary>
            The comparison is true if the source pixel value is greater than the comparison image pixel value. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.PeakOrValley">
            <summary>
            Determines if the method detects peaks or detects valleys.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.PeakOrValley.Peaks">
            <summary>
            The method searches for peaks.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.PeakOrValley.Valleys">
            <summary>
            The method searches for valleys.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RakeDirection">
            <summary>
            Specifies the direction the method follows to search for edges along the search lines. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RakeDirection.LeftToRight">
            <summary>
            The method searches from the left side of the search area to the right side of the search area. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RakeDirection.RightToLeft">
            <summary>
            The method searches from the right side of the search area to the left side of the search area. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RakeDirection.TopToBottom">
            <summary>
            The method searches from the top side of the search area to the bottom side of the search area. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RakeDirection.BottomToTop">
            <summary>
            The method searches from the bottom side of the search area to the top side of the search area. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.StraightEdgeSearchMode">
            <summary>
            Specifies the options that are used to detect straight edges.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.StraightEdgeSearchMode.FirstRakeEdges">
            <summary>
            Fits a straight edge on the first points detected using a rake. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.StraightEdgeSearchMode.BestRakeEdges">
            <summary>
            Fits a straight edge on the best points detected using a rake. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.StraightEdgeSearchMode.BestHoughLine">
            <summary>
            Finds the strongest straight edge using all points detected on a rake. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.StraightEdgeSearchMode.FirstProjectionEdge">
            <summary>
            Uses the location of the first projected edge as the straight edge. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.StraightEdgeSearchMode.BestProjectionEdge">
            <summary>
            Finds the strongest projected edge location to determine the straight edge. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindReferenceDirection">
            <summary>
            The direction to search for the primary axis and the expected orientation of the primary axis.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindReferenceDirection.LeftToRightDirect">
            <summary>
            Searches from the left side of the search area to the right side of the search area for a direct axis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindReferenceDirection.LeftToRightIndirect">
            <summary>
            Searches from the left side of the search area to the right side of the search area for an indirect axis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindReferenceDirection.TopToBottomDirect">
            <summary>
            Searches from the top of the search area to the bottom of the search area for a direct axis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindReferenceDirection.TopToBottomIndirect">
            <summary>
            Searches from the top of the search area to the bottom of the search area for an indirect axis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindReferenceDirection.RightToLeftDirect">
            <summary>
            Searches from the right side of the search area to the left side of the search area for a direct axis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindReferenceDirection.RightToLeftIndirect">
            <summary>
            Searches from the right side of the search area to the left side of the search area for an indirect axis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindReferenceDirection.BottomToTopDirect">
            <summary>
            Searches from the bottom of the search area to the top of the search area for a direct axis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindReferenceDirection.BottomToTopIndirect">
            <summary>
            Searches from the bottom of the search area to the top of the search area for an indirect axis. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindTransformMode">
            <summary>
            Specifies how a function updates a coordinate transform.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindTransformMode.FindReference">
            <summary>
            Update both parts of the coordinate system. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FindTransformMode.UpdateTransform">
            <summary>
            Update only the new reference system. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LevelType">
            <summary>
            Determines how the method evaluates the threshold and hysteresis values.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LevelType.Absolute">
            <summary>
            The method evaluates the threshold and hysteresis values as absolute values. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.LevelType.Relative">
            <summary>
            The method evaluates the threshold and hysteresis values relative to the dynamic range of the given path. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SearchDirection">
            <summary>
            Determines the direction in which the Region of Interest (ROI) is examined when edge detection is performed.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SearchDirection.LeftToRight">
            <summary>
            Searches from the left of the ROI to the right.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SearchDirection.RightToLeft">
            <summary>
            Searches from the right of the ROI to the left.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SearchDirection.TopToBottom">
            <summary>
            Searches from the top of the ROI to the bottom.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SearchDirection.BottomToTop">
            <summary>
            Searches from the bottom of the ROI to the top.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SpokeDirection">
            <summary>
            Specifies the direction the method follows to search for edges along the search lines.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SpokeDirection.OutsideToInside">
            <summary>
            The method searches from the outside of the search area to the inside of the search area. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SpokeDirection.InsideToOutside">
            <summary>
            The method searches from the inside of the search area to the outside of the search area. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RakeProcessType">
            <summary>
            Specifies the Rake Process type the Edge Detection functions can use.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RakeProcessType.GetFirstEdges">
            <summary>
            Get First Edges process type. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RakeProcessType.GetFirstAndLastEdges">
            <summary>
            Get First and Last Edges process type. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RakeProcessType.GetAllEdges">
            <summary>
            Get All Edges process type. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RakeProcessType.GetBestEdges">
            <summary>
            Get Best Edges process type. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.AttenuateMode">
            <summary>
            Controls which frequencies a function attenuates.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.AttenuateMode.Low">
            <summary>
            The function attenuates low frequencies. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.AttenuateMode.High">
            <summary>
            The function attenuates high frequencies. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.TruncateMode">
            <summary>
            Specifies which frequencies the method truncates.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.TruncateMode.Low">
            <summary>
            The method truncates low frequencies. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.TruncateMode.High">
            <summary>
            The method truncates high frequencies. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColorSensitivity">
            <summary>
            Specifies the complexity of the color information in the image. In most cases, set this parameter to 
            Low. However, set this parameter to High to use more information and better distinguish colors in highly 
            complex images. As complexity increases, so does sensitivity. Two similar colors that may be identified 
            as being the same with Low may be identified as different colors with High. Refer to the 
            <format type="italics">NI Vision Concepts Help</format> for more information about color sensitivity.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorSensitivity.Low">
            <summary>
            Instructs the algorithm to divide the hue plane into a low number of sectors, allowing for simple color analysis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorSensitivity.Medium">
            <summary>
            Instructs the algorithm to divide the hue plane into a medium number of sectors, allowing for color analysis that balances sensitivity and complexity. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorSensitivity.High">
            <summary>
            Instructs the algorithm to divide the hue plane into a high number of sectors, allowing for complex, sensitive color analysis. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FontColor">
            <summary>
            Sets the color of the font.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FontColor.White">
            <summary>
            Draws text in white. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FontColor.Black">
            <summary>
            Draws text in black. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FontColor.Invert">
            <summary>
            Inverts the text pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FontColor.BlackOnWhite">
            <summary>
            Draws text in black with a white background. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.FontColor.WhiteOnBlack">
            <summary>
            Draws text in white with a black background. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OutlineMethod">
            <summary>
            Specifies how the method outlines edges.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OutlineMethod.Difference">
            <summary>
            Produces continuous contours by highlighting each pixel where an intensity variation occurs between itself and its three upper-left neighbors. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OutlineMethod.Gradient">
            <summary>
            Outlines contours where an intensity variation occurs along the vertical axis. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OutlineMethod.Prewitt">
            <summary>
            Extracts the outer contours of objects. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OutlineMethod.Roberts">
            <summary>
            Outlines the contours that highlight pixels where an intensity variation occurs along the diagonal axes. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OutlineMethod.Sigma">
            <summary>
            Outlines contours and details by setting pixels to the mean value found in their neighborhood, if their deviation from this value is not significant. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.OutlineMethod.Sobel">
            <summary>
            Extracts the outer contours of objects. As opposed to the Prewitt filter, the Sobel filter assigns a higher weight to the horizontal and vertical neighbors of the central pixel. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MeterNeedleColor">
            <summary>
            Specifies the color of the meter background and needle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeterNeedleColor.DarkOnLight">
            <summary>
            The meter has a dark-colored needle on a light background.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MeterNeedleColor.LightOnDark">
            <summary>
            The meter has a light-colored needle on a dark background.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ImageFeatureMode">
            <summary>
            Specifies which features from the color pattern the method uses.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ImageFeatureMode.ColorAndShape">
            <summary>
            Instructs the method to use the color and the shape features of the color pattern. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ImageFeatureMode.Color">
            <summary>
            Instructs the method to use the color features of the color pattern. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ImageFeatureMode.Shape">
            <summary>
            Instructs the method to use the shape features of the color pattern. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColorIgnoreMode">
            <summary>
            Specifies whether the function excludes certain colors from the color features of the template image. Any color the function excludes during the learning process is also excluded in the match phase.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorIgnoreMode.None">
            <summary>
            Specifies that the function does not ignore any pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorIgnoreMode.Black">
            <summary>
            Specifies that the function ignores black pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorIgnoreMode.White">
            <summary>
            Specifies that the function ignores white pixels. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ColorIgnoreMode.BlackAndWhite">
            <summary>
            Specifies that the function ignores black pixels and white pixels. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GeometricMatchModes">
            <summary>
            Specifies the search mode the method uses to look for the template image in the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricMatchModes.ShiftInvariant">
            <summary>
            Searches for occurrences of the template image in the inspection image, assuming that the template image is not rotated more than ± 5 degrees.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricMatchModes.RotationInvariant">
            <summary>
            Searches for occurrences of the template image in the inspection image with reduced restriction on the rotation of the template image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricMatchModes.ScaleInvariant">
            <summary>
            Searches for occurrences of the template image in the inspection image with reduced restriction on the size of the template image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricMatchModes.OcclusionInvariant">
            <summary>
            Searches for occurrences of the template image in the inspection image, allowing for a specified percentage of the template image to be occluded.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleMeasurementsCalibrationMode">
            <summary>
            Specifies whether to take pixel measurements or calibrated measurements on a particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ParticleMeasurementsCalibrationMode.Pixel">
            <summary>
            Takes pixel measurements on the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ParticleMeasurementsCalibrationMode.Calibrated">
            <summary>
            Takes calibrated measurements on the particle.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ParticleMeasurementsCalibrationMode.Both">
            <summary>
            Takes pixel measurements and calibrated measurements on the particle.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GeometricFeatureType">
            <summary>
            Describes the type of geometric feature.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.None">
            <summary>
            Specifies that the feature was not found.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.Circle">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.CircleFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.Ellipse">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.EllipseFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.ConstCurve">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.ConstCurveFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.Rectangle">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.RectangleFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.Leg">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.LegFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.Corner">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.CornerFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.ParallelLinePair">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.ParallelLinePairFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.PairOfParallelLinePairs">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.Line">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.LineFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricFeatureType.ClosedCurve">
            <summary>
            Specifies that the feature data should be cast to a <see cref="T:NationalInstruments.Vision.Analysis.ClosedCurveFeature" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.WaveletType">
            <summary>
            Specifies the Wavelet Type
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB02">
            <summary>
            Specifies the Wavelet Type DB02
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB03">
            <summary>
            Specifies the Wavelet Type DB03
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB04">
            <summary>
            Specifies the Wavelet Type DB04
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB05">
            <summary>
            Specifies the Wavelet Type DB05
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB06">
            <summary>
            Specifies the Wavelet Type DB06
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB07">
            <summary>
            Specifies the Wavelet Type DB07
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB08">
            <summary>
            Specifies the Wavelet Type DB08
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB09">
            <summary>
            Specifies the Wavelet Type DB09
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB10">
            <summary>
            Specifies the Wavelet Type DB10
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB11">
            <summary>
            Specifies the Wavelet Type DB11
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB12">
            <summary>
            Specifies the Wavelet Type DB12
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB13">
            <summary>
            Specifies the Wavelet Type DB13
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.DB14">
            <summary>
            Specifies the Wavelet Type DB14
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Haar">
            <summary>
            Specifies the Wavelet Type Haar
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior1_3">
            <summary>
            Specifies the Wavelet Type Bior1_3
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior1_5">
            <summary>
            Specifies the Wavelet Type Bior1_5
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior2_2">
            <summary>
            Specifies the Wavelet Type Bior2_2
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior2_4">
            <summary>
            Specifies the Wavelet Type Bior2_4
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior2_6">
            <summary>
            Specifies the Wavelet Type Bior2_6
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior2_8">
            <summary>
            Specifies the Wavelet Type Bior2_8
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior3_1">
            <summary>
            Specifies the Wavelet Type Bior3_1
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior3_3">
            <summary>
            Specifies the Wavelet Type Bior3_3
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior3_5">
            <summary>
            Specifies the Wavelet Type Bior3_5
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior3_7">
            <summary>
            Specifies the Wavelet Type Bior3_7
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior3_9">
            <summary>
            Specifies the Wavelet Type Bior3_9
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior4_4">
            <summary>
            Specifies the Wavelet Type Bior4_4
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Coif1">
            <summary>
            Specifies the Wavelet Type Coif1
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Coif2">
            <summary>
            Specifies the Wavelet Type Coif2
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Coif3">
            <summary>
            Specifies the Wavelet Type Coif3
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Coif4">
            <summary>
            Specifies the Wavelet Type Coif4
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Coif5">
            <summary>
            Specifies the Wavelet Type Coif5
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Sym2">
            <summary>
            Specifies the Wavelet Type Sym2
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Sym3">
            <summary>
            Specifies the Wavelet Type Sym3
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Sym4">
            <summary>
            Specifies the Wavelet Type Sym4
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Sym5">
            <summary>
            Specifies the Wavelet Type Sym5
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Sym6">
            <summary>
            Specifies the Wavelet Type Sym6
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Sym7">
            <summary>
            Specifies the Wavelet Type Sym7
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Sym8">
            <summary>
            Specifies the Wavelet Type Sym8
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior5_5">
            <summary>
            Specifies the Wavelet Type Bior5_5
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.WaveletType.Bior6_8">
            <summary>
            Specifies the Wavelet Type Bior6_8
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CooccurrenceFeature">
            <summary>
            Specifies the Cooccurrence Feature
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CooccurrenceFeature.FeatureDissimilarity">
            <summary>
            Specifies the dissimilarity feature
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CooccurrenceFeature.FeatureContrast">
            <summary>
            Specifies the contrast feature
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CooccurrenceFeature.FeatureEntropy">
            <summary>
            Specifies the entropy feature
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CooccurrenceFeature.FeatureHomogeneity">
            <summary>
            Specifies the homogeneity feature
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CooccurrenceFeature.FeatureCorrelation">
            <summary>
            Specifies the correlation feature
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CooccurrenceFeature.FeatureEnergy">
            <summary>
            Specifies the energy feature
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CooccurrenceFeature.FeaturePeak">
            <summary>
            Specifies the peak feature
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MorphologyReconstructOperation">
            <summary>
            Specifies the Morphological reconstruction operation
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyReconstructOperation.DilateReconstruct">
            <summary>
            Reconstruction by dilation
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.MorphologyReconstructOperation.ErodeReconstruct">
            <summary>
            Reconstruction by erosion
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ExtractContourDirection">
            <summary>
            Specifies the direction in which the Region of Interest (ROI) is examined
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourDirection.RectLeftRight">
            <summary>
            Searches the ROI from left to right
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourDirection.RectRightLeft">
            <summary>
            Searches the ROI from right to left
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourDirection.RectTopBottom">
            <summary>
            Searches the ROI from top to bottom.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourDirection.RectBottomTop">
            <summary>
            Searches the ROI from bottom to top
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourDirection.AnnulusInnerOuter">
            <summary>
            Searches the ROI from the inner radius to the outer radius
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourDirection.AnnulusOuterInner">
            <summary>
            Searches the ROI from the outer radius to the inner radius
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourDirection.AnnulusStartStop">
            <summary>
            Searches the ROI from start angle to end angle
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourDirection.AnnulusStopStart">
            <summary>
            Searches the ROI from end angle to start angle
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ExtractContourSelection">
            <summary>
            Contour Selection selects an extracted contour based on the property you choose
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourSelection.Closest">
            <summary>
            Selects the curve closest to the ROI
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourSelection.Longest">
            <summary>
            Selects the curve with maximum length
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ExtractContourSelection.Strongest">
            <summary>
            Selects the curve with the highest edge strength averaged from each point on the curve
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ConnectionConstraintType">
            <summary>
            Type of connection constraint during contour extraction
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ConnectionConstraintType.Distance">
            <summary>
            Specifies the distance, in pixels, within which the end points of two curves must lie in order to be considered part of a contour
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ConnectionConstraintType.Angle">
            <summary>
            Specifies the range, in degrees, within which the difference between the angle of two curves, measured at the end points, must lie in order for the two curves to be considered part of a contour
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ConnectionConstraintType.Connectivity">
            <summary>
            Specifies the distance, in pixels, within which a line extended from the end point of a curve must pass the end point of another curve in order for the two curves to be considered part of a contour
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.ConnectionConstraintType.Gradient">
            <summary>
            Specifies the range, in degrees, within which the gradient angles of two curves, measured at the end points, must lie in order for the two curves to be considered part of a contour
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SettingType">
            <summary>
            Specifies the match option whose values you want to constrain by the given range
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SettingType.RotationAngle">
            <summary>
            Set a range for this option to specify the angles at which you expect the Function to find template matches in the inspection image
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SettingType.Scale">
            <summary>
            Set a range for this option to specify the sizes at which you expect the Function to find template matches in the inspection image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SettingType.Occlusion">
            <summary>
            Specifies the distance, in pixels, within which a line extended from the end point of a curve must pass the end point of another curve in order for the two curves to be considered part of a contour
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GeometricSetupData">
            <summary>
            Determines the option you want to use during the matching phase
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.CurveExtractionMode">
            <summary>
            Specifies how the function identifies curves in the image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.CurveEdgeThreshold">
            <summary>
            Specifies the minimum contrast an edge pixel must have for it to be considered part of a curve.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.CurveEdgeFilter">
            <summary>
            Specifies the width of the edge filter that the function uses to identify curves in the image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.MinimumCurveLength">
            <summary>
            Specifies the length, in pixels, of the smallest curve that you want the function to identify. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.CurveRowSearchStepSize">
            <summary>
            Specifies the distance, in the y direction, between the image rows that the algorithm inspects for curve seed points. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.CurveColSearchStepSize">
            <summary>
            Specifies the distance, in the x direction, between the image columns that the algorithm inspects for curve seed points. 
            Valid values range from 1 to 255. The default value is 15. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.CurveMaxEndPointGap">
            <summary>
            Specifies the maximum gap, in pixels, between the endpoints of a curve that the function identifies as a closed curve. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.ExtractClosedCurves">
            <summary>
            Specifies whether to identify only closed curves in the image. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.EnableSubpixelCurveExtraction">
            <summary>
            The function ignores this option.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.EnableCorrelationScore">
            <summary>
            Specifies that the function should calculate the Correlation Score and return it for each match result. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.EnableSubpixelAccuracy">
            <summary>
            Determines whether to return the match results with subpixel accuracy. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.SubpixelIterations">
            <summary>
            Specifies the maximum number of incremental improvements used to refine matches using subpixel information.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.SubpixelTolerance">
            <summary>
            Specifies the maximum amount of change, in pixels, between consecutive incremental improvements in the 
            match position before the function stops refining the match position.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.InitialMatchListLength">
            <summary>
            Specifies the maximum size of the match list. 
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.EnableTargetTemplateCurveScore">
            <summary>
            Specifies whether the function should calculate the match curve to template curve score and 
            return it for each match result.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.MinimumMatchSeparationDistance">
            <summary>
            Specifies the minimum separation distance, in pixels, between the origins of two matches that have unique positions.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.MinimumMatchSeparationAngle">
            <summary>
            Specifies the minimum angular difference, in degrees, between two matches that have unique angles.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.MinimumMatchSeparationScale">
            <summary>
            Specifies the minimum difference in scale, expressed as a percentage, between two matches that have unique scales.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.MaximumMatchOverlap">
            <summary>
            Specifies whether you want the algorithm to spend less time accurately estimating the location of a match.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.EnableCoarseResult">
            <summary>
            Specifies whether you want the algorithm to spend less time accurately estimating the location of a match.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.EnableCalibrationSupport">
            <summary>
            Specifies whether or not the algorithm treat the inspection image as a calibrated image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.EnableContrastReversal">
            <summary>
            Specifies the contrast of the matches to search for.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.SearchStrategy">
            <summary>
            Specifies the aggressiveness of the strategy used to find matches in the image.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.RefinementMatchFactor">
            <summary>
            Specifies the factor applied to the number of matches requested to determine how many matches are refined in the pyramid stage.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.SubpixelMatchFactor">
            <summary>
            Specifies the factor applied to the number for matches requested to determine how many matches are used for the final (subpixel) stage.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.GeometricSetupData.MaxRefinementIterations">
            <summary>
            Specifies maximum refinement iteration.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SegmentationDistanceLevel">
            <summary>
            Specifies the Segmentation Distance Level
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SegmentationDistanceLevel.Conservative">
            <summary>
            Specifies the Conservative Level
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.SegmentationDistanceLevel.Aggressive">
            <summary>
            Specifies the Conservative Level
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CalibrationThumbnailType">
            <summary>
            Specifies the Calibration Thumbnail Type.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CalibrationThumbnailType.CameraModelType">
            <summary>
            Specifies the Camera model
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CalibrationThumbnailType.PerspectiveType">
            <summary>
            Specifies the Perspective model
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.CalibrationThumbnailType.MicroPlaneType">
            <summary>
            Specifies the Microplane model
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DistortionModel">
            <summary>
            Specifies the Type of Learned Distortion Model.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DistortionModel.PolynomialModel">
            <summary>
            Specifies the Polynomial model
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DistortionModel.DivisionModel">
            <summary>
            Specifies the Division model
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.DistortionModel.NoDistortionModel">
            <summary>
            Specifies the Non distortion model
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RadialCoefficients">
            <summary>
            Specifies the Radial Coefficients of Polynomial Model.
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RadialCoefficients.CoeffK1">
            <summary>
            Specifies the Coefficient k1
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RadialCoefficients.CoeffK1K2K3">
            <summary>
            Specifies the Coefficient k1, k2, k3
            </summary>
        </member>
        <member name="F:NationalInstruments.Vision.Analysis.RadialCoefficients.CoeffK1K2K3K4K5">
            <summary>
            Specifies the Coefficient k1, k2, k3, k4, k5
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.InspectionAlignment">
            <summary>
            Provides the location within an image where the golden template is located.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionAlignment.#ctor(NationalInstruments.Vision.PointContour)">
            <summary>
            Creates and returns an InspectionAlignment object.
            </summary>
            <remarks>
            </remarks>
            <param name="position">The location of the center of the golden template in the image under inspection.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionAlignment.#ctor(NationalInstruments.Vision.PointContour,System.Double)">
            <summary>
            Creates and returns an InspectionAlignment object.
            </summary>
            <remarks>
            </remarks>
            <param name="position">The location of the center of the golden template in the image under inspection.
            </param>
            <param name="rotation">The angle of the golden template in the image under inspection.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionAlignment.#ctor(NationalInstruments.Vision.PointContour,System.Double,System.Double)">
            <summary>
            Creates and returns an InspectionAlignment object.
            </summary>
            <remarks>
            </remarks>
            <param name="position">The location of the center of the golden template in the image under inspection.
            </param>
            <param name="rotation">The angle of the golden template in the image under inspection.
            </param>
            <param name="scale">The percentage of the size of the area under inspection compared to the size of the golden template.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionAlignment.Equals(NationalInstruments.Vision.Analysis.InspectionAlignment)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified InspectionAlignment.
            </summary>
            <param name="other">
            A InspectionAlignment instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionAlignment.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified InspectionAlignment.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of InspectionAlignment and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionAlignment.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionAlignment.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionAlignment.Scale">
            <summary>
            Gets or sets the percentage of the size of the area under inspection compared to the size of the golden template.
            </summary>
            <value>The default value is 100.0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionAlignment.Rotation">
            <summary>
            Gets or sets the angle of the golden template in the image under inspection.
            </summary>
            <value>The default value is 0.0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionAlignment.Position">
            <summary>
            Gets or sets the location of the center of the golden template in the image under inspection.
            </summary>
            <value>The default value is (0,0).
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.InspectionOptions">
            <summary>
            Provides the options used by CompareGoldenTemplate.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionOptions.#ctor">
            <summary>
            Initializes a new instance of the InspectionOptions class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionOptions.#ctor(NationalInstruments.Vision.Analysis.NormalizationMethod)">
            <summary>
            Initializes a new instance of the InspectionOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="normalizationMethod">Indicates how the function normalizes the golden template to the inspection image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionOptions.#ctor(NationalInstruments.Vision.Analysis.NormalizationMethod,NationalInstruments.Vision.Analysis.RegistrationMethod)">
            <summary>
            Initializes a new instance of the InspectionOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="normalizationMethod">Indicates how the function normalizes the golden template to the inspection image.
            </param>
            <param name="registrationMethod">The manner in which the function registers the golden template and the inspection image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionOptions.#ctor(NationalInstruments.Vision.Analysis.NormalizationMethod,NationalInstruments.Vision.Analysis.RegistrationMethod,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the InspectionOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="normalizationMethod">Indicates how the function normalizes the golden template to the inspection image.
            </param>
            <param name="registrationMethod">The manner in which the function registers the golden template and the inspection image.
            </param>
            <param name="edgeThicknessToIgnore">the desired thickness of edges to be ignored. 
            </param>
            <param name="brightThreshold">Indicates whether the threshold for areas where the inspection image is brighter than the template.
            </param>
            <param name="darkThreshold">Indicates whether the threshold for areas where the inspection image is darker than the template.
            </param>
            <param name="binary">Indicates whether the method should return a binary image giving the location of defects or a grayscale image giving the intensity of defects.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionOptions.Equals(NationalInstruments.Vision.Analysis.InspectionOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified InspectionOptions.
            </summary>
            <param name="other">
            A InspectionOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified InspectionOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of InspectionOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InspectionOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionOptions.Binary">
            <summary>
            Gets or sets whether the method should return a binary image giving the location of defects or a grayscale image giving the intensity of defects.
            </summary>
            <value>The default value is <see langword="true"/>.
            </value>
            <remarks>
            Set this property to <see langword="true"/> to return a binary image that specifies the location of the defects. Set this property to <see langword="false"/>  to return a grayscale image that specifies the location and intensity of defects.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionOptions.DarkThreshold">
            <summary>
            Gets or sets whether the threshold for areas where the inspection image is darker than the template.
            </summary>
            <value>The default value is 30.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionOptions.BrightThreshold">
            <summary>
            Gets or sets whether the threshold for areas where the inspection image is brighter than the template.
            </summary>
            <value>The default value is 30.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionOptions.EdgeThicknessToIgnore">
            <summary>
            Gets or sets the desired thickness of edges to be ignored. 
            </summary>
            <value>The default value is 0.
            </value>
            <remarks>
            A value of 0 specifies that the algorithm will not ignore edges.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionOptions.NormalizationMethod">
            <summary>
            Gets or sets how the function normalizes the golden template to the inspection image.
            </summary>
            <value>The default value is None.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            AverageMatching—Normalize image by shifting intensities by the difference in the mean values.
            </description>
            		</item>
            		<item>
            			<description>
            HistogramMatching—Normalize image using histogram matching.
            </description>
            		</item>
            		<item>
            			<description>
            None—No normalization.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InspectionOptions.RegistrationMethod">
            <summary>Gets or sets the manner in which the function registers the golden template and the inspection image.
            </summary>
            <value>The default value is None.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            None—No registration.
            </description>
            		</item>
            		<item>
            			<description>
            PerspectiveRegistration—Use perspective correction registration.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SubPixelOptions">
            <summary>
            The options to use for subpixel measurements.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SubPixelOptions.#ctor">
            <summary>
            Initializes a new instance of the SubPixelOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SubPixelOptions.#ctor(NationalInstruments.Vision.Analysis.SubPixelAccuracy)">
            <summary>
            Initializes a new instance of the SubPixelOptions class.
            </summary>
            <param name="accuracy">
            Specifies the number of samples to obtain from a pixel.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SubPixelOptions.#ctor(NationalInstruments.Vision.Analysis.SubPixelAccuracy,NationalInstruments.Vision.Analysis.InterpolationMethod)">
            <summary>
            Initializes a new instance of the SubPixelOptions class.
            </summary>
            <param name="accuracy">
            Specifies the number of samples to obtain from a pixel.
            </param>
            <param name="type">
            Specifies the interpolation method to use.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SubPixelOptions.Equals(NationalInstruments.Vision.Analysis.SubPixelOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SubPixelOptions.
            </summary>
            <param name="other">
            A SubPixelOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SubPixelOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SubPixelOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SubPixelOptions and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SubPixelOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SubPixelOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SubPixelOptions.Accuracy">
            <summary>
            Gets or sets the number of samples to obtain from a pixel.
            </summary>
            <value>
            The default is None.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SubPixelOptions.Type">
            <summary>
            Gets or sets the interpolation method.
            </summary>
            <value>
            The default is Quadratic.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.HistogramReport">
            <summary>
            Contains parameters that specify the result of a histogram operation.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.HistogramReport.#ctor">
            <summary>
            Initializes a new instance of the HistogramReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.HistogramReport.Equals(NationalInstruments.Vision.Analysis.HistogramReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified HistogramReport.
            </summary>
            <param name="other">
            A HistogramReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.HistogramReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified HistogramReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of HistogramReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.HistogramReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.HistogramReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.HistogramReport.NumberOfPixels">
            <summary>
            Gets or sets the number of pixels classified. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.HistogramReport.Histogram">
            <summary>
            Gets or sets an array that describes the number of pixels in each class.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.HistogramReport.Width">
            <summary>
            Gets or sets the size of each class. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.HistogramReport.Mean">
            <summary>
            Gets or sets the mean value of the classified pixels.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.HistogramReport.PixelRange">
            <summary>
            Gets or sets the range of pixel values used in calculating the histogram.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.HistogramReport.Start">
            <summary>
            Gets or sets the smallest pixel value in the first class. 
            </summary>
            <value>
            </value>
            <remarks>
            The smallest pixel value may be smaller than <see cref="P:NationalInstruments.Vision.Analysis.HistogramReport.PixelRange" crefType="PartiallyQualified"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.HistogramReport.StandardDeviation">
            <summary>
            Gets or sets the standard deviation of the classified pixels.
            </summary>
            <value>
            </value>
            <remarks>
            The higher this value, the better the distribution of the values in the histogram and the corresponding image.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColorHistogramReport">
            <summary>
            Provides a report describing the classification of each plane of a color image. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorHistogramReport.#ctor">
            <summary>
            Initializes a new instance of a ColorHistogramReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorHistogramReport.Equals(NationalInstruments.Vision.Analysis.ColorHistogramReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorHistogramReport.
            </summary>
            <param name="other">
            A ColorHistogramReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorHistogramReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorHistogramReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ColorHistogramReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorHistogramReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorHistogramReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorHistogramReport.Plane1">
            <summary>
            Gets or sets the histogram report of the first color plane. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorHistogramReport.Plane2">
            <summary>
            Gets or sets the histogram report of the second color plane. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorHistogramReport.Plane3">
            <summary>
            Gets or sets the histogram report of the third color plane. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions">
            <summary>
            Contains advanced parameters used by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method during the shift phase to learn the template.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.Equals(NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnPatternAdvancedShiftOptions.
            </summary>
            <param name="other">
            A LearnPatternAdvancedShiftOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnPatternAdvancedShiftOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LearnPatternAdvancedShiftOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.SubpixelSampleSizeFactor">
            <summary>
            Gets or sets the size of the sample for the subpixel phase of shift-invariant matching as a percent of the template size, in pixels. 
            </summary>
            <value>
            The default is 0, which causes the algorithm to use SubpixelSampleSize. For optimal speed, the algorithm coerces sizes that are less than 240 to an integer multiple of 12 and coerces sizes greater than 240 to an integer multiple of 60.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.SubpixelSampleSize">
            <summary>
            Gets or sets the number of template pixels that you want to include in a sample for the subpixel phase of shift-invariant matching.
            </summary>
            <value>
            The default is 0, which allows the algorithm to compute SubpixelSampleSize. For optimal speed, the algorithm coerces sizes that are less than 240 to an integer multiple of 12 and coerces sizes greater than 240 to an integer multiple of 60.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.FinalSampleSizeFactor">
            <summary>
            Gets or sets the size of the sample for the final phase of shift-invariant matching 
            as a percent of the edge points in the template, in pixels. 
            </summary>
            <value>
            The default is 0, which causes the algorithm to use FinalSampleSize. If you provide 
            values for both FinalSampleSizeFactor and FinalSampleSize, the algorithm uses the 
            FinalSampleSize. For optimal speed, the algorithm coerces sizes that are less than 
            240 to an integer multiple of 12 and coerces sizes greater than 240 to an integer 
            multiple of 60. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.FinalSampleSize">
            <summary>
            Gets or sets the number of template pixels you want to add to the InitialSampleSize for the 
            final phase of shift-invariant matching. 
            </summary>
            <value>
            The default is 0, which allows the algorithm to compute the FinalSampleSize. 
            For optimal speed, the algorithm coerces sizes that are less than 240 to an 
            integer multiple of 12 and coerces sizes greater than 240 to an integer multiple of 60.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.InitialSampleSizeFactor">
            <summary>
            Gets or sets the size of the sample for the initial phase of shift-invariant 
            matching as a percent 
            of the template size, in pixels. 
            </summary>
            <value>
            The default is 0, which causes the algorithm to use InitialSampleSize. If 
            you provide values for both InitialSampleSizeFactor and InitialSampleSize, 
            the algorithm uses InitialSampleSize. For optimal speed, the algorithm coerces 
            sizes that are less than 240 to an integer multiple of 12 and coerces sizes 
            greater than 240 to an integer multiple of 60.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.InitialSampleSize">
            <summary>
            Gets or sets the number of template pixels that you want to include in a 
            sample for the initial phase of shift-invariant matching. 
            </summary>
            <value>
            The default is 0, which allows the algorithm to compute the InitialSampleSize. 
            For optimal speed, the algorithm coerces sizes that are less than 240 to an 
            integer multiple of 12 and coerces sizes greater than 240 to an integer multiple of 60.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedShiftOptions.InitialStepSize">
            <summary>
            Gets or sets the largest number of image pixels to shift the sample across the inspection image during the initial phase of shift-invariant matching. 
            </summary>
            <value>
            The default is 7. The algorithm may reduce the value of InitialStepSize based on InitialSampleSize and the template image. If the step size is not an odd integer, the algorithm coerces it to the next smaller odd integer.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions">
            <summary>
            Contains advanced parameters used by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method during the rotation phase to learn the template.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions.Equals(NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnPatternAdvancedRotationOptions.
            </summary>
            <param name="other">
            A LearnPatternAdvancedRotationOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnPatternAdvancedRotationOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LearnPatternAdvancedRotationOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions.FinalAngularAccuracy">
            <summary>
            Gets or sets the angle accuracy, in degrees, to use during the final phase of the rotation-invariant matching. 
            </summary>
            <value>
            The default is 1 degree. Use subpixel accuracy to achieve angle accuracy less than the default. This value must be no greater than the value for InitialAngularAccuracy. The algorithm coerces the angle to the largest integer smaller than it that evenly divides 360. This option is not used in conjunction with the Aggressive search strategy.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions.InitialAngularAccuracy">
            <summary>
            Gets or sets the angle accuracy, in degrees, to use during the initial phase of rotation-invariant matching. 
            </summary>
            <value>
            The default is 6 degrees. The algorithm coerces the angle to the largest integer smaller than it that evenly divides 360. This option is not used in conjunction with the Aggressive search strategy.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedRotationOptions.StrategySupport">
            <summary>
            Gets or sets the aggressiveness of the rotation search strategy available during the matching phase. 
            </summary>
            <value>
            The default is Balanced.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LearnPatternAdvancedOptions">
            <summary>
            Contains advanced parameters used by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method to learn the template.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedOptions.Equals(NationalInstruments.Vision.Analysis.LearnPatternAdvancedOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnPatternAdvancedOptions.
            </summary>
            <param name="other">
            A LearnPatternAdvancedOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnPatternAdvancedOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LearnPatternAdvancedOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternAdvancedOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedOptions.Shift">
            <summary>
            Gets options to use when learning the shift learning phase.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternAdvancedOptions.Rotation">
            <summary>
            Gets options to use when learning the rotation learning phase.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LearnPatternOptions">
            <summary>
            Specifies the learn mode used by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method to learn the template.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternOptions.#ctor">
            <summary>
            Initializes a new instance of the LearnPatternOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternOptions.#ctor(NationalInstruments.Vision.Analysis.LearnMode)">
            <summary>
            Initializes a new instance of the LearnPatternOptions class.
            </summary>
            <param name="mode">
            The invariance mode to use when learning the pattern.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternOptions.Equals(NationalInstruments.Vision.Analysis.LearnPatternOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnPatternOptions.
            </summary>
            <param name="other">
            A LearnPatternOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnPatternOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LearnPatternOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnPatternOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternOptions.AdvancedOptions">
            <summary>
            Gets advanced options to the pattern matching algorithm.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnPatternOptions.Mode">
            <summary>
            Gets or sets the invariance mode to use when learning the pattern.
            </summary>
            <value>
            The default is ShiftInformation.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions">
            <summary>
            Optimizes the performance of the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchPattern(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method and fine-tunes the matches located by the method.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.#ctor">
            <summary>
            Initializes a new instance of the MatchPatternAdvancedOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.#ctor(NationalInstruments.Vision.Analysis.SearchStrategy)">
            <summary>
            Initializes a new instance of the MatchPatternAdvancedOptions class.
            </summary>
            <param name="searchStrategy">
            Specifies the aggressiveness of the rotation search strategy.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.#ctor(NationalInstruments.Vision.Analysis.SearchStrategy,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the MatchPatternAdvancedOptions class.
            </summary>
            <param name="searchStrategy">
            Specifies the aggressiveness of the rotation search strategy.
            </param>
            <param name="subpixelIterations">
            Specifies the maximum number of incremental improvements used to refine matching using 
            subpixel information.
            <para>
            If you provide values for both subpixelIterations and subpixelTolerance, the algorithm 
            refines the match for at most subpixelIterations but may stop early if SubpixelTolerance 
            is satisfied. If you set subpixelTolerance, matches may be invalidated during the 
            subpixel matching process. However, using subpixelIterations alone cannot invalidate a 
            match.
            </para>
            </param>
            <param name="subpixelTolerance">
            Specifies the maximum amount of change, in pixels, between consecutive incremental 
            improvements in the match position that you want to trigger the end of the refinement 
            process. 
            </param>
            <param name="initialMatchListLength">
            Specifies the maximum size of the match list. The match list contains the regions 
            in the inspection image that have the highest probability of containing a match.
            </param>
            <param name="matchListReductionFactor">
            Specifies the reduction of the match list as matches are refined.
            </param>
            <param name="initialStepSize">
            Specifies the number of pixels to shift the sample across the 
            inspection image during the initial phase of shift-invariant matching.  
            </param>
            <param name="intermediateAngularAccuracy">
            Specifies the accuracy, in degrees, to use during the intermediate phase of 
            rotation-invariant matching. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.Equals(NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchPatternAdvancedOptions.
            </summary>
            <param name="other">
            A MatchPatternAdvancedOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchPatternAdvancedOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MatchPatternAdvancedOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.IntermediateAngularAccuracy">
            <summary>
            Gets or sets the accuracy, in degrees, to use during the intermediate phase of 
            rotation-invariant matching. 
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.SearchStrategy">
            <summary>
            Gets or sets the aggressiveness of the rotation search strategy.
            </summary>
            <value>
             The default is Balanced. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.InitialStepSize">
            <summary>
            Gets or sets the number of pixels to shift the sample across the 
            inspection image during the initial phase of shift-invariant matching.  
            </summary>
            <value>
            The default is 0, which uses the InitialStepSize stored in the template. 
            If the step size is not an odd integer, the algorithm uses the default value.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.MatchListReductionFactor">
            <summary>
            Gets or sets the reduction of the match list as matches are refined.
            </summary>
            <value>
            The default is 5. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.InitialMatchListLength">
            <summary>
            Gets or sets the maximum size of the match list. The match list contains the regions in the inspection image that have the highest probability of containing a match.
            </summary>
            <value>
            The default is 200.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.SubpixelTolerance">
            <summary>
            Gets or sets the maximum amount of change, in pixels, between consecutive incremental 
            improvements in the match position that you want to trigger the end of the refinement 
            process. 
            <para>
            If you provide values for both SubpixelIterations and SubpixelTolerance, the algorithm 
            refines the match for at most SubpixelIterations but may stop early if SubpixelTolerance 
            is satisfied. If you set SubpixelTolerance, matches may be invalidated during the 
            subpixel matching process. However, using SubpixelIterations alone cannot invalidate a 
            match. This behavior is particularly important when using the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.RefineMatches(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.PatternMatch})" crefType="Unqualified"/>
            method. 
            </para>
            </summary>
            <value>
            The default is 0, which specifies using the SubpixelIterations value.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternAdvancedOptions.SubpixelIterations">
            <summary>
            Gets or sets the maximum number of incremental improvements used to refine matching using subpixel information.
            </summary>
            <value>
            The default is 20.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MatchPatternOptions">
            <summary>
            Sets parameters that are used to find the template in the image. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternOptions.#ctor">
            <summary>
            Initializes a new instance of the MatchPatternOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternOptions.#ctor(NationalInstruments.Vision.Analysis.MatchMode)">
            <summary>
            Initializes a new instance of the MatchPatternOptions class.
            </summary>
            <param name="mode">
            Specifies how the method looks for the pattern in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternOptions.#ctor(NationalInstruments.Vision.Analysis.MatchMode,System.Int32)">
            <summary>
            Initializes a new instance of the MatchPatternOptions class.
            </summary>
            <param name="mode">
            Specifies how the method looks for the pattern in the image.
            </param>
            <param name="numberOfMatchesRequested">
            Specifies the number of valid matches expected. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternOptions.Equals(NationalInstruments.Vision.Analysis.MatchPatternOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchPatternOptions.
            </summary>
            <param name="other">
            A MatchPatternOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchPatternOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MatchPatternOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchPatternOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternOptions.RotationAngleRanges">
            <summary>
            Gets a collection of angle ranges, where each range specifies how much you expect the template image to rotate in the image. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternOptions.MinimumMatchScore">
            <summary>
            Gets or sets the minimum score a match can have for the method to consider the 
            match valid. Acceptable values range from 0 to 1,000. 
            </summary>
            <value>
            The default is 800.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternOptions.NumberOfMatchesRequested">
            <summary>
            Gets or sets the number of valid matches expected. 
            </summary>
            <value>
            The default is 1.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternOptions.SubpixelAccuracy">
            <summary>
            Gets or sets whether to calculate match locations with subpixel accuracy. Set this 
            parameter to <see langword="true"/> to specify that the function should calculate 
            match locations with subpixel accuracy. Set this element to <see langword="false"/> 
            to specify that the function should calculate match locations with pixel accuracy. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternOptions.MinimumContrast">
            <summary>
            Gets or sets the minimum contrast expected in the image. 
            </summary>
            <value>
            The default is 10.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternOptions.Mode">
            <summary>
            Gets or sets how the method looks for the pattern in the image.
            </summary>
            <value>
            The default is ShiftInvariant.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchPatternOptions.Advanced">
            <summary>
            Gets or sets the advanced options to the algorithm.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.PatternMatch">
            <summary>
            Provides information about a matched pattern.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatch.#ctor">
            <summary>
            Initializes a new instance of the PatternMatch class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatch.Equals(NationalInstruments.Vision.Analysis.PatternMatch)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PatternMatch.
            </summary>
            <param name="other">
            A PatternMatch instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatch.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PatternMatch.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of PatternMatch
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatch.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatch.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatch.Corners">
            <summary>
            Gets the coordinates of the corners of the rectangle surrounding the template image.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatch.Score">
            <summary>
            Gets or sets the accuracy of the match. A score of 1,000 indicates a perfect match, and a score of 0 indicates no match. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatch.Scale">
            <summary>
            Gets or sets the size of the match relative to the size of the template image, expressed as a percentage. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatch.Rotation">
            <summary>
            Gets or sets the rotation of the match relative to the template image, in degrees.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatch.Position">
            <summary>
            Gets or sets the location of the center of the match.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatchReport.#ctor">
            <summary>
            Initializes a new instance of the PatternMatch class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatchReport.Equals(NationalInstruments.Vision.Analysis.PatternMatchReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PatternMatch.
            </summary>
            <param name="other">
            A PatternMatch instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatchReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PatternMatch.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of PatternMatch
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatchReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PatternMatchReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatchReport.Corners">
            <summary>
            Gets the coordinates of the corners of the rectangle surrounding the template image.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatchReport.Score">
            <summary>
            Gets or sets the accuracy of the match. A score of 1,000 indicates a perfect match, and a score of 0 indicates no match. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatchReport.Scale">
            <summary>
            Gets or sets the size of the match relative to the size of the template image, expressed as a percentage. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatchReport.Rotation">
            <summary>
            Gets or sets the rotation of the match relative to the template image, in degrees.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PatternMatchReport.Position">
            <summary>
            Gets or sets the location of the center of the match.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions">
            <summary>
            Optimizes and fine-tunes advanced parameters used during the learning phase.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.#ctor">
            <summary>
            Initializes a new instance of the LearnGeometricPatternFeatureBasedAdvancedOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LearnGeometricPatternFeatureBasedAdvancedOptions class.
            </summary>
            <param name="minimumRectangleLength">
            Specifies the minimum length for each side of a rectangular feature. The method 
            ignores rectangular features with a side shorter than this value. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the LearnGeometricPatternFeatureBasedAdvancedOptions class.
            </summary>
            <param name="minimumRectangleLength">
            Specifies the minimum length for each side of a rectangular feature. The method 
            ignores rectangular features with a side shorter than this value. 
            </param>
            <param name="minimumRectangleAspectRatio">
            Specifies the minimum aspect ratio of a rectangular feature. The method ignores rectangular 
            features with aspect ratios less than this value. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.Equals(NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnGeometricPatternFeatureBasedAdvancedOptions.
            </summary>
            <param name="other">
            A LearnGeometricPatternFeatureBasedAdvancedOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnGeometricPatternFeatureBasedAdvancedOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LearnGeometricPatternFeatureBasedAdvancedOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.MaximumPixelDistanceFromLine">
            <summary>
            Gets or sets the maximum number of pixels between an edge pixel and a linear 
            feature for the method to consider that edge pixel as part of the linear feature. 
            </summary>
            <value>
            The default is 2.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.MaximumFeaturesUsed">
            <summary>
            Gets or sets the maximum number of features the method uses when learning.
            </summary>
            <value>
            The default is 25.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.MinimumFeatureStrength">
            <summary>
            Gets or sets the minimum strength for a feature. The method ignores features with a strength less than this value. Valid values range from 0 to 1. 
            </summary>
            <value>
            The default is 0.5.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.MinimumLineLength">
            <summary>
            Gets or sets the minimum length for a linear feature. The method ignores linear features 
            with lengths shorter than this value. 
            </summary>
            <value>
            The default is 15.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.MinimumRadius">
            <summary>
            Gets or sets the minimum radius for a circular feature. The method ignores circular 
            features with radii less than this value. 
            </summary>
            <value>
            The default is 5.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.MinimumRectangleAspectRatio">
            <summary>
            Gets or sets the minimum aspect ratio of a rectangular feature. The method ignores rectangular 
            features with aspect ratios less than this value. 
            </summary>
            <value>
            The default is 0.2.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternFeatureBasedAdvancedOptions.MinimumRectangleLength">
            <summary>
            Gets or sets the minimum length for each side of a rectangular feature. The method 
            ignores rectangular features with a side shorter than this value. 
            </summary>
            <value>
            The default is 10.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions">
            <summary>
            Optimizes and fine-tunes advanced parameters used during the learning phase.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.#ctor">
            <summary>
            Initializes a new instance of the LearnGeometricPatternEdgeBasedAdvancedOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.#ctor(NationalInstruments.Vision.Range)">
            <summary>
            Initializes a new instance of the LearnGeometricPatternEdgeBasedAdvancedOptions class.
            </summary>
            <param name="scaleRange">
            Specifies the scale factor range for matches to the template. For example, if the range is (75,125),
            matches with dimensions less than 75% and greater than 125% of the dimensions of the template will 
            not be searched for. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.Equals(NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnGeometricPatternEdgeBasedAdvancedOptions.
            </summary>
            <param name="other">
            A LearnGeometricPatternEdgeBasedAdvancedOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnGeometricPatternEdgeBasedAdvancedOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LearnGeometricPatternEdgeBasedAdvancedOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.ScaleRange">
            <summary>
            Gets or sets the scale factor range for matches to the template. For example, if the range is (75,125),
            matches with dimensions less than 75% and greater than 125% of the dimensions of the template will 
            not be searched for. 
            </summary>
            <value>
            The default is (75, 125).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.RotationAngleRange">
            <summary>
            Gets or sets the rotation angle range for the template.
            </summary>
            <value>
            The default is (0, 360).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnGeometricPatternEdgeBasedAdvancedOptions.ImageSamplingFactor">
            <summary>
            Gets or sets the factor that is used to subsample the template and the image for the 
            initial matching phase. The image is subsampled by a power of 2 factor that is 
            less than or equal to the specified value. 
            </summary>
            <value>
            The default is 0, which specifies that the subsamping factor is automatically determined.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions">
            <summary>
            Optimizes the performance of the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternFeatureBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method and fine-tunes the matches located by the method.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.#ctor">
            <summary>
            Initializes a new instance of the MatchGeometricPatternFeatureBasedAdvancedOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MatchGeometricPatternFeatureBasedAdvancedOptions class.
            </summary>
            <param name="initialMatchListLength">
            Specifies the maximum size of the match list. The match list contains the 
            regions in the inspection image that have the highest probability of containing a match. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.Equals(NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchGeometricPatternFeatureBasedAdvancedOptions.
            </summary>
            <param name="other">
            A MatchGeometricPatternFeatureBasedAdvancedOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchGeometricPatternFeatureBasedAdvancedOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MatchGeometricPatternFeatureBasedAdvancedOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.SmoothContours">
            <summary>
            Gets or sets whether or not smoothing be done on the contours of the inspection 
            image before feature extraction. Set this element to <see langword="true"/> to specify smoothing 
            be done on the contours of the inspection image before feature extraction. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.TargetTemplateCurveScore">
            <summary>
            Gets or sets whether the method should calculate the match curve to template curve score. 
            Set this element to <see langword="true"/> to specify that the method should calculate 
            the match curve to template curve score and return it for each match 
            result. Set this element to <see langword="false"/> to specify that the method should not 
            calculate the match curve to template curve score.
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.FeaturesUsedRange">
            <summary>
            Gets or sets the range of the number of features the method uses when matching.
            </summary>
            <value>
            The default is (5, 5).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.SubpixelIterations">
            <summary>
            Gets or sets the maximum number of incremental improvements used to refine matches with subpixel information. 
            </summary>
            <value>
            The default is 20.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.SubpixelTolerance">
            <summary>
            Gets or sets the maximum amount of change, in pixels, between consecutive incremental 
            improvements in the match position before the method stops refining the match position. 
            <para>
            Set this parameter to 0 to specify that the method should always use a number of refinements 
            equal to SubpixelIterations. If you provide values for both SubpixelIterations and 
            SubpixelTolerance, the method refines the match for, at most, SubpixelIterations but may 
            stop early if SubpixelTolerance is satisfied. If you set SubpixelTolerance, the method may 
            invalidate matches during the subpixel refinement process. However, using SubpixelIterations 
            alone cannot invalidate a match. 
            </para>
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.InitialMatchListLength">
            <summary>
            Gets or sets the maximum size of the match list. The match list contains the 
            regions in the inspection image that have the highest probability of containing a match. 
            </summary>
            <value>
            The default is 200.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.CorrelationScore">
            <summary>
            Gets or sets whether the method should calculate the correlation score. Set this 
            parameter to <see langword="true"/> to specify that the method should calculate 
            the correlation score and return it for each match result. Set this parameter to 
            <see langword="false"/> to specify that the method should not calculate the 
            correlation score. 
            </summary>
            <value>
            The default is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.MinimumMatchSeparationDistance">
            <summary>
            Gets or sets the minimum separation distance, in pixels, between the origins of 
            two matches that have unique positions. The method does not return matches that 
            have the same position, scale, and angle. Set this value to -1 if you do not want 
            the method to use the position of a match to determine whether the match is unique. 
            </summary>
            <value>
            The default is 20.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.MinimumMatchSeparationAngle">
            <summary>
            Gets or sets the minimum angular difference, in degrees, between two matches that 
            have unique angles. The method does not return matches that have the same position, 
            scale, and angle. Set this value to -1 if you do not want the method to use the angle 
            of a match to determine whether the match is unique. 
            </summary>
            <value>
            The default is 10.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.MinimumMatchSeparationScale">
            <summary>
            Gets or sets the minimum difference in scale, expressed as a percentage, between two matches 
            that have unique scales. The method does not return matches that have the same position, 
            scale, and angle. Set this value to -1 if you do not want the method to use the scale of a 
            match to determine whether the match is unique. 
            </summary>
            <value>
            The default is 10.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.MaximumMatchOverlap">
            <summary>
            Gets or sets the maximum amount of overlap, expressed as a percentage, allowed 
            between the bounding rectangles of two unique matches. The method does not 
            return matches that exceed this overlap percentage. Set this value to -1 if you 
            want the method to ignore bounding rectangle overlap. 
            </summary>
            <value>
            The default is 80.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.CoarseResult">
            <summary>
            Gets or sets whether you want the method to spend less time accurately 
            estimating the location of a match. Set this value to <see langword="true"/> if you want 
            to quickly determine whether a part is present in the inspection image 
            without an accurate estimate of its position, angle, and scale. Set 
            this value to <see langword="false"/> to specify that the method returns matches with 
            pixel or subpixel accuracy. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedAdvancedOptions.EnableCalibrationSupport">
            <summary>
            Gets or sets whether to treat the inspection image as a calibrated image. Set this 
            parameter to <see langword="true"/> to specify that the method treat the inspection 
            image as a calibrated image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/>
            method or the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method to calibrate the inspection image. 
            </summary>
            <value>
            The default is <see langword="true"/>.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions">
            <summary>
            Optimizes the performance of the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.MatchGeometricPatternEdgeBased(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method and fine-tunes the matches located by the method.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.#ctor">
            <summary>
            Initializes a new instance of the MatchGeometricPatternEdgeBasedAdvancedOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.#ctor(NationalInstruments.Vision.Analysis.ContrastMode)">
            <summary>
            Initializes a new instance of the MatchGeometricPatternEdgeBasedAdvancedOptions class.
            </summary>
            <param name="contrastMode">
            Specifies the contrast of the matches in the target image in relation to the contrast of the template.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.#ctor(NationalInstruments.Vision.Analysis.ContrastMode,NationalInstruments.Vision.Analysis.GeometricMatchingSearchStrategy)">
            <summary>
            Initializes a new instance of the MatchGeometricPatternEdgeBasedAdvancedOptions class.
            </summary>
            <param name="contrastMode">
            Specifies the contrast of the matches in the target image in relation to the contrast of the template.
            </param>
            <param name="matchStrategy">
            Specifies the aggressiveness of the search strategy.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.Equals(NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchGeometricPatternEdgeBasedAdvancedOptions.
            </summary>
            <param name="other">
            A MatchGeometricPatternEdgeBasedAdvancedOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchGeometricPatternEdgeBasedAdvancedOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MatchGeometricPatternEdgeBasedAdvancedOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.SubpixelIterations">
            <summary>
            Gets or sets the maximum number of incremental improvements used to refine matches with subpixel information. 
            </summary>
            <value>
            The default is 20.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.SubpixelTolerance">
            <summary>
            Gets or sets the maximum amount of change, in pixels, between consecutive incremental 
            improvements in the match position before the method stops refining the match position. 
            <para>
            Set this parameter to 0 to specify that the method should always use a number of refinements 
            equal to SubpixelIterations. If you provide values for both SubpixelIterations and 
            SubpixelTolerance, the method refines the match for, at most, SubpixelIterations but may 
            stop early if SubpixelTolerance is satisfied. If you set SubpixelTolerance, the method may 
            invalidate matches during the subpixel refinement process. However, using SubpixelIterations 
            alone cannot invalidate a match. 
            </para>
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.InitialMatchListLength">
            <summary>
            Gets or sets the maximum size of the match list. The match list contains the 
            regions in the inspection image that have the highest probability of containing a match. 
            </summary>
            <value>
            The default is 200.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.TargetTemplateCurveScore">
            <summary>
            Gets or sets whether the method should calculate the match curve to template curve score. 
            Set this element to <see langword="true"/> to specify that the method should calculate 
            the match curve to template curve score and return it for each match 
            result. Set this element to <see langword="false"/> to specify that the method should not 
            calculate the match curve to template curve score.
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.CorrelationScore">
            <summary>
            Gets or sets whether the method should calculate the correlation score. Set this 
            parameter to <see langword="true"/> to specify that the method should calculate 
            the correlation score and return it for each match result. Set this parameter to 
            <see langword="false"/> to specify that the method should not calculate the 
            correlation score. 
            </summary>
            <value>
            The default is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.MinimumMatchSeparationDistance">
            <summary>
            Gets or sets the minimum separation distance, in pixels, between the origins of 
            two matches that have unique positions. The method does not return matches that 
            have the same position, scale, and angle. Set this value to –1 if you do not want 
            the method to use the position of a match to determine whether the match is unique. 
            </summary>
            <value>
            The default is 20.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.MinimumMatchSeparationAngle">
            <summary>
            Gets or sets the minimum angular difference, in degrees, between two matches that 
            have unique angles. The method does not return matches that have the same position, 
            scale, and angle. Set this value to –1 if you do not want the method to use the angle 
            of a match to determine whether the match is unique. 
            </summary>
            <value>
            The default is 10.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.MinimumMatchSeparationScale">
            <summary>
            Gets or sets the minimum difference in scale, expressed as a percentage, between two matches 
            that have unique scales. The method does not return matches that have the same position, 
            scale, and angle. Set this value to -1 if you do not want the method to use the scale of a 
            match to determine whether the match is unique. 
            </summary>
            <value>
            The default is 10.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.MaximumMatchOverlap">
            <summary>
            Gets or sets the maximum amount of overlap, expressed as a percentage, allowed 
            between the bounding rectangles of two unique matches. The method does not 
            return matches that exceed this overlap percentage. Set this value to –1 if you 
            want the method to ignore bounding rectangle overlap. 
            </summary>
            <value>
            The default is 80.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.CoarseResult">
            <summary>
            Gets or sets whether you want the method to spend less time accurately 
            estimating the location of a match. Set this value to <see langword="true"/> if you want 
            to quickly determine whether a part is present in the inspection image 
            without an accurate estimate of its position, angle, and scale. Set 
            this value to <see langword="false"/> to specify that the method returns matches with 
            pixel or subpixel accuracy. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.EnableCalibrationSupport">
            <summary>
            Gets or sets whether to treat the inspection image as a calibrated image. Set this 
            parameter to <see langword="true"/> to specify that the method treat the inspection 
            image as a calibrated image. Use the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.SetSimpleCalibration(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.GridDescriptor)" crefType="Unqualified"/>
            method or the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.CopyCalibrationInformation(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>
            method to calibrate the inspection image. 
            </summary>
            <value>
            The default is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.ContrastMode">
            <summary>
            Gets or sets the contrast of the matches in the target image in relation to the contrast of the template.
            </summary>
            <value>
            The default value is Original.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.MatchStrategy">
            <summary>
            Gets or sets the aggressiveness of the search strategy.
            </summary>
            <value>
            The default is Balanced. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.RefineMatchFactor">
            <summary>
            Gets or sets the factor that is applied to the number of matches requested by 
            the user to determine the number of matches that are refined at the initial matching stage. 
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedAdvancedOptions.SubpixelMatchFactor">
            <summary>
            Gets or sets the factor that is applied to the number of matches requested by 
            the user to determine the number of matches that are evaluated at the final 
            subpixel matching stage. 
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions">
            <summary>
            Sets parameters that are used during the matching process. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.#ctor">
            <summary>
            Initializes a new instance of the MatchGeometricPatternFeatureBasedOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.#ctor(NationalInstruments.Vision.Analysis.GeometricMatchModes)">
            <summary>
            Initializes a new instance of the MatchGeometricPatternFeatureBasedOptions class.
            </summary>
            <param name="mode">
            Specifies how the method looks for the pattern in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.#ctor(NationalInstruments.Vision.Analysis.GeometricMatchModes,System.Int32)">
            <summary>
            Initializes a new instance of the MatchGeometricPatternFeatureBasedOptions class.
            </summary>
            <param name="mode">
            Specifies how the method looks for the pattern in the image.
            </param>
            <param name="numberOfMatchesRequested">
            Specifies the number of valid matches expected. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.Equals(NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchGeometricPatternFeatureBasedOptions.
            </summary>
            <param name="other">
            A MatchGeometricPatternFeatureBasedOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchGeometricPatternFeatureBasedOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MatchGeometricPatternFeatureBasedOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.RotationAngleRanges">
            <summary>
            Gets a collection of angle ranges, where each range specifies how much you expect the template image to rotate in the image. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.ScaleRange">
            <summary>
            Gets or sets a range that specifies the sizes of the pattern you expect to be in the image, 
            expressed as a ratio percentage representing the size of the pattern in the image 
            divided by size of the original pattern multiplied by 100.
            </summary>
            <value>
            The default is (90, 110).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.OcclusionRange">
            <summary>
            Gets or sets what percentage of the template image you expect to be occluded in the image.
            </summary>
            <value>
            The default is (0, 25).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.MinimumMatchScore">
            <summary>
            Gets or sets the minimum score a match can have for the method to consider the 
            match valid. Acceptable values range from 0 to 1,000. 
            </summary>
            <value>
            The default is 800.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.NumberOfMatchesRequested">
            <summary>
            Gets or sets the number of valid matches expected. 
            </summary>
            <value>
            The default is 1.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.SubpixelAccuracy">
            <summary>
            Gets or sets whether to calculate match locations with subpixel accuracy. Set this 
            parameter to <see langword="true"/> to specify that the function should calculate 
            match locations with subpixel accuracy. Set this element to <see langword="false"/> 
            to specify that the function should calculate match locations with pixel accuracy. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.Mode">
            <summary>
            Gets or sets how the method looks for the pattern in the image.
            </summary>
            <value>
            The default is ShiftInvariant.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternFeatureBasedOptions.Advanced">
            <summary>
            Gets or sets the advanced options to the algorithm.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions">
            <summary>
            Sets parameters that are used during the matching process. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.#ctor">
            <summary>
            Initializes a new instance of the MatchGeometricPatternEdgeBasedOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.#ctor(NationalInstruments.Vision.Analysis.GeometricMatchModes)">
            <summary>
            Initializes a new instance of the MatchGeometricPatternEdgeBasedOptions class.
            </summary>
            <param name="mode">
            Specifies how the method looks for the pattern in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.#ctor(NationalInstruments.Vision.Analysis.GeometricMatchModes,System.Int32)">
            <summary>
            Initializes a new instance of the MatchGeometricPatternEdgeBasedOptions class.
            </summary>
            <param name="mode">
            Specifies how the method looks for the pattern in the image.
            </param>
            <param name="numberOfMatchesRequested">
            Specifies the number of valid matches expected. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.Equals(NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchGeometricPatternEdgeBasedOptions.
            </summary>
            <param name="other">
            A MatchGeometricPatternEdgeBasedOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchGeometricPatternEdgeBasedOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MatchGeometricPatternEdgeBasedOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.RotationAngleRanges">
            <summary>
            Gets a collection of angle ranges, where each range specifies how much you expect the template image to rotate in the image. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.ScaleRange">
            <summary>
            Gets or sets a range that specifies the sizes of the pattern you expect to be in the image, 
            expressed as a ratio percentage representing the size of the pattern in the image 
            divided by size of the original pattern multiplied by 100.
            </summary>
            <value>
            The default is (90, 110).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.OcclusionRange">
            <summary>
            Gets or sets what percentage of the template image you expect to be occluded in the image.
            </summary>
            <value>
            The default is (0, 25).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.MinimumMatchScore">
            <summary>
            Gets or sets the minimum score a match can have for the method to consider the 
            match valid. Acceptable values range from 0 to 1,000. 
            </summary>
            <value>
            The default is 800.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.NumberOfMatchesRequested">
            <summary>
            Gets or sets the number of valid matches expected. 
            </summary>
            <value>
            The default is 1.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.SubpixelAccuracy">
            <summary>
            Gets or sets whether to calculate match locations with subpixel accuracy. Set this 
            parameter to <see langword="true"/> to specify that the function should calculate 
            match locations with subpixel accuracy. Set this element to <see langword="false"/> 
            to specify that the function should calculate match locations with pixel accuracy. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.Mode">
            <summary>
            Gets or sets how the method looks for the pattern in the image.
            </summary>
            <value>
            The default is ShiftInvariant.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchGeometricPatternEdgeBasedOptions.Advanced">
            <summary>
            Gets or sets the advanced options to the algorithm.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CircleFeature">
            <summary>
            Describes a circle feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleFeature.#ctor">
            <summary>
            Initializes a new instance of the CircleFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleFeature.Equals(NationalInstruments.Vision.Analysis.CircleFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircleFeature.
            </summary>
            <param name="other">
            A CircleFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircleFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CircleFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleFeature.Radius">
            <summary>
            Gets or sets the radius of the circle.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleFeature.Position">
            <summary>
            Gets or sets the location of the center of the circle. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EllipseFeature">
            <summary>
            Gets or sets an ellipse feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseFeature.#ctor">
            <summary>
            Initializes a new instance of the EllipseFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseFeature.Equals(NationalInstruments.Vision.Analysis.EllipseFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EllipseFeature.
            </summary>
            <param name="other">
            A EllipseFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EllipseFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of EllipseFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseFeature.MajorRadius">
            <summary>
            Gets or sets the length of the semi-major axis of the ellipse. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseFeature.MinorRadius">
            <summary>
            Gets or sets the length of the semi-minor axis of the ellipse. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseFeature.Rotation">
            <summary>
            Gets or sets the orientation of the semi-major axis of the ellipse with respect to the horizontal. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseFeature.Position">
            <summary>
            Gets or sets the location of the center of the ellipse.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ConstCurveFeature">
            <summary>
            Describes a constant curve feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConstCurveFeature.#ctor">
            <summary>
            Initializes a new instance of the ConstCurveFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConstCurveFeature.Equals(NationalInstruments.Vision.Analysis.ConstCurveFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ConstCurveFeature.
            </summary>
            <param name="other">
            A ConstCurveFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConstCurveFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ConstCurveFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ConstCurveFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConstCurveFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConstCurveFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConstCurveFeature.EndAngle">
            <summary>
            Gets or sets the ending angle in degrees. When traveling along the constant curve from one endpoint to the next in a counterclockwise manner, this is the angular component of the vector originating at the center of the constant curve and pointing towards the second endpoint of the constant curve. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConstCurveFeature.StartAngle">
            <summary>
            Gets or sets the starting angle in degrees. When traveling along the constant curve from one endpoint to the next in a counterclockwise manner, this is the angular component of the vector originating at the center of the constant curve and pointing towards the first endpoint of the constant curve.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConstCurveFeature.Radius">
            <summary>
            Gets or sets the radius of the circle that this constant curve lies upon.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConstCurveFeature.Position">
            <summary>
            Gets or sets the center of the circle that this constant curve lies upon. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RectangleFeature">
            <summary>
            Provides information describing a rectangle feature.
            </summary>
            <remarks>
            Width is defined as the length of the shorter side of a rectangle and height is defined as the longer side of the rectangle.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleFeature.#ctor">
            <summary>
            Initializes a new instance of the RectangleFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleFeature.Equals(NationalInstruments.Vision.Analysis.RectangleFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RectangleFeature.
            </summary>
            <param name="other">
            A RectangleFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RectangleFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of RectangleFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleFeature.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleFeature.Width">
            <summary>
            Gets or sets the width of the rectangle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleFeature.Rotation">
            <summary>
            Gets or sets the orientation of the rectangle with respect to the horizontal. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleFeature.Corners">
            <summary>
            Gets or sets the four corners of the rectangle.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleFeature.Position">
            <summary>
            Gets or sets the center of the rectangle.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LegFeature">
            <summary>
            Describes a leg feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LegFeature.#ctor">
            <summary>
            Initializes a new instance of the LegFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LegFeature.Equals(NationalInstruments.Vision.Analysis.LegFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LegFeature.
            </summary>
            <param name="other">
            A LegFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LegFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LegFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LegFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LegFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LegFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LegFeature.Height">
            <summary>
            Gets or sets the height of the leg.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LegFeature.Width">
            <summary>
            Gets or sets the width of the leg.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LegFeature.Rotation">
            <summary>
            Gets or sets the orientation of the leg with respect to the horizontal.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LegFeature.Corners">
            <summary>
            Gets the coordinates of the four corners of the leg feature. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LegFeature.Position">
            <summary>
            Gets or sets the location of the leg feature. The location is the center of the segment adjoining the two parallel sides.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CornerFeature">
            <summary>
            Describes a corner feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CornerFeature.#ctor">
            <summary>
            Initializes a new instance of the CornerFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CornerFeature.Equals(NationalInstruments.Vision.Analysis.CornerFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CornerFeature.
            </summary>
            <param name="other">
            A CornerFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CornerFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CornerFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CornerFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CornerFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CornerFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CornerFeature.IsVirtual">
            <summary>
            Gets or sets whether a corner is virtual. This parameter is <see langword="true"/> if the corner is 
            virtual and <see langword="false"/> if the corner is not virtual. A virtual corner is a corner that 
            would be created if two non-intersecting lines are extended until they intersect. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CornerFeature.EnclosedAngle">
            <summary>
            Gets or sets the measure of the enclosed angle of the corner. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CornerFeature.Rotation">
            <summary>
            Gets or sets the angular component of the vector bisecting the corner from Position.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CornerFeature.Position">
            <summary>
            Gets or sets the location of the corner feature.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParallelLinePairFeature">
            <summary>
            Provides information about a parallel line pair feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.#ctor">
            <summary>
            Initializes a new instance of the ParallelLinePairFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.Equals(NationalInstruments.Vision.Analysis.ParallelLinePairFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParallelLinePairFeature.
            </summary>
            <param name="other">
            A ParallelLinePairFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParallelLinePairFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParallelLinePairFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.Distance">
            <summary>
            Gets or sets the distance from the first line to the second line. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.Rotation">
            <summary>
            Gets or sets the orientation of the feature with respect to the horizontal. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.SecondLine">
            <summary>
            Gets or sets the starting point and ending point of the second line of the pair. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParallelLinePairFeature.FirstLine">
            <summary>
            Gets or sets the starting point and ending point of the first line of the pair. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature">
            <summary>
            Provides information about a pair of parallel line pairs feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.#ctor">
            <summary>
            Initializes a new instance of the PairOfParallelLinePairsFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.Equals(NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PairOfParallelLinePairsFeature.
            </summary>
            <param name="other">
            A PairOfParallelLinePairsFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PairOfParallelLinePairsFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of PairOfParallelLinePairsFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.Distance">
            <summary>
            Gets or sets the distance from the midline of the first parallel line pair to the midline of the second parallel line pair. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.Rotation">
            <summary>
            Gets or sets the orientation of the feature with respect to the horizontal. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.SecondParallelLinePair">
            <summary>
            Gets or sets the second parallel line pair. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PairOfParallelLinePairsFeature.FirstParallelLinePair">
            <summary>
            Gets or sets the first parallel line pair. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LineFeature">
            <summary>
            Describes a line feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineFeature.#ctor">
            <summary>
            Initializes a new instance of the LineFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineFeature.Equals(NationalInstruments.Vision.Analysis.LineFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineFeature.
            </summary>
            <param name="other">
            A LineFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LineFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineFeature.Rotation">
            <summary>
            Gets or sets the orientation of the line with respect to the horizontal.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineFeature.Length">
            <summary>
            Gets or sets the length of the line measured in pixels from the start point to the end point. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineFeature.Line">
            <summary>
            Gets or sets the coordinates of the line.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClosedCurveFeature">
            <summary>
            Describes a closed curve feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClosedCurveFeature.#ctor">
            <summary>
            Initializes a new instance of the ClosedCurveFeature class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClosedCurveFeature.Equals(NationalInstruments.Vision.Analysis.ClosedCurveFeature)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClosedCurveFeature.
            </summary>
            <param name="other">
            A ClosedCurveFeature instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClosedCurveFeature.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClosedCurveFeature.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClosedCurveFeature
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClosedCurveFeature.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClosedCurveFeature.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClosedCurveFeature.ArcLength">
            <summary>
            Gets or sets the arc length of the closed curve feature. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClosedCurveFeature.Position">
            <summary>
            Gets or sets the center of the closed curve feature. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GeometricFeatureData">
            <summary>
            Describe a generic geometric matching feature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureData.#ctor(NationalInstruments.Vision.Analysis.GeometricFeatureType)">
            <summary>
            Initializes a new instance of the GeometricFeatureData class.
            </summary>
            <param name="featureType">
            Specifies the feature type.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureData.Equals(NationalInstruments.Vision.Analysis.GeometricFeatureData)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricFeatureData.
            </summary>
            <param name="other">
            A GeometricFeatureData instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureData.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricFeatureData.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of GeometricFeatureData and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureData.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureData.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureData.Feature">
            <summary>
            Gets or sets the feature data specific to this type of feature. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureData.ContourPoints">
            <summary>
            Gets or sets a set of points describing the contour of the feature. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureData.FeatureType">
            <summary>
            Gets or sets the feature type.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch">
            <summary>
            Provides information describing a matched geometric pattern.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.#ctor">
            <summary>
            Initializes a new instance of the GeometricFeatureBasedPatternMatch class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Equals(NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricFeatureBasedPatternMatch.
            </summary>
            <param name="other">
            A GeometricFeatureBasedPatternMatch instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricFeatureBasedPatternMatch.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of GeometricFeatureBasedPatternMatch and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.CalibratedCorners">
            <summary>
            Gets an array of four points describing the rectangle surrounding the template image.
            </summary>
            <remarks>
            If the image where the match is found is a calibrated image, then this value describes the calibrated rectangle. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.CalibratedRotation">
            <summary>
            Gets or sets the rotation of the match relative to the template image, in degrees. 
            </summary>
            <remarks>
            If the image where the match is found is a calibrated image, then this value is in real-world units. Otherwise, this value is the same as <see cref="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Rotation" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.CalibratedPosition">
            <summary>
            Gets or sets the location of the origin of the template in the match. 
            </summary>
            <remarks>
            If the image where the match is found is a calibrated image, then this value is in real-world units. Otherwise, this value is the same as <see cref="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Position" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Features">
            <summary>
            Gets or sets the features uses in this match.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.CorrelationScore">
            <summary>
            Gets or sets the accuracy of the match obtained by comparing the template image to the match region using a correlation metric that compares the two regions as a function of their pixel values.
            </summary>
            <remarks>
            A score of 1,000 indicates a perfect match, and a score of 0 indicates no match.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.MatchTemplateCurveScore">
            <summary>
            Gets or sets the accuracy of the match obtained by comparing the curves in the match region to the template curves. 
            </summary>
            <remarks>
            A score of 1,000 indicates a perfect match, and a score of 0 indicates no match. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.TemplateMatchCurveScore">
            <summary>Gets or sets the accuracy of the match obtained by comparing the template curves to the curves in the match region. 
            </summary>
            <remarks>
            A score of 1,000 indicates a perfect match, and a score of 0 indicates no match. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Occlusion">
            <summary>
            Gets or sets the percentage of the match that is occluded. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Inverse">
            <summary>
            Gets or sets whether the match is an inverse of the template image. 
            </summary>
            <remarks>
            This element is <see langword="true"/> if the match is an inverse of the template image. For example, the match is a white object on a black background 
            but the template image is a black object on a white background. This element is <see langword="false"/> if the match and the template image have the same 
            contrast with the image background. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Corners">
            <summary>
            Gets or sets an array of four points describing the rectangle surrounding the template image. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Score">
            <summary>
            Gets or sets the accuracy of the match. A score of 1,000 indicates a perfect match, and a score of 0 indicates no match. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Scale">
            <summary>
            Gets or sets the size of the match relative to the size of the template image, expressed as a percentage. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Rotation">
            <summary>
            Gets or sets the rotation of the match relative to the template image, in degrees. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricFeatureBasedPatternMatch.Position">
            <summary>
            Gets or sets the location of the origin of the template in the match. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch">
            <summary>
            Provides information describing a matched geometric pattern.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.#ctor">
            <summary>
            Initializes a new instance of the GeometricEdgeBasedPatternMatch class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Equals(NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricEdgeBasedPatternMatch.
            </summary>
            <param name="other">
            A GeometricEdgeBasedPatternMatch instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricEdgeBasedPatternMatch.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of GeometricEdgeBasedPatternMatch and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Corners">
            <summary>
            Gets or sets an array of four points describing the rectangle surrounding the template image. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.CalibratedCorners">
            <summary>
            Gets an array of four points describing the rectangle surrounding the template image.
            </summary>
            <remarks>
            If the image where the match is found is a calibrated image, then this value describes the calibrated rectangle. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Score">
            <summary>
            Gets or sets the accuracy of the match. A score of 1,000 indicates a perfect match, and a score of 0 indicates no match. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Scale">
            <summary>
            Gets or sets the size of the match relative to the size of the template image, expressed as a percentage. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Rotation">
            <summary>
            Gets or sets the rotation of the match relative to the template image, in degrees. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Inverse">
            <summary>
            Gets or sets whether the match is an inverse of the template image. 
            </summary>
            <remarks>
            This element is <see langword="true"/> if the match is an inverse of the template image. For example, the match is a white object on a black background 
            but the template image is a black object on a white background. This element is <see langword="false"/> if the match and the template image have the same 
            contrast with the image background. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Occlusion">
            <summary>
            Gets or sets the percentage of the match that is occluded. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.TemplateMatchCurveScore">
            <summary>Gets or sets the accuracy of the match obtained by comparing the template curves to the curves in the match region. 
            </summary>
            <remarks>
            A score of 1,000 indicates a perfect match, and a score of 0 indicates no match. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.MatchTemplateCurveScore">
            <summary>
            Gets or sets the accuracy of the match obtained by comparing the curves in the match region to the template curves. 
            </summary>
            <remarks>
            A score of 1,000 indicates a perfect match, and a score of 0 indicates no match.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.CorrelationScore">
            <summary>
            Gets or sets the accuracy of the match obtained by comparing the template image to the match region using a correlation metric that compares the two regions as a function of their pixel values.
            </summary>
            <remarks>
            A score of 1,000 indicates a perfect match, and a score of 0 indicates no match.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.CalibratedRotation">
            <summary>
            Gets or sets the rotation of the match relative to the template image, in degrees. 
            </summary>
            <remarks>
            If the image where the match is found is a calibrated image, then this value is in real-world units. Otherwise, this value is the same as <see cref="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Rotation" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Position">
            <summary>
            Gets or sets the location of the origin of the template in the match. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.CalibratedPosition">
            <summary>
            Gets or sets the location of the origin of the template in the match. 
            </summary>
            <remarks>
            If the image where the match is found is a calibrated image, then this value is in real-world units. Otherwise, this value is the same as <see cref="P:NationalInstruments.Vision.Analysis.GeometricEdgeBasedPatternMatch.Position" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CoordinateTransform">
            <summary>
            Specifies how to transform pixel coordinates based on the difference between the reference coordinate system and the measurement coordinate system.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinateTransform.#ctor">
            <summary>
            Initializes a new instance of the CoordinateTransform class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinateTransform.#ctor(NationalInstruments.Vision.CoordinateSystem)">
            <summary>
            </summary>
            <param name="measurementSystem">The coordinate system in which the function should perform measurements. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinateTransform.#ctor(NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.CoordinateSystem)">
            <summary>
            </summary>
            <param name="referenceSystem">The coordinate system for input coordinates. 
            </param>
            <param name="measurementSystem">The coordinate system in which the function should perform measurements. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinateTransform.Equals(NationalInstruments.Vision.Analysis.CoordinateTransform)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CoordinateTransform.
            </summary>
            <param name="other">
            A CoordinateTransform instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinateTransform.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CoordinateTransform.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CoordinateTransform and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinateTransform.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinateTransform.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CoordinateTransform.MeasurementSystem">
            <summary>
            Gets or sets the coordinate system in which the function should perform measurements. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CoordinateTransform.ReferenceSystem">
            <summary>
            Gets or sets the coordinate system for input coordinates. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions">
            <summary>
            Specifies how to calibrate the image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.#ctor">
            <summary>
            Initializes a new instance of the SimpleCalibrationOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.#ctor(NationalInstruments.Vision.CoordinateSystem)">
            <summary>
            Initializes a new instance of the SimpleCalibrationOptions class.
            </summary>
            <param name="axisInfo">
            The reference coordinate system for the real-world coordinates. For an image that has already been 
            calibrated, this axis information overrides the old axis information.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.#ctor(NationalInstruments.Vision.CoordinateSystem,NationalInstruments.Vision.ScalingMethod)">
            <summary>
            Initializes a new instance of the SimpleCalibrationOptions class.
            </summary>
            <param name="axisInfo">
            The reference coordinate system for the real-world coordinates. For an image that has already been 
            calibrated, this axis information overrides the old axis information.
            </param>
            <param name="correctionScalingMethod">
            The scaling to use in the corrected image. The default is ScaleToPreserveArea.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.Equals(NationalInstruments.Vision.Analysis.SimpleCalibrationOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SimpleCalibrationOptions.
            </summary>
            <param name="other">
            A SimpleCalibrationOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SimpleCalibrationOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SimpleCalibrationOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.LearnCorrectionTable">
            <summary>
            Gets or sets whether the correction table is processed and stored.
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
            <remarks>
            The correction table accelerates the process of correcting an image. A correction table is useful if several images are 
            going to be corrected. If the current operation resets the real-world coordinate system, or if the correction table is 
            still required, the correction table is relearned.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.AxisInfo">
            <summary>
            Gets or sets the reference coordinate system for the real-world coordinates. For an image that has already been 
            calibrated, this axis information overrides the old axis information.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SimpleCalibrationOptions.CorrectionScalingMethod">
            <summary>
            Gets or sets the scaling to be used in the corrected image.
            </summary>
            <value>
            The default is ScaleToPreserveArea.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CoordinatesReport">
            <summary>
            Provides the converted coordinates that result from the ConvertRealWorldToPixelCoordinates or the ConvertPixelToRealWorldCoordinates methods.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinatesReport.#ctor">
            <summary>
            Creates and returns a CoordinatesReport object.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinatesReport.Equals(NationalInstruments.Vision.Analysis.CoordinatesReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CoordinatesReport.
            </summary>
            <param name="other">
            A CoordinatesReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinatesReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CoordinatesReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CoordinatesReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinatesReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CoordinatesReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CoordinatesReport.Points">
            <summary>
            Gets or sets the converted coordinates.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CoordinatesReport.ValidPoints">
            <summary>
            Gets or sets an array of Boolean values that specify whether each of the coordinates is valid according to the region 
            selected in the CorrectionRegionMode of <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationGrid(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            or <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnCalibrationPoints(NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})" crefType="Unqualified"/>. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleReport">
            <summary>
            Provides information about a particle in an image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleReport.#ctor">
            <summary>
            Initializes a new instance of the ParticleReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleReport.Equals(NationalInstruments.Vision.Analysis.ParticleReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleReport.
            </summary>
            <param name="other">
            A ParticleReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParticleReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleReport.Orientation">
            <summary>
            Gets or sets the orientation of the particle in degrees.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleReport.NumberOfHoles">
            <summary>
            Gets or sets the number of holes in the particle.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleReport.CenterOfMass">
            <summary>
            Gets or sets the center of mass of the particle.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleReport.BoundingRect">
            <summary>
            Gets or sets the bounding rectangle of the particle.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleReport.Area">
            <summary>
            Gets or sets the area of the particle.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleFilterCriteria">
            <summary>
            Describes the criteria used to filter particles in the image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.#ctor(NationalInstruments.Vision.Analysis.MeasurementType,NationalInstruments.Vision.Range)">
            <summary>
            Initializes a new instance of the ParticleFilterCriteria class.
            </summary>
            <param name="parameter">
            The morphological measurement that the method uses for filtering. 
            </param>
            <param name="range">
            The range for the measurement chosen in parameter.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.#ctor(NationalInstruments.Vision.Analysis.MeasurementType,NationalInstruments.Vision.Range,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticleFilterCriteria class.
            </summary>
            <param name="parameter">
            The morphological measurement that the method uses for filtering. 
            </param>
            <param name="range">
            The range for the measurement chosen in parameter.
            </param>
            <param name="calibrated">
            Specifies whether to take calibrated measurements or pixel measurements. Set this parameter 
            to <see langword="true"/> to take calibrated measurements. Set this parameter to <see langword="false"/> 
            to take pixel measurements. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.#ctor(NationalInstruments.Vision.Analysis.MeasurementType,NationalInstruments.Vision.Range,System.Boolean,NationalInstruments.Vision.Analysis.RangeType)">
            <summary>
            Initializes a new instance of the ParticleFilterCriteria class.
            </summary>
            <param name="parameter">
            The morphological measurement that the method uses for filtering. 
            </param>
            <param name="range">
            The range for the measurement chosen in parameter.
            </param>
            <param name="calibrated">
            Specifies whether to take calibrated measurements or pixel measurements. Set this parameter 
            to <see langword="true"/> to take calibrated measurements. Set this parameter to <see langword="false"/> 
            to take pixel measurements. 
            </param>
            <param name="rangeType">
            Specifies whether to include or exclude the values given in Range. When <format type="italics">rangeType</format> 
            is InsideRange, the particle meets the criteria if range lower value <entity value="le"/> particle measurement <entity value="lt"/> range upper value.
            When <format type="italics">rangeType</format> is OutsideRange, the particle meets the criteria if range upper value <entity value="ge"/>  
            particle measurement or particle measurement <entity value="lt"/>  range lower value.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.Equals(NationalInstruments.Vision.Analysis.ParticleFilterCriteria)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleFilterCriteria.
            </summary>
            <param name="other">
            A ParticleFilterCriteria instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleFilterCriteria.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParticleFilterCriteria
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.RangeType">
            <summary>
            Gets or sets whether to include or exclude the values given in Range. 
            <para>
            When RangeType is InsideRange, 
            the particle meets the criteria if Range Lower Value <entity value="le"/> particle measurement <entity value="lt"/> Range Upper Value.
            </para>
            	<para>
            When RangeType is OutsideRange, the particle meets the criteria if Range Upper Value <entity value="ge"/>  particle measurement 
            or particle measurement <entity value="lt"/> Range Lower Value.
            </para>
            </summary>
            <value>
            The default is InsideRange.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.Calibrated">
            <summary>
            Gets or sets whether to take calibrated measurements or pixel measurements. Set this parameter 
            to <see langword="true"/> to take calibrated measurements. Set this parameter to <see langword="false"/> 
            to take pixel measurements. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.Range">
            <summary>
            Gets or sets the range for the measurement chosen in Parameter.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleFilterCriteria.Parameter">
            <summary>
            Gets or sets the morphological measurement that the method uses for filtering. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleFilterOptions">
            <summary>
            Provides options used by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ParticleFilter(NationalInstruments.Vision.VisionImage,NationalInstruments.Vision.VisionImage,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ParticleFilterCriteria})" crefType="Unqualified"/> 
            method to filter binary particles.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.#ctor">
            <summary>
            Initializes a new instance of the ParticleFilterOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParticleFilterOptions class.
            </summary>
            <param name="rejectMatches">
            Specifies whether to reject matches. Set this parameter to <see langword="true"/> to transfer only those 
            particles that do not meet all the criteria. Set this parameter to 
            <see langword="false"/> to transfer only those particles that meet 
            all the criteria to the destination. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticleFilterOptions class.
            </summary>
            <param name="rejectMatches">
            Specifies whether to reject matches. Set this parameter to <see langword="true"/> to transfer only those 
            particles that do not meet all the criteria. Set this parameter to 
            <see langword="false"/> to transfer only those particles that meet 
            all the criteria to the destination. 
            </param>
            <param name="rejectBorder">
            Specifies whether to reject border particles. Set this parameter to 
            <see langword="true"/> to reject border particles. Set this parameter to 
            <see langword="false"/> to keep border particles.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParticleFilterOptions class.
            </summary>
            <param name="rejectMatches">
            Specifies whether to reject matches. Set this parameter to <see langword="true"/> to transfer only those 
            particles that do not meet all the criteria. Set this parameter to 
            <see langword="false"/> to transfer only those particles that meet 
            all the criteria to the destination. 
            </param>
            <param name="rejectBorder">
            Specifies whether to reject border particles. Set this parameter to 
            <see langword="true"/> to reject border particles. Set this parameter to 
            <see langword="false"/> to keep border particles.
            </param>
            <param name="fillHoles">
            Specifies whether to fill holes in the particle. Set this parameter to 
            <see langword="true"/> to fill holes in particles. Set this parameter to 
            <see langword="false"/> to keep the holes in particles. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,NationalInstruments.Vision.Analysis.Connectivity)">
            <summary>
            Initializes a new instance of the ParticleFilterOptions class.
            </summary>
            <param name="rejectMatches">
            Specifies whether to reject matches. Set this parameter to <see langword="true"/> to transfer only those 
            particles that do not meet all the criteria. Set this parameter to 
            <see langword="false"/> to transfer only those particles that meet 
            all the criteria to the destination. 
            </param>
            <param name="rejectBorder">
            Specifies whether to reject border particles. Set this parameter to 
            <see langword="true"/> to reject border particles. Set this parameter to 
            <see langword="false"/> to keep border particles.
            </param>
            <param name="fillHoles">
            Specifies whether to fill holes in the particle. Set this parameter to 
            <see langword="true"/> to fill holes in particles. Set this parameter to 
            <see langword="false"/> to keep the holes in particles. 
            </param>
            <param name="connectivity">
            Specifies the type of connectivity to use. Set this parameter to Connectivity8 to use 
            connectivity-8 to determine whether particles are touching. Set this parameter to Connectivity4 
            to use connectivity-4 to determine whether particles are touching.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.Equals(NationalInstruments.Vision.Analysis.ParticleFilterOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified 
            ParticleFilterOptions.
            </summary>
            <param name="other">
            A ParticleFilterOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleFilterOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParticleFilterOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleFilterOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleFilterOptions.Connectivity">
            <summary>
            Gets or sets the type of connectivity to use. Set this parameter to Connectivity8 to use 
            connectivity-8 to determine whether particles are touching. Set this parameter to Connectivity4 
            to use connectivity-4 to determine whether particles are touching.
            </summary>
            <value>
            The default is Connectivity8.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleFilterOptions.RejectBorder">
            <summary>
            Gets or sets whether to reject border particles. Set this parameter to 
            <see langword="true"/> to reject border particles. Set this parameter to 
            <see langword="false"/> to keep border particles. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleFilterOptions.FillHoles">
            <summary>
            Gets or sets whether to fill holes in the particle. Set this parameter to 
            <see langword="true"/> to fill holes in particles. Set this parameter to 
            <see langword="false"/> to keep the holes in particles. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleFilterOptions.RejectMatches">
            <summary>
            Gets or sets whether to reject matches. Set this parameter to <see langword="true"/> to transfer only those 
            particles that do not meet all the criteria. Set this parameter to 
            <see langword="false"/> to transfer only those particles that meet 
            all the criteria to the destination. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrValidCharactersForPosition">
            <summary>
            Sets the characters that are valid for the character position that corresponds to the index of this item 
            in the <see cref="T:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection" crefType="Unqualified"/>.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrValidCharactersForPosition.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrValidCharactersForPosition.PredefinedCharacters">
            <summary>
            Gets or sets predefined sets of valid characters. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrValidCharactersForPosition.UserDefinedCharacters">
            <summary>
            Gets or sets the string that contains all characters that are valid for the corresponding 
            character position when you set PredefinedCharacters to UserDefinedCharacters.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection">
            <summary>
            Sets the characters that are valid for each character position. The number of 
            objects in this collection specifies the number of valid positions you want to identify. 
            Any characters beyond this number are ignored.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection.Add(NationalInstruments.Vision.Analysis.OcrPredefinedCharacters)">
            <summary>
            Adds an OcrValidCharactersForPosition object to the OcrValidCharactersCollection collection.
            </summary>
            <param name="predefined">
            Specifies predefined sets of valid characters. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection.Add(System.String)">
            <summary>
            Adds an OcrValidCharactersForPosition object to the OcrValidCharactersCollection collection.
            </summary>
            <param name="userDefined">
            Specifies the string that contains all characters that are valid for the corresponding 
            character position.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the OcrValidCharactersForPosition object at the specified index from the OcrValidCharactersCollection collection.
            </summary>
            <param name="index">
            The location of the OcrValidCharactersForPosition object.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection.Insert(System.Int32,NationalInstruments.Vision.Analysis.OcrPredefinedCharacters)">
            <summary>
            Inserts an OcrValidCharactersForPosition object to the OcrValidCharactersCollection collection.
            </summary>
            <param name="index">
            The index of the character position to insert the object.
            </param>
            <param name="predefined">
            Specifies predefined sets of valid characters. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts an OcrValidCharactersForPosition object to the OcrValidCharactersCollection collection.
            </summary>
            <param name="index">
            The index of the character position to insert the object.
            </param>
            <param name="userDefined">
            Specifies the string that contains all characters that are valid for the corresponding 
            character position.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection.Clear">
            <summary>
            Removes all items from the collection. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrValidCharactersCollection.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrReadTextOptions">
            <summary>
            Configures how text is read.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrReadTextOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrReadTextOptions.ReadResolution">
            <summary>
            Gets or sets the read resolution, which determines how much of the trained character 
            data is used to match objects to trained characters.
            </summary>
            <value>
            The default is LowResolution.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrReadTextOptions.AspectRatio">
            <summary>
            Gets or sets the aspect ratio. Set this property to 0 to read text without considering 
            the aspect ratio. Set this property to a minimum value of 100 to consider the aspect 
            ratio when reading text. Setting the aspect ratio to 100 indicates that you expect the 
            read character to be exactly the same size as the trained character. This property does 
            not have a maximum value.
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrReadTextOptions.AcceptanceLevel">
            <summary>
            Gets or sets the minimum acceptance level at which an object is considered a trained character. 
            The range of valid values for this attribute is 0 to 1,000.
            </summary>
            <value>
            The default is 700.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrReadTextOptions.ReadStrategy">
            <summary>
            Gets or sets the possible read strategies. The read strategy determines how closely 
            images are analyzed to match objects with trained characters.
            </summary>
            <value>
            The default is Aggressive, which means that few criteria is used to analyze images.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrReadTextOptions.SubstitutionCharacter">
            <summary>
            Gets or sets the character that 
            <see cref="M:NationalInstruments.Vision.Analysis.OcrSession.ReadText(NationalInstruments.Vision.VisionImage)" crefType="PartiallyQualified"/> 
            substitutes for objects it cannot match with any of the trained characters. 
            </summary>
            <value>
            The default is a question mark (?).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrReadTextOptions.ValidCharacters">
            <summary>
            Gets the characters that are compared against read characters during the reading process. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrProcessingOptions">
            <summary>
            Configures how to train or read characters.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrProcessingOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.ErosionCount">
            <summary>
            Gets or sets the number of erosions to perform. After performing the erosions, the method 
            restores the remaining objects to their original uneroded size. Set this attribute to 0 if 
            you do not want to remove small particles. 
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.RemoveParticlesTouchingRoi">
            <summary>
            Gets or sets whether to remove particles touching the ROI. Set this element to <see langword="true"/> 
            to remove the particles touching the ROI. Set this element to <see langword="false"/> 
            to include the particles touching the ROI.
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.DarkCharacters">
            <summary>
            Gets or sets which pixel intensity to read or train in the image. Set this element to <see langword="true"/> 
            to read or train dark characters on a light background. Set this element to <see langword="false"/> to read 
            or train light characters on a dark background. 
            </summary>
            <value>
            The default is <see langword="true"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.BiModalCalculation">
            <summary>
            Gets or sets how to calculate low and high threshold values when the threshold calculation 
            is optimized. Set this parameter to <see langword="true"/> to calculate both the low and 
            high threshold values when using the fast thresholding method. Set this parameter to 
            <see langword="false"/> to calculate only the high threshold value when reading or training 
            dark characters and to calculate only the low threshold value when reading or training light 
            characters. This option is available only when FastThreshold is <see langword="true"/>. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.FastThreshold">
            <summary>
            Gets or sets whether to use a faster, less accurate threshold. Set this parameter to <see langword="true"/> 
            to use a faster, less accurate threshold calculation algorithm. Set this parameter to <see langword="false"/> 
            to use a slower, more accurate threshold calculation algorithm. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.BlockCount">
            <summary>
            Gets or sets the number of blocks for threshold calculation algorithms that require blocks. Valid values range from 4 to 50. 
            </summary>
            <value>
            The default is 4.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.ThresholdRange">
            <summary>
            Gets the low and high threshold values when you set Mode to FixedRange.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.ThresholdLimits">
            <summary>
            Gets the lower and upper threshold limits to establish a limit on the threshold calculated by the automatic 
            threshold calculation algorithms. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrProcessingOptions.Mode">
            <summary>
            Gets or sets the thresholding mode. 
            </summary>
            <value>
            The default is ComputedUniform.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.OcrSpacingOptions">
            <summary>
            Character size and spacing constraints you want to use during the training or reading process.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.OcrSpacingOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSpacingOptions.AutoSplit">
            <summary>
            Gets or sets whether to split overlapping characters.
            Set this parameter to <see langword="true"/> to automatically adjust the location of the character 
            bounding rectangle when characters overlap vertically. This parameter is useful 
            when you are working with an image that contains slanted characters. If the characters are 
            not slanted and/or do not overlap vertically, set this parameter to <see langword="false"/>. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSpacingOptions.BoundingRectHeightRange">
            <summary>
            Gets or sets the minimum and maximum possible height, in pixels, for a character bounding rectangle. 
            The minimum acceptable value for this parameter is 1. Set the maximum value to 65536 to
            specify that all heights greater than the minimum value are acceptable.
            </summary>
            <value>
            The default is (1, 65536).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSpacingOptions.BoundingRectWidthRange">
            <summary>
            Gets or sets the minimum and maximum possible width, in pixels, for a character bounding rectangle. 
            The minimum acceptable value for this parameter is 1. Set the maximum value to 65536 to
            specify that all widths greater than the minimum value are acceptable.
            </summary>
            <value>
            The default is (1, 65536).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSpacingOptions.MaximumVerticalElementSpacing">
            <summary>
            Gets or sets the maximum vertical element spacing in pixels. Elements whose spacing from the main 
            character element exceeds MaximumVerticalElementSpacing are not used for training or reading. 
            Set this parameter to 0 to specify that any element in the ROI should be considered part 
            of a character. 
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSpacingOptions.MaximumHorizontalElementSpacing">
            <summary>
            Gets or sets the maximum horizontal spacing, in pixels, allowed between character elements to 
            train or read the character elements as a single character. This value cannot exceed the minimum value of
            CharSizeRange. The minimum acceptable value for this parameter is 0. 
            </summary>
            <value>
            The default is 1.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSpacingOptions.CharSizeRange">
            <summary>
            Gets or sets the minimum and maximum number of pixels required for an object to be a 
            potentially identifiable character. The minimum acceptable value for this parameter is 1. 
            The maximum value cannot exceed MinimumCharSpacing.
            </summary>
            <value>
            The default is (20, 65536).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.OcrSpacingOptions.MinimumCharSpacing">
            <summary>
            Gets or sets the minimum amount of space, in pixels, that can be between characters. 
             This value cannot be less than MaximumHorizontalElementSpacing. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CharacterStatistics">
            <summary>
            Describes the characters segmented in the ROI.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterStatistics.#ctor">
            <summary>
            Initializes a new instance of the CharacterStatistics class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterStatistics.Equals(NationalInstruments.Vision.Analysis.CharacterStatistics)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CharacterStatistics.
            </summary>
            <param name="other">
            A CharacterStatistics instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterStatistics.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CharacterStatistics.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CharacterStatistics and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterStatistics.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterStatistics.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterStatistics.CharacterSize">
            <summary>
            Gets or sets the size of the character in pixels. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterStatistics.BoundingRectangle">
            <summary>
            Gets or sets the rectangle surrounding the match. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CharacterReport">
            <summary>
            Provides information pertaining to a particular read character.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterReport.#ctor">
            <summary>
            Initializes a new instance of the CharacterReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterReport.Equals(NationalInstruments.Vision.Analysis.CharacterReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CharacterReport.
            </summary>
            <param name="other">
            A CharacterReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CharacterReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CharacterReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CharacterReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterReport.CharacterStatistics">
            <summary>
            Gets or sets information about the characters segmented in the ROI.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterReport.ThresholdRange">
            <summary>
            Gets or sets the range of threshold limits that was used to threshold the character. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterReport.Verified">
            <summary>
            Gets or sets whether a reference character was found for the character class.
            </summary>
            <value>
            	<see langword="true"/>  if a reference character was found for the character class and <see langword="false"/>  if a reference character was not found.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterReport.VerificationScore">
            <summary>
            Gets or sets the level of similarity of the character and the reference character for the character class.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterReport.ClassificationScore">
            <summary>
            Gets or sets the degree to which the assigned character class represents the object better than the other character classes in the character set. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CharacterReport.CharacterValue">
            <summary>
            Gets or sets the value of the identified character. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ReadTextReport">
            <summary>
            Provides information about the text read.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport.#ctor">
            <summary>
            Initializes a new instance of the ReadTextReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport.Dispose">
            <summary>
            Releases all resources used by the ReadTextReport. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport.Equals(NationalInstruments.Vision.Analysis.ReadTextReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ReadTextReport.
            </summary>
            <param name="other">
            A ReadTextReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ReadTextReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ReadTextReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadTextReport.RoiBoundingCharacters">
            <summary>
            Gets or sets the coordinates of the character-bounding ROI.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadTextReport.CharacterReports">
            <summary>
            Gets or sets a collection of reports describing the properties of each identified character.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadTextReport.ReadString">
            <summary>
            Gets or sets the string that was read.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport2.#ctor">
            <summary>
            Initializes a new instance of the ReadTextReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport2.Dispose">
            <summary>
            Releases all resources used by the ReadTextReport. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport2.Equals(NationalInstruments.Vision.Analysis.ReadTextReport2)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ReadTextReport.
            </summary>
            <param name="other">
            A ReadTextReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport2.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ReadTextReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ReadTextReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport2.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadTextReport2.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadTextReport2.RoiBoundingCharacters">
            <summary>
            Gets or sets the coordinates of the character-bounding ROI.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadTextReport2.CharacterReports">
            <summary>
            Gets or sets a collection of reports describing the properties of each identified character.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadTextReport2.ReadString">
            <summary>
            Gets or sets the string that was read.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.VBCustomData">
            <summary>
            Allows reading and writing data in a compatible format with the NI Vision Legacy ActiveX control, specifically the CWIMAQData class.
            </summary>
            <remarks>
            If you are developing a new application, there is no need to use this class.  The only reason to use this class is for interoperability with the CWIMAQData class of the NI Vision Legacy ActiveX control.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.VBCustomData.#ctor">
            <summary>
            Initializes a new instance of the VBCustomData class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.VBCustomData.#ctor(System.String,System.Single[],System.Byte[])">
            <summary>
            Initializes a new instance of the VBCustomData class.
            </summary>
            <param name="text">
            The part of the data that is a string.
            </param>
            <param name="numeric">
            The part of the data that is an array of Singles.
            </param>
            <param name="bytes">
            The part of the data that is an array of bytes.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.VBCustomData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the VBCustomData class.
            </summary>
            <param name="vbData">
            The raw data written with the NI Vision Legacy ActiveX control.
            </param>
            <remarks>
            This constructor can correctly interpret data written with the NI Vision Legacy ActiveX Control, specifically the CWIMAQData class.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.VBCustomData.Equals(NationalInstruments.Vision.Analysis.VBCustomData)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified VBCustomData.
            </summary>
            <param name="other">
            A VBCustomData instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.VBCustomData.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified VBCustomData.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of VBCustomData and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.VBCustomData.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.VBCustomData.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.VBCustomData.ConvertToBytes">
            <summary>
            Converts custom data to bytes.
            </summary>
            <returns>
            An array of bytes.
            </returns>
            <remarks>
            These bytes are compatible with the with the NI Vision Legacy ActiveX Control, specifically the CWIMAQData class.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.VBCustomData.Byte">
            <summary>
            Gets or sets the part of the data that is an array of bytes.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.VBCustomData.Numeric">
            <summary>
            Gets or sets the part of the data that is an array of Singles.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.VBCustomData.Text">
            <summary>
            Gets or sets the part of the data that is a string.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierClass">
            <summary>
            Contains information about a class in a classifier.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierClass.#ctor(System.String,System.Double,System.Double)">
            <summary>Initializes a new instance of the ClassifierClass class.
            </summary>
            <param name="name">The name of the class in the classifier.</param>
            <param name="accuracy">
            The accuracy information for this class.  This indicates the probability that the classifier classifies a sample into the correct class.
            </param>
            <param name="predictiveValue">The predictive value for this class.  This indicates the probability that a sample classified into a given class belongs to that class.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierClass.Equals(NationalInstruments.Vision.Analysis.ClassifierClass)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierClass.
            </summary>
            <param name="other">
            A ClassifierClass instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierClass.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierClass.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of  ClassifierClass
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierClass.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierClass.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierClass.PredictiveValue">
            <summary>
            Gets or sets the predictive value of this class, which indicates the probability that a sample classified into this class belongs to this class. 
            </summary>
            <value>
            </value>
            <remarks>
            Refer to the  <format type="italics">Classifier Predictability</format> section of Chapter 15, <format type="italics">Binary Particle Classification</format>, in the <format type="italics">NI Vision Concepts Manual</format> for more information about this field.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierClass.Accuracy">
            <summary>
            Gets or sets the accuracy of this class, which indicates the probability that the classifier classifies a sample into the correct class. 
            </summary>
            <value>
            </value>
            <remarks>
            Refer to the  <format type="italics">Classifier Accuracy</format> section of Chapter 15, <format type="italics">Binary Particle Classification</format>, in the <format type="italics">NI Vision Concepts Manual</format> for more information about this field.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierClass.Name">
            <summary>
            Gets or sets the name of this class in the classifier. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport">
            <summary>
            Provides a report on the accuracy of the classifier, based on how well it classifies the samples it was trained with.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport.#ctor">
            <summary>Initializes a new instance of the ClassifierAccuracyReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport.GetClassifierDistribution">
            <summary>
            Gets or sets a two-dimensional array containing information about how the classifier classifies its samples. 
            </summary>
            <returns>
            </returns>
            <remarks>
            This array is a square array, with both dimensions containing the number of classes in the classifier.  
            <para>Refer to the <format type="italics"> Determining the Quality of a Trained Classifier</format>  section of Chapter 15, <format type="italics"> Binary Particle Classification</format>, in the <format type="italics"> NI Vision Concepts Manual</format>  for more information about this field.
            </para>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport.Equals(NationalInstruments.Vision.Analysis.ClassifierAccuracyReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierAccuracyReport.
            </summary>
            <param name="other">
            A ClassifierAccuracyReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierAccuracyReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClassifierAccuracyReport
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport.Classes">
            <summary>
            Gets accuracy information for each class.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierAccuracyReport.Accuracy">
            <summary>
            Gets or sets the accuracy of the classifier.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierSample">
            <summary>
            Represents a sample on which the classifier will be trained.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSample.GetThumbnail(NationalInstruments.Vision.VisionImage)">
            <summary>
            Returns a thumbnail image of this sample.
            </summary>
            <param name="destination">
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierSample.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierSample.ClassName">
            <summary>
            Gets or sets the name of the class this sample is in.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CustomClassifierSample">
            <summary>
            Represents a sample on which the classifier will be trained.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CustomClassifierSample.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CustomClassifierSample.FeatureVector">
            <summary>
            Gets the feature vector that describes this sample.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.WindowOptions">
            <summary>
            Represents the Paramters of Window Size the Texture Defect
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WindowOptions.#ctor">
            <summary>
            Initializes a new Instance of WindowOptions Class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WindowOptions.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WindowOptions class.
            </summary>
            <param name="x">
            The part of the data that is an Int32.
            </param>
            <param name="y">
            The part of the data that is an Int32.
            </param>
            <param name="stepSize">
            The part of the data that is an Int32.
            </param>
            
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WindowOptions.Equals(NationalInstruments.Vision.Analysis.WindowOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified WindowOptions.
            </summary>
            <param name="other">
            A WindowOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WindowOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified WindowOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of WindowOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WindowOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WindowOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WindowOptions.X">
            <summary>
            Gets or sets the x.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WindowOptions.Y">
            <summary>
            Gets or sets the y.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WindowOptions.StepSize">
            <summary>
            Gets or sets the stepSize.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DisplacementVector">
            <summary>
            Represents the DisplacementVector Paramters for Texture Defect
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DisplacementVector.#ctor">
            <summary>
            Initializes a new Instance of DisplacementVector Class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DisplacementVector.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DisplacementVector class.
            </summary>
            <param name="x">
            The part of the data that is an Int32.
            </param>
            <param name="y">
            The part of the data that is an Int32.
            </param>
            
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DisplacementVector.Equals(NationalInstruments.Vision.Analysis.DisplacementVector)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DisplacementVector.
            </summary>
            <param name="other">
            A DisplacementVector instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DisplacementVector.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DisplacementVector.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DisplacementVector
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DisplacementVector.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DisplacementVector.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DisplacementVector.X">
            <summary>
            Gets or sets the x.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DisplacementVector.Y">
            <summary>
            Gets or sets the y.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.WaveletOptions">
            <summary>
            Represents the WaveletOptions for Texture Defect
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletOptions.#ctor">
            <summary>
            Initializes a new Instance of WaveletOptions Class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletOptions.#ctor(NationalInstruments.Vision.Analysis.WaveletType,System.Double)">
            <summary>
            Initializes a new instance of the WaveletOptions class.
            </summary>
            <param name="typeOfWavelet">
            Represents the WaveletType.
            </param>
            <param name="minEnergy">
            The part of the data that is a double. Represents the minimum Energy in the bands to consider for texture defect detection.
            </param>
            
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletOptions.Equals(NationalInstruments.Vision.Analysis.WaveletOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified WaveletOptions.
            </summary>
            <param name="other">
            A WaveletOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified WaveletOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of WaveletOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NationalInstruments.Vision.Analysis.WaveletOptions.Wavelet_Type" -->
        <member name="P:NationalInstruments.Vision.Analysis.WaveletOptions.MinEnergy">
            <summary>
            Gets or sets the Min Energy parameter.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CooccurrenceOptions">
            <summary>
            Represents the Paramters for configuring the Cooccurence matrix
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceOptions.#ctor">
            <summary>
            Initializes a new Instance of CooccurrenceOptions Class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceOptions.#ctor(System.Int32,NationalInstruments.Vision.Analysis.DisplacementVector)">
            <summary>
            Initializes a new instance of the CooccurrenceOptions class.
            </summary>
            <param name="level">
            Represents the level/size of the matrix.
            </param>
            
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceOptions.Equals(NationalInstruments.Vision.Analysis.CooccurrenceOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CooccurrenceOptions.
            </summary>
            <param name="other">
            A CooccurrenceOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CooccurrenceOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CooccurrenceOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CooccurrenceOptions.Level">
            <summary>
            Gets or sets the level/size of the matrix
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CooccurrenceOptions.Displacement">
            <summary>
            Gets or sets the Displacemnet between pixels to accumulate the matrix
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassScore">
            <summary>
            Provides the distance from a class to the item that was classified.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassScore.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the ClassScore class.
            </summary>
            <param name="className">
            The name of the class.
            </param>
            <param name="distance">
            The distance between the closest sample of this class and the input sample.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassScore.Equals(NationalInstruments.Vision.Analysis.ClassScore)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassScore.
            </summary>
            <param name="other">
            A ClassScore instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassScore.Equals(System.Object)">
            <summary>Returns a value indicating whether this instance is equal to the specified ClassScore.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClassScore and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassScore.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassScore.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassScore.ClassName">
            <summary>Gets or sets the name of this class.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassScore.Distance">
            <summary>
            Gets or sets the distance between the closest sample in this class and the input sample.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SampleScore">
            <summary>
             Provides the results of the Classify and CustomClassify methods.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SampleScore.#ctor(System.String,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the SampleScore class.
            </summary>
            <param name="className">
            Specifies the name of the class.
            </param>
            <param name="distance">
            Specifies the distance from the item to the class.
            </param>
            <param name="index">
            Specifies the index of the sample.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SampleScore.Equals(NationalInstruments.Vision.Analysis.SampleScore)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SampleScore.
            </summary>
            <param name="other">
            A SampleScore instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SampleScore.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SampleScore.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SampleScore
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SampleScore.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SampleScore.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SampleScore.Index">
            <summary>
            Gets or sets the index of the sample.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierReport">
            <summary>
            Provides a report of the results of classification.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReport.#ctor">
            <summary>Initializes a new instance of the ClassifierReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReport.Equals(NationalInstruments.Vision.Analysis.ClassifierReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierReport.
            </summary>
            <param name="other">
            A ClassifierReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of  ClassifierReport
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierReport.AllScores">
            <summary>
            Gets or sets the collection of classes and their scores. 
            </summary>
            <value>
            </value>
            <remarks>
            The collection contains one score for each class in the classifier.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierReport.IdentificationScore">
            <summary>
            Gets or sets a score indicating the level of similarity of the sample and the assigned class. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierReport.ClassificationScore">
            <summary>
            Gets or sets a value indicating the similarity of the sample and the two closest classes in the classifier.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierReport.BestClassName">
            <summary>
            Gets or sets the name of the class the classifier categorizes the input sample in.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced">
            <summary>
            Provides a report of the results of classification.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced.#ctor">
            <summary>
            Initializes a new instance of the ClassifierReportAdvanced class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced.Equals(NationalInstruments.Vision.Analysis.ClassifierReportAdvanced)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierReportAdvanced.
            </summary>
            <param name="other">
            A ClassifierReportAdvanced instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifierReportAdvanced.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of  ClassifierReportAdvanced
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifierReportAdvanced.SampleScores">
            <summary>
            Gets or sets a collection of all samples and their scores.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions">
            <summary>
            Specifies the options to use when training with a Nearest Neighbor engine.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions.Equals(NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ReadOnlyNearestNeighborOptions.
            </summary>
            <param name="other">
            A ReadOnlyNearestNeighborOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ReadOnlyNearestNeighborOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ReadOnlyNearestNeighborOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions.K">
            <summary>
            Gets or sets the value of K to use when Method is set to KNearestNeighbor.
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions.Metric">
            <summary>
            Gets or sets the metric to use when training the classifier.
            </summary>
            <value>
            The default is Sum.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ReadOnlyNearestNeighborOptions.Method">
            <summary>
            Gets or sets the method to use when training the classifier.
            </summary>
            <value>
            The default is MinimumMeanDistance.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.NearestNeighborOptions">
            <summary>
            Specifies the options to use when training with a Nearest Neighbor engine.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborOptions.#ctor">
            <summary>
            Initializes a new instance of the NearestNeighborOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborOptions.#ctor(NationalInstruments.Vision.Analysis.NearestNeighborMethod)">
            <summary>
            Initializes a new instance of the NearestNeighborOptions class.
            </summary>
            <param name="method">
            The method to use when training the classifier.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborOptions.#ctor(NationalInstruments.Vision.Analysis.NearestNeighborMethod,NationalInstruments.Vision.Analysis.NearestNeighborMetric)">
            <summary>
            Initializes a new instance of the NearestNeighborOptions class.
            </summary>
            <param name="method">
            The method to use when training the classifier.
            </param>
            <param name="metric">
            The metric to use when training the classifier.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborOptions.#ctor(NationalInstruments.Vision.Analysis.NearestNeighborMethod,NationalInstruments.Vision.Analysis.NearestNeighborMetric,System.Int32)">
            <summary>
            Initializes a new instance of the NearestNeighborOptions class.
            </summary>
            <param name="method">
            The method to use when training the classifier.
            </param>
            <param name="metric">
            The metric to use when training the classifier.
            </param>
            <param name="k">
            The value of K to use when the method is set to KNearestNeighbor.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborOptions.Equals(NationalInstruments.Vision.Analysis.NearestNeighborOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified NearestNeighborOptions.
            </summary>
            <param name="other">
            A NearestNeighborOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified NearestNeighborOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of NearestNeighborOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.NearestNeighborOptions.Method">
            <summary>
            Gets or sets the method to use when training the classifier.
            </summary>
            <value>
            The default is MinimumMeanDistance.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.NearestNeighborOptions.Metric">
            <summary>
            Gets or sets the metric to use when training the classifier.
            </summary>
            <value>
            The default is Sum.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.NearestNeighborOptions.K">
            <summary>
            Gets or sets the value of K to use when Method is set to KNearestNeighbor.
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.NearestNeighborClassResult">
            <summary>
            Provides the results of training with the Nearest Neighbor engine.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborClassResult.#ctor">
            <summary>
            Initializes a new instance of the NearestNeighborClassResult class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborClassResult.Equals(NationalInstruments.Vision.Analysis.NearestNeighborClassResult)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified NearestNeighborClassResult
            </summary>
            <param name="other">
            A NearestNeighborClassResult instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborClassResult.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified NearestNeighborClassResult.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of NearestNeighborClassResult
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborClassResult.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborClassResult.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.NearestNeighborClassResult.Count">
            <summary>
            Gets or sets the number of samples in this class.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.NearestNeighborClassResult.StandardDeviation">
            <summary>
            Gets or sets the standard deviation of the members of this class.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.NearestNeighborClassResult.ClassName">
            <summary>
            Gets or sets the name of the class.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport">
            <summary>
            Provides the results of training a classifier session with the nearest neighbor algorithm.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport.#ctor">
            <summary>
            Initializes a new instance of the NearestNeighborTrainingReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport.GetClassDistancesTable">
            <summary>
            Gets a table that gives the mean distance from each class to each other class.
            </summary>
            <returns>
            An arrary giving the mean distance from each class to each other class.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport.SetClassDistancesTable(System.Double[0:,0:])">
            <summary>
            Sets an array that gives the mean distance from each class to each other class.
            </summary>
            <param name="classDistancesTable">
            An arrary giving the mean distance from each class to each other class.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport.Equals(NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified NearestNeighborTrainingReport.
            </summary>
            <param name="other">
            A NearestNeighborTrainingReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified NearestNeighborTrainingReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of NearestNeighborTrainingReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.NearestNeighborTrainingReport.ClassResults">
            <summary>
            Gets or sets a collection of results of the nearest neighbor training for every class.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions">
            <summary>
            Options used by a particle classifier to turn a grayscale image into a binary image when using an auto threshold.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.#ctor">
            <summary>
            Initializes a new instance of the ParticleClassifierAutoThresholdOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.CopyTo(NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions)">
            <summary>
            Copies the data from this class to another class.
            </summary>
            <param name="options">
            The ParticleClassifierAutoThresholdOptions to copy data to.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.Equals(NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleClassifierAutoThresholdOptions.
            </summary>
            <param name="other">
            A ParticleClassifierAutoThresholdOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleClassifierAutoThresholdOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParticleClassifierAutoThresholdOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.Limits">
            <summary>
            Gets or sets the limits on the automatic threshold range. 
            </summary>
            <value>
            The default is (0, 255).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.ParticleType">
            <summary>
            Gets or sets what kind of particles to look for. 
            </summary>
            <value>
            The default is Bright.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierAutoThresholdOptions.Method">
            <summary>
            Gets or sets the type of binary thresholding, which specifies how to calculate the classes. 
            </summary>
            <value>
            The default is Clustering.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions">
            <summary>
            Options used by a particle classifier to turn a grayscale image into a binary image when using a local threshold.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.#ctor">
            <summary>
            Initializes a new instance of the ParticleClassifierLocalThresholdOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.CopyTo(NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions)">
            <summary>
            Copies the data from this class to another class.
            </summary>
            <param name="options">
            The ParticleClassifierLocalThresholdOptions to copy data to.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.Equals(NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleClassifierLocalThresholdOptions.
            </summary>
            <param name="other">
            A ParticleClassifierLocalThresholdOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleClassifierLocalThresholdOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParticleClassifierLocalThresholdOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.DeviationWeight">
            <summary>
            Gets or sets the k constant used in the Niblack local thresholding algorithm, which determines 
            the weight applied to the variance calculation. Valid k constants range from 0 to 1. Settings 
            this value to 0 will increase the performance of the method because the method will not 
            calculate the variance for any of the pixels. The method ignores this value if Method is not 
            set to NiBlack. 
            </summary>
            <value>
            The default is 0.2.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.WindowHeight">
            <summary>
            Gets or sets the height of the rectangular window around the pixel on which the method performs 
            the local threshold. This number must be at least 3 and cannot be larger than the 
            height of an image being classified. 
            </summary>
            <value>
            The default is 32.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.WindowWidth">
            <summary>
            Gets or sets the width of the rectangular window around the pixel on which the method 
            performs the local threshold. This number must be at least 3 and cannot be larger than 
            the width of an image being classified. 
            </summary>
            <value>
            The default is 32.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.ParticleType">
            <summary>
            Gets or sets what kind of particles to look for. 
            </summary>
            <value>
            The default is Bright.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierLocalThresholdOptions.Method">
            <summary>
            Gets or sets the type of local thresholding the method uses. 
            </summary>
            <value>
            The default is NiBlack.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions">
            <summary>
            Options used by a particle classifier to turn a grayscale image into a binary image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.#ctor">
            <summary>
            Initializes a new instance of the ParticleClassifierPreprocessingOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.CopyTo(NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions)">
            <summary>
            Copies the data from this class to another class.
            </summary>
            <param name="options">
            The ParticleClassifierPreprocessingOptions to copy data to.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.Equals(NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleClassifierPreprocessingOptions.
            </summary>
            <param name="other">
            A ParticleClassifierPreprocessingOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleClassifierPreprocessingOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParticleClassifierPreprocessingOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.LocalThresholdOptions">
            <summary>
            Gets or sets the options used to local threshold the image. This parameter is only used if 
            ThresholdType is set to Local. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.AutoThresholdOptions">
            <summary>
            Gets or sets the options used to auto threshold the image. This parameter is 
            only used if ThresholdType is set to Auto. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.ThresholdType">
            <summary>
            Gets or sets the type of threshold to perform on the image. 
            </summary>
            <value>
            The default is Manual.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.NumberOfErosions">
            <summary>
            Gets or sets the number of erosions to perform. 
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.RejectBorder">
            <summary>
            Gets or sets whether to reject border particles. Set this parameter to 
            <see langword="true"/> to reject border particles. Set this parameter to 
            <see langword="false"/> to keep border particles. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierPreprocessingOptions.ManualThresholdRange">
            <summary>
            Gets or sets the range of pixels to keep if manually thresholding the image. This parameter is only used if 
            ThresholdType is set to Manual. 
            </summary>
            <value>
            The default is (1, 255).
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleClassifierOptions">
            <summary>
            Defines the dependence of the particle classifier on shape, scale, and mirror symmetry.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierOptions.#ctor">
            <summary>
            Initializes a new instance of the ParticleClassifierOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierOptions.CopyTo(NationalInstruments.Vision.Analysis.ParticleClassifierOptions)">
            <summary>
            Copies the data from this class to another class.
            </summary>
            <param name="options">
            The ParticleClassifierOptions to copy data to.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierOptions.Equals(NationalInstruments.Vision.Analysis.ParticleClassifierOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleClassifierOptions.
            </summary>
            <param name="other">
            A ParticleClassifierOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleClassifierOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParticleClassifierOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleClassifierOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierOptions.MirrorDependence">
            <summary>
            Gets or sets the relative importance of mirror symmetry when classifying particles. 
            This value ranges from 0 to 1000. 
            <para>
            An example of objects exhibiting mirror symmetry are the lowercase letters p and q. If 
            MirrorDependence is 0, the samples are classified independent of mirror symmetry. For 
            example, p and q would be classified as the same class. 
            </para>
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleClassifierOptions.ScaleDependence">
            <summary>
            Gets or sets the relative importance (between 0 and 1000) of scale when classifying particles. If 
            the value is 0, the samples are classified independent of scale.
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColorClassifierOptions">
            <summary>
            Configures the color classifier options for the classifier session.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierOptions.#ctor">
            <summary>
            Initializes a new instance of a ColorClassifierOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierOptions.SetData">
            <summary>
            Sets this options structure to the session. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierOptions.CopyTo(NationalInstruments.Vision.Analysis.ColorClassifierOptions)">
            <summary>
            Copies the data from this class to another class.
            </summary>
            <param name="options">
            The ColorClassifierOptions to copy data to.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierOptions.Equals(NationalInstruments.Vision.Analysis.ColorClassifierOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorClassifierOptions.
            </summary>
            <param name="other">
            A ColorClassifierOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorClassifierOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ColorClassifierOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorClassifierOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorClassifierOptions.UseLuminance">
            <summary>
            Gets or sets whether to use the luminance band in the feature vector.
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorClassifierOptions.ColorClassifierResolution">
            <summary>
            Gets or sets the color resolution to use.
            </summary>
            <value>
            The default is High.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions">
            <summary>
            Configures the Texture Defect Classifier options for the classifier session.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.#ctor">
            <summary>
            Initializes a new instance of a TextureDefectClassifierOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.SetData">
            <summary>
            Sets this options structure to the session. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.CopyTo(NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions)">
            <summary>
            Copies the data from this class to another class.
            </summary>
            <param name="options">
            The TextureDefectClassifierOptions to copy data to.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.Equals(NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified TextureDefectClassifierOptions.
            </summary>
            <param name="other">
            A TextureDefectClassifierOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified TextureDefectClassifierOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of TextureDefectClassifierOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.Window_Options">
            <summary>
            Gets or sets the Window Options.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.Wavelet_Options">
            <summary>
            Gets or sets the Wavelet Options Options.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.BandsUsed">
            <summary>
            Gets or sets an array that describes the number of wavelet bands used.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.TextureDefectClassifierOptions.Cooccurrence_Options">
            <summary>
            Gets or sets an array the Cooccurence Options.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LineProfileReport">
            <summary>
            Provides information about a line.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineProfileReport.#ctor">
            <summary>
            Initializes a new instance of the LineProfileReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineProfileReport.Equals(NationalInstruments.Vision.Analysis.LineProfileReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineProfileReport.
            </summary>
            <param name="other">
            A LineProfileReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineProfileReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineProfileReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LineProfileReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineProfileReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineProfileReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineProfileReport.StandardDeviation">
            <summary>
            Gets or sets the standard deviation of the line profile. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineProfileReport.Mean">
            <summary>
            Gets or sets the mean value of the pixels in the line profile. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineProfileReport.PixelRange">
            <summary>
            Gets or sets the smallest and largest pixel values in the line profile. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineProfileReport.BoundingBox">
            <summary>
            Gets or sets the bounding rectangle of the line. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineProfileReport.ProfileData">
            <summary>
            Gets or sets a collection containing the value of each pixel in the line. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.Kernel">
            <summary>
            Represents image processing kernel data and properties that you can configure on a per kernel basis.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates and returns a Kernel object.
            </summary>
            <remarks>
            </remarks>
            <param name="width">The width of the kernel matrix.
            </param>
            <param name="height">The height of the kernel matrix.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>Creates and returns a Kernel object.
            </summary>
            <param name="width">The width of the kernel matrix.
            </param>
            <param name="height">The height of the kernel matrix.
            </param>
            <param name="entries"> The entries of the kernel.  This array must be width*height entries long.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.#ctor(NationalInstruments.Vision.Analysis.KernelFamily,System.Int32,System.Int32)">
            <summary>
            Creates and returns a Kernel object.
            </summary>
            <remarks>
            </remarks>
            <param name="family"> The family of kernel to load.
            </param>
            <param name="size">The size of kernel to load.
            </param>
            <param name="number">The number of kernel to load.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.Load(NationalInstruments.Vision.Analysis.KernelFamily,System.Int32,System.Int32)">
            <summary>
            Loads a predefined matrix into the Kernel object.
            </summary>
            <param name="family"> The family of kernel to load.
            </param>
            <param name="size">The size of kernel to load.
            </param>
            <param name="number">The number of kernel to load.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the width and height of the kernel matrix simultaneously.
            </summary>
            <param name="width">The new width of the kernel.
            </param>
            <param name="height">The new height of the kernel.
            </param>
            <remarks>
            This is a destructive operation. After setting the size, all elements of the kernel will have the value 0.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.GetEntry(System.Int32,System.Int32)">
            <summary>
            Gets the kernel entry at a particular location.
            </summary>
            <param name="row">
             The row at which to get the entry.
            </param>
            <param name="column">The column at which to get the entry.
            </param>
            <returns>
            The kernel entry at that location.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.SetEntry(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets a kernel entry at a particular location.
            </summary>
            <param name="row"> The row at which to set the entry.
            </param>
            <param name="column"> The column at which to set the entry.
            </param>
            <param name="value"> The new kernel entry.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.Equals(NationalInstruments.Vision.Analysis.Kernel)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified Kernel.
            </summary>
            <param name="other">
            A Kernel instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified Kernel.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of Kernel and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Kernel.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Kernel.Height">
            <summary>
            Gets the height of the kernel matrix.
            </summary>
            <value>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Kernel.Width">
            <summary>
            Gets the width of the kernel matrix.
            </summary>
            <value>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Kernel.Divider">
            <summary>
            Gets or sets the normalization factor applied to the sum of the obtained products. 
            </summary>
            <value>
            </value>
            <remarks>
            Under normal conditions, the divider is the sum of all matrix element values.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.StructuringElement">
            <summary>
            Describes the structuring element applied to the image. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.#ctor">
            <summary>
            Initializes a new instance of the StructuringElement class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the StructuringElement class.
            </summary>
            <param name="width">
            The width of the structuring element.
            </param>
            <param name="height">
            The height of the structuring element.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the StructuringElement class.
            </summary>
            <param name="width">
            The width of the structuring element.
            </param>
            <param name="height">
            The height of the structuring element.
            </param>
            <param name="entries">
            The entries of the structuring element. This array must be <format type="italics">width</format>*<format type="italics">height</format> entries long. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.#ctor(NationalInstruments.Vision.Analysis.KernelFamily,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the StructuringElement class.
            </summary>
            <param name="family">
            The family of structuring element to load.
            </param>
            <param name="size">
            The size of structuring element to load.
            </param>
            <param name="number">
            The number of kernel to load.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.Load(NationalInstruments.Vision.Analysis.KernelFamily,System.Int32,System.Int32)">
            <summary>
            Loads a predefined matrix into the Kernel object.
            </summary>
            <param name="family"> The family of kernel to load.
            </param>
            <param name="size">The size of kernel to load.
            </param>
            <param name="number">The number of kernel to load.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.GetEntry(System.Int32,System.Int32)">
            <summary>
            Gets the structuring element entry at a particular location.
            </summary>
            <param name="row">
            The row at which to get the entry.
            </param>
            <param name="column">
            The column at which to get the entry.
            </param>
            <returns>
            The structuring element entry at that location.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.SetEntry(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a structuring element entry at a particular location.
            </summary>
            <param name="row"> The row at which to set the entry.
            </param>
            <param name="column"> The column at which to set the entry.
            </param>
            <param name="value"> The new structuring element entry.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the width and height of the structuring element simultaneously. 
            </summary>
            <param name="width">
            The new width of the structuring element.
            </param>
            <param name="height">
            The new height of the structuring element.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.Equals(NationalInstruments.Vision.Analysis.StructuringElement)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified StructuringElement.
            </summary>
            <param name="other">
            A StructuringElement instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified StructuringElement.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of StructuringElement and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StructuringElement.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StructuringElement.Height">
            <summary>
            Gets the height of the structuring element.
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StructuringElement.Width">
            <summary>
            Gets the width of the structuring element.
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StructuringElement.Shape">
            <summary>
            Gets or sets the shape of the structuring element.
            </summary>
            <value>
            The default is Square.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.BarcodeReport">
            <summary>
            Provides parameters that specify the results of reading a barcode.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BarcodeReport.#ctor">
            <summary>Initializes a new instance of the BarcodeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BarcodeReport.Equals(NationalInstruments.Vision.Analysis.BarcodeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified BarcodeReport.
            </summary>
            <param name="other">
            A BarcodeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BarcodeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">
            An object to compare to this instance. </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of BarcodeReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BarcodeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BarcodeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.BarcodeReport.BarcodeType">
            <summary>
            Gets or sets the type of barcode.
            </summary>
            <value>The default value is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.BarcodeReport.ConfidenceLevel">
            <summary>
            Gets or sets the quality measure of the decoded barcode ranging from 1 to 1000, where 1000 is the best.
            </summary>
            <value>The default value is 0.0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.BarcodeReport.OutputChar2">
            <summary>
            Gets or sets the contents of this character depending on the barcode type.
            </summary>
            <value>The default value is '\0'.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.BarcodeReport.OutputChar1">
            <summary>
            Gets or sets the contents of this character depending on the barcode type.
            </summary>
            <value>The default value is '\0'.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.BarcodeReport.Text">
            <summary>
            Gets or sets the string containing the decoded barcode data.
            </summary>
            <value>The default value is <see langword="null"/>. 
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixAdvancedOptions">
            <summary>
            Provides advanced options for reading a barcode.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.Pdf417Report">
            <summary>
            Provides information about a PDF417 barcode.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Pdf417Report.#ctor">
            <summary>
            Initializes a new instance of the Pdf417Report class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Pdf417Report.GetBinaryData">
            <summary>
            Gets the binary data containing the raw Pdf417 barcode data.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Pdf417Report.SetBinaryData(System.Byte[])">
            <summary>
            Sets the binary data containing the raw Pdf417 barcode data.
            </summary>
            <param name="binaryData">
            The binary data to set.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Pdf417Report.Equals(NationalInstruments.Vision.Analysis.Pdf417Report)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified Pdf417Report.
            </summary>
            <param name="other">
            A Pdf417Report instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Pdf417Report.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified Pdf417Report.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of Pdf417Report
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Pdf417Report.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Pdf417Report.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Pdf417Report.Columns">
            <summary>
            Gets or sets the number of columns in the barcode.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Pdf417Report.Rows">
            <summary>
            Gets or sets the number of rows in the barcode.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Pdf417Report.ErasuresCorrected">
            <summary>
            Gets or sets the number of erasures the method corrected when decoding the barcode.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Pdf417Report.ErrorsCorrected">
            <summary>
            Gets or sets the number of errors the method corrected when decoding the barcode.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Pdf417Report.Corners">
            <summary>
            Gets the coordinates of the corners of the rectangle surrounding the barcode.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Pdf417Report.StringData">
            <summary>
            Gets or sets the string containing the decoded barcode data.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Pdf417Report.Binary">
            <summary>
            Gets or sets whether the data in the barcode is binary. If <see langword="true"/>, the 
            data in the barcode is binary. If <see langword="false"/>, the data in the barcode is ASCII text.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRDescriptionOptions">
            <summary>
            Specifies the description options the method uses when searching for the QR code in the image. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.#ctor">
            <summary>
            Initializes a new instance of the QRDescriptionOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.#ctor(NationalInstruments.Vision.Analysis.QRDimension)">
            <summary>
            Initializes a new instance of the QRDescriptionOptions class.
            </summary>
            <param name="dimension">
            The number of rows and columns that are populated for the QR code, measured in cells. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.#ctor(NationalInstruments.Vision.Analysis.QRDimension,NationalInstruments.Vision.Analysis.QRPolarity)">
            <summary>
            Initializes a new instance of the QRDescriptionOptions class.
            </summary>
            <param name="dimension">
            The number of rows and columns that are populated for the QR code, measured in cells. 
            </param>
            <param name="polarity">
            The data-to-background contrast for the QR code.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.#ctor(NationalInstruments.Vision.Analysis.QRDimension,NationalInstruments.Vision.Analysis.QRPolarity,NationalInstruments.Vision.Analysis.QRMirrorMode)">
            <summary>
            Initializes a new instance of the QRDescriptionOptions class.
            </summary>
            <param name="dimension">
            The number of rows and columns that are populated for the QR code, measured in cells. 
            </param>
            <param name="polarity">
            The data-to-background contrast for the QR code.
            </param>
            <param name="mirror">
            Specifies if the QR code appears mirrored in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.#ctor(NationalInstruments.Vision.Analysis.QRDimension,NationalInstruments.Vision.Analysis.QRPolarity,NationalInstruments.Vision.Analysis.QRMirrorMode,NationalInstruments.Vision.Analysis.QRModelType)">
            <summary>
            Initializes a new instance of the QRDescriptionOptions class.
            </summary>
            <param name="dimension">
            The number of rows and columns that are populated for the QR code, measured in cells. 
            </param>
            <param name="polarity">
            The data-to-background contrast for the QR code.
            </param>
            <param name="mirror">
            Specifies if the QR code appears mirrored in the image.
            </param>
            <param name="modelType">
            The type of QR code. Micro QR codes have only one target in the top left. Model 1 codes have alignment "dashes" along the bottom and right side of the symbol. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.Equals(NationalInstruments.Vision.Analysis.QRDescriptionOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRDescriptionOptions.
            </summary>
            <param name="other">
            A QRDescriptionOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRDescriptionOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of QRDescriptionOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDescriptionOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRDescriptionOptions.ModelType">
            <summary>
            Gets or sets the type of QR code. Micro QR codes have only one target in the top left. 
            Model 1 QR codes have alignment dashes along the bottom and right side of the code. Most 
            QR codes are Model 2. 
            </summary>
            <value>
            The default is AutoDetect.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRDescriptionOptions.MirrorMode">
            <summary>
            Gets or sets whether the QR code appears mirrored in the image.</summary>
            <value>
            The default is AutoDetect.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRDescriptionOptions.Polarity">
            <summary>
            Gets or sets the data-to-background contrast for the QR code.
            </summary>
            <value>
            The default is AutoDetect.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRDescriptionOptions.Dimensions">
            <summary>
            Gets or sets the number of rows and columns that are populated for the QR code, measured in cells. 
            </summary>
            <value>
            The default is AutoDetect.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRSizeOptions">
            <summary>
            Contains the size options the method uses when searching for a QR code in the image. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSizeOptions.#ctor">
            <summary>
            Initializes a new instance of the QRSizeOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSizeOptions.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the QRSizeOptions class.
            </summary>
            <param name="minimumSize">
            Specifies the minimum size (in pixels) of the cells in a QR code. The default is 3.
            </param>
            <param name="maximumSize">
            Specifies the maximum size (in pixels) of the cells in a QR code. The default is 7.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSizeOptions.Equals(NationalInstruments.Vision.Analysis.QRSizeOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRSizeOptions.
            </summary>
            <param name="other">
            A QRSizeOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSizeOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRSizeOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of QRSizeOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSizeOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSizeOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSizeOptions.MaximumSize">
            <summary>
            Gets or sets the maximum size (in pixels) of the cells in a QR code.
            </summary>
            <value>
            The default is 7.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSizeOptions.MinimumSize">
            <summary>
            Gets or sets the minimum size (in pixels) of the cells in a QR code.
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRSearchOptions">
            <summary>
            Specifies the search options the method uses when searching for the QR code in the image. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.#ctor">
            <summary>
            Initializes a new instance of the QRSearchOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.#ctor(NationalInstruments.Vision.Analysis.QRRotationMode)">
            <summary>
            Initializes a new instance of the QRSearchOptions class.
            </summary>
            <param name="rotationMode">
            Specifies the amount of QR code rotation the function should allow for.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.#ctor(NationalInstruments.Vision.Analysis.QRRotationMode,NationalInstruments.Vision.Analysis.QRDemodulationMode)">
            <summary>
            Initializes a new instance of the QRSearchOptions class.
            </summary>
            <param name="rotationMode">
            Specifies the amount of QR code rotation the function should allow for.
            </param>
            <param name="demodulationMode">
            Specifies the mode the method should use to demodulate (determine which cells are on 
            and which cells are off) the QR code. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.#ctor(NationalInstruments.Vision.Analysis.QRRotationMode,NationalInstruments.Vision.Analysis.QRDemodulationMode,NationalInstruments.Vision.Analysis.QRCellSampleSize)">
            <summary>
            Initializes a new instance of the QRSearchOptions class.
            </summary>
            <param name="rotationMode">
            Specifies the amount of QR code rotation the method should allow for.
            </param>
            <param name="demodulationMode">
            Specifies the mode the method should use to demodulate (determine which cells are on 
            and which cells are off) the QR code. 
            </param>
            <param name="cellSampleSize">
            Specifies the sample size, in pixels, the method should take to determine if each cell is on or off.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.#ctor(NationalInstruments.Vision.Analysis.QRRotationMode,NationalInstruments.Vision.Analysis.QRDemodulationMode,NationalInstruments.Vision.Analysis.QRCellSampleSize,NationalInstruments.Vision.Analysis.QRCellFilterMode)">
            <summary>
            Initializes a new instance of the QRSearchOptions class.
            </summary>
            <param name="rotationMode">
            Specifies the amount of QR code rotation the method should allow for.
            </param>
            <param name="demodulationMode">
            Specifies the mode the method should use to demodulate (determine which cells are on 
            and which cells are off) the QR code. 
            </param>
            <param name="cellSampleSize">
            Specifies the sample size, in pixels, the method should take to determine if each cell is on or off.
            </param>
            <param name="cellFilterMode">
            Specifies the mode the method uses to determine the pixel value for each cell.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.Equals(NationalInstruments.Vision.Analysis.QRSearchOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRSearchOptions.
            </summary>
            <param name="other">
            A QRSearchOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRSearchOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of QRSearchOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRSearchOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSearchOptions.SkewDegreesAllowed">
            <summary>
            Gets or sets the amount, in degrees, of skew in the QR code the method should allow for.
            </summary>
            <value>
            The default is 5.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSearchOptions.CellFilterMode">
            <summary>
            Gets or sets the mode the method uses to determine the pixel value for each cell.
            </summary>
            <value>
             The default value is AutoDetect.
            </value>
            <remarks>
            If CellSampleSize is Size1x1, the value of the single sampled pixel always determines 
            the pixel value for the cell and the method ignores this property.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSearchOptions.CellSampleSize">
            <summary>
            Gets or sets the sample size, in pixels, the method should take to determine if each cell is on or off.
            </summary>
            <value>
            The default is AutoDetect.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSearchOptions.DemodulationMode">
            <summary>
            Gets or sets the mode the method should use to demodulate (determine which cells are on and which cells are off) the QR code. 
            </summary>
            <value>
            The default is AutoDetect.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSearchOptions.EdgeThreshold">
            <summary>
            Gets or sets the minimum contrast a pixel must have in order to be considered part of a QR code cell edge.
            </summary>
            <value>
            The default 
            value is 30.
            </value>
            <remarks>
            The lower this value, the more potential edge candidates the method will examine during the location phase. 
            Setting this value too low will decrease the performance of the method because the method will examine too 
            many potential edge candidates. Setting this value too high may also decrease the performance of the method 
            by removing valid edge candidates, making location require more iterations. Setting this value too high may 
            also cause the method to fail to identify the QR code because all edge candidates are eliminated.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSearchOptions.SkipLocation">
            <summary>
            Gets or sets if the method should locate the code. If <see langword="true"/>, specifies that the 
            method should assume that the QR code occupies the entire image (or the entire 
            search region). The method then skips the location phase, moving immediately to 
            extraction and decoding. If <see langword="false"/>, the method does not make any assumptions about 
            the percentage of the image occupied by the QR code.
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRSearchOptions.RotationMode">
            <summary>
            Gets or sets the amount of QR code rotation the method should allow for.
            </summary>
            <value>
            The default is Unlimited.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRDataToken">
            <summary>
            Contains contains the data tokenized in exactly the way it was encoded in the QR code. This is useful if the symbol is encoded using multiple languages. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDataToken.#ctor">
            <summary>
            Initializes a new instance of the QRDataToken class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDataToken.GetData">
            <summary>
            Gets the encoded data in the QR code.
            </summary>
            <returns>
            The data encoded in the QR code.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDataToken.SetData(System.Byte[])">
            <summary>
            Sets the encoded data in the QR code.
            </summary>
            <param name="data">
            The encoded data in the QR code.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDataToken.Equals(NationalInstruments.Vision.Analysis.QRDataToken)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRDataToken.
            </summary>
            <param name="other">
            A QRDataToken instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDataToken.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRDataToken.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of QRDataToken
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDataToken.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRDataToken.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRDataToken.ModeData">
            <summary>
            Gets or sets specifiers used by the user to postprocess the data if it requires it. 
            Typically this represents size, but sometimes represents the language for ECI Stream Mode, and 
            Application ID for EAN-128 codes. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRDataToken.Mode">
            <summary>
            Gets or sets the stream mode or the format of the data that is encoded in the QR code. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QRReport">
            <summary>
            Describes the QR code that the method read. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRReport.#ctor">
            <summary>
            Initializes a new instance of the QRReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRReport.GetData">
            <summary>
            Gets the raw data encoded in the QR code.
            </summary>
            <returns>
            The raw data encoded in the QR code.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRReport.SetData(System.Byte[])">
            <summary>
            Sets the raw data encoded in the QR code.
            </summary>
            <param name="data">
            The raw data encoded in the QR code.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRReport.Equals(NationalInstruments.Vision.Analysis.QRReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRReport.
            </summary>
            <param name="other">
            A QRReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QRReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of QRReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QRReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.CellFilterMode">
            <summary>
            Gets or sets the cell filter mode the method used to locate the QR code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.CellSampleSize">
            <summary>
            Gets or sets the cell sample size the method used to locate the QR code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.DemodulationMode">
            <summary>
            Gets or sets the demodulation mode the function used to locate the QR code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.MinimumEdgeStrength">
            <summary>
            Gets or sets the strength of the weakest edge the method used to find the coarse location of the QR code in the image.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.AppendStreamIdentifier">
            <summary>
            Gets or sets what stream the QR code is in relation to when the code is part of a larger array of codes. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.FirstEciDesignator">
            <summary>
            Gets or sets the first alternate language designator for ECI codes.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.FirstEan128ApplicationId">
            <summary>
            Gets or sets the first application ID for EAN-128 codes.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.AppendStreamSize">
            <summary>
            Gets or sets how many QR codes are part of a larger array of codes. 
            Sometimes a QR code is part of a larger array of codes. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.AppendStreamPosition">
            <summary>
            Gets or sets what position the QR code is in with respect to the stream of data in all codes. 
            It is possible for a QR code to be part of a larger array of codes. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.Mirrored">
            <summary>
            Gets or sets whether the QR code appears mirrored in the image. If <see langword="true"/>, 
            the QR code appears mirrored in the image. If <see langword="false"/>, the QR code appears 
            normally in the image.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.MatrixPolarity">
            <summary>
            Gets or sets the polarity of the QR code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.StreamMode">
            <summary>
            Gets or sets the format of the data encoded in the stream. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.ModelType">
            <summary>
            Gets or sets the type of the QR code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.Version">
            <summary>
            Gets or sets the version of the QR code. The version indicates how much information can be 
            encoded and how much redundancy is included inside the code. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.Dimensions">
            <summary>
            Gets or sets the number of rows and columns that are populated for the QR code, measured in cells. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.ErrorsCorrected">
            <summary>
            Gets or sets the number of errors the function corrected when decoding the QR code. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.TokenizedData">
            <summary>
            Gets or sets the data tokenized in exactly the way it was encoded in the code. 
            This is useful if the code is encoded using multiple languages. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.Corners">
            <summary>
            Gets or sets the coordinates of the corners of the rectangle surrounding the QR code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QRReport.Found">
            <summary>
            Gets or sets whether the method located and decoded a QR code. If <see langword="true"/>, 
            the method located and decoded a QR code. If <see langword="false"/>, the method failed to 
            locate and decode a QR code.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions">
            <summary>
            Specifies the description options the function uses when searching for the Data Matrix barcode in the image. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.#ctor">
            <summary>
            Initializes a new instance of the DataMatrixDescriptionOptions class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DataMatrixDescriptionOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="rows">The number of rows in the Data Matrix barcode.
            </param>
            <param name="columns">The number of columns in the Data Matrix barcode.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.Equals(NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DataMatrixDescriptionOptions.
            </summary>
            <param name="other">
            A DataMatrixDescriptionOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DataMatrixDescriptionOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DataMatrixDescriptionOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.MirrorMode">
            <summary>
            Gets or sets whether the Data Matrix barcode appears normally in the image or if the barcode appears mirrored in the image.
            </summary>
            <value>
            The default is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixMirrorMode.AutoDetect" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixMirrorMode.AutoDetect" crefType="Unqualified"/>—The method should determine if the Data Matrix barcode is mirrored.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixMirrorMode.Mirrored" crefType="Unqualified"/>—The method should expect the Data Matrix barcode to appear mirrored.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixMirrorMode.Normal" crefType="Unqualified"/>-The method should expect the Data Matrix barcode to appear normal.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.MinimumBorderIntegrity">
            <summary>
            Gets or sets the minimum percentage of the border (locator pattern and timing pattern) the method should expect in the Data Matrix barcode.
            </summary>
            <value>
            The default is 80.0.
            </value>
            <remarks>
            During the location phase, the method will ignore possible Data Matrix barcode candidates that do not have at least this level of border integrity.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.CellFill">
            <summary>
            Gets or sets the fill percentage for a cell of the Data Matrix barcode that is in the "on" state.
            </summary>
            <value>
            The default is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode.AutoDetect" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode.AutoDetect" crefType="Unqualified"/>—The method determines the Data Matrix barcode cell fill percentage automatically.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode.Low" crefType="Unqualified"/>—The method reads Data Matrix barcodes with a cell fill percentage of less than 30 percent.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode.Normal" crefType="Unqualified"/>—The method reads Data Matrix barcodes with a cell fill percentage greater than or equal to 30 percent.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.Polarity">
            <summary>
            Gets or sets the data-to-background contrast for the Data Matrix barcode.
            </summary>
            <value>
            The default is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixPolarity.AutoDetect" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixPolarity.AutoDetect" crefType="Unqualified"/>—The method should determine the polarity of the Data Matrix barcode.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixPolarity.BlackDataOnWhiteBackground" crefType="Unqualified"/>-The method should search for a Data Matrix barcode with dark data on a bright background.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixPolarity.WhiteDataOnBlackBackground" crefType="Unqualified"/>—The method should search for a Data Matrix barcode with bright data on a dark background.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.Ecc">
            <summary>
            Gets or sets the ECC used for this Data Matrix barcode.
            </summary>
            <value>
            The default is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.AutoDetect" crefType="PartiallyQualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc000" crefType="PartiallyQualified"/>—Sets the method to read Data Matrix barcodes of ECC 000 only. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc000To140" crefType="PartiallyQualified"/>-Sets the method to read Data Matrix barcodes of ECC 000, ECC 050, ECC 080, ECC 100, and ECC 140 only. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc050" crefType="PartiallyQualified"/>-Sets the method to read Data Matrix barcodes of ECC 050 only. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc080" crefType="PartiallyQualified"/>-Sets the method to read Data Matrix barcodes of ECC 080 only. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc100" crefType="PartiallyQualified"/>—Sets the method to read Data Matrix barcodes of ECC 100 only. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc140" crefType="PartiallyQualified"/>-Sets the method to read Data Matrix barcodes of ECC 140 only. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc200" crefType="PartiallyQualified"/>-Sets the method to read Data Matrix barcodes of ECC 200 only. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.AutoDetect" crefType="PartiallyQualified"/>—The method determines the barcode ECC automatically. 
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.Rectangle">
            <summary>
            Gets or sets whether the Data Matrix barcode is rectangular.
            </summary>
            <value>
            If this element is <see langword="true"/>, the method will look for Data Matrix barcodes of all shapes.  If this element is <see langword="false"/>, the method will only look for 
            Data Matrix barcodes that are square. The default is <see langword="false"/>.
            </value>
            <remarks>
            If both Rows and Columns are non-zero, the method will ignore this property.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.Columns">
            <summary>
            Gets or sets the number of columns in the Data Matrix barcode.
            </summary>
            <value>
            The default is 0, which specifies that the method should determine the number of columns.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.Rows">
            <summary>
            Gets or sets the number of rows in the Data Matrix barcode.
            </summary>
            <value>
            The default is 0, which specifies that the method should determine the number of rows.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixDescriptionOptions.AspectRatio">
            <summary>
            Gets or sets the ratio of the width of a Data Matrix barcode cell (in pixels) divided by the height of a Data Matrix barcode cell (in pixels).
            </summary>
            <value>
            The default is 0.0, which specifies that the method should determine the aspect ratio.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions">
            <summary>
            Provides the size options the method uses when searching for a Data Matrix barcode in the image. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.#ctor">
            <summary>
            Initializes a new instance of the DataMatrixSizeOptions class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DataMatrixSizeOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="minimumSize">The minimum size in pixels of the Data Matrix barcode in the image. 
            </param>
            <param name="maximumSize">The maximum size in pixels of the Data Matrix barcode in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the DataMatrixSizeOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="minimumSize">The minimum size in pixels of the Data Matrix barcode in the image. 
            </param>
            <param name="maximumSize">The maximum size in pixels of the Data Matrix barcode in the image.
            </param>
            <param name="quietZoneWidth">The expected minimum size of the quiet zone, in pixels. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.Equals(NationalInstruments.Vision.Analysis.DataMatrixSizeOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DataMatrixSizeOptions.
            </summary>
            <param name="other">
            A DataMatrixSizeOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DataMatrixSizeOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DataMatrixSizeOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.QuietZoneWidth">
            <summary>
            Gets or sets the expected minimum size of the quiet zone, in pixels. 
            </summary>
            <value>
            The default value is 10.
            </value>
            <remarks>
            The function ignores Data Matrix barcode candidates that have quiet zones smaller than this value. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.MaximumSize">
            <summary>
            Gets or sets the maximum size in pixels of the Data Matrix barcode in the image.
            </summary>
            <value>
            The default is 0.
            </value>
            <remarks>
            The default is 0, which specifies that the method should never exclude a Data Matrix barcode candidate because it is too large.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSizeOptions.MinimumSize">
            <summary>
            Gets or sets the minimum size in pixels of the Data Matrix barcode in the image. 
            </summary>
            <value>
            The default is 0.
            </value>
            <remarks>
            The default is 0, which specifies that the method should never exclude a Data Matrix barcode candidate because it is too small.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions">
            <summary>
            Provides the search options the method uses when searching for the Data Matrix barcode in the image. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.#ctor">
            <summary>
            Initializes a new instance of the DataMatrixSearchOptions class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.#ctor(NationalInstruments.Vision.Analysis.DataMatrixRotationMode)">
            <summary>
            Initializes a new instance of the DataMatrixSearchOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="rotationMode">The amount of Data Matrix barcode rotation the function should allow for.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.#ctor(NationalInstruments.Vision.Analysis.DataMatrixRotationMode,NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode)">
            <summary>
            Initializes a new instance of the DataMatrixSearchOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="rotationMode">The amount of Data Matrix barcode rotation the function should allow for.
            </param>
            <param name="demodulationMode">The mode the method should use to demodulate (determine which cells are on and which cells are off) the Data Matrix barcode. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.#ctor(NationalInstruments.Vision.Analysis.DataMatrixRotationMode,NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode,NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize)">
            <summary>
            Initializes a new instance of the DataMatrixSearchOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="rotationMode">The amount of Data Matrix barcode rotation the function should allow for.
            </param>
            <param name="demodulationMode">The mode the method should use to demodulate (determine which cells are on and which cells are off) the Data Matrix barcode. 
            </param>
            <param name="cellSampleSize">The sample size, in pixels, the method should take to determine if each cell is on or off.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.#ctor(NationalInstruments.Vision.Analysis.DataMatrixRotationMode,NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode,NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize,NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode)">
            <summary>
            Initializes a new instance of the DataMatrixSearchOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="rotationMode">The amount of Data Matrix barcode rotation the function should allow for.
            </param>
            <param name="demodulationMode">The mode the method should use to demodulate (determine which cells are on and which cells are off) the Data Matrix barcode. 
            </param>
            <param name="cellSampleSize">The sample size, in pixels, the method should take to determine if each cell is on or off.
            </param>
            <param name="cellFilterMode">The the mode the method uses to determine the pixel value for each cell.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.Equals(NationalInstruments.Vision.Analysis.DataMatrixSearchOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DataMatrixSearchOptions.
            </summary>
            <param name="other">
            A DataMatrixSearchOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DataMatrixSearchOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DataMatrixSearchOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.InitialSearchVectorWidth">
            <summary>
            Gets or sets the number of pixels the method should average together to determine the location of an edge.
            </summary>
            <value>
            The default value is 5.
            </value>
            <remarks>
            You may need to increase this value when the Data Matrix barcode has cells with a low fill percentage. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.MaximumIterations">
            <summary>
            Gets or sets the maximum number of iterations before the method stops looking for the Data Matrix barcode.
            </summary>
            <value>
            The default value is 500.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.SkewDegreesAllowed">
            <summary>
            Gets or sets the amount of skew in the Data Matrix barcode that the method should allow for.
            </summary>
            <value>
            The default value is 5.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.CellFilterMode">
            <summary>
            Gets or sets the the mode the method uses to determine the pixel value for each cell.
            </summary>
            <value>
            The default value is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.AutoDetect" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.All" crefType="Unqualified"/>—The method tries each filter mode, starting with cwimaqDataMatrixCellFilterModeAverage and ending with cwimaqDataMatrixCellFilterModeVeryLowAverage, stopping once a filter mode decodes correctly.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.AutoDetect" crefType="Unqualified"/>—The method will try all filter modes and uses the one that decodes the Data Matrix barcode within the fewest iterations and utilizing the least amount of error correction. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.Average" crefType="Unqualified"/>—The method sets the pixel value for the cell to the average of the sampled pixels. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.CentralAverage" crefType="Unqualified"/>—The method sets the pixel value for the cell to the average of the pixels in the center of the cell sample. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.HighAverage" crefType="Unqualified"/>—The method sets the pixel value for the cell to the average value of the half of the sampled pixels with the highest pixel values. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.LowAverage" crefType="Unqualified"/>—The method sets the pixel value for the cell to the average value of the half of the sampled pixels with the lowest pixel values.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.Median" crefType="Unqualified"/>—The method sets the pixel value for the cell to the median of the sampled pixels. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.VeryHighAverage" crefType="Unqualified"/>—The method sets the pixel value for the cell to the average value of the ninth of the sampled pixels with the highest pixel values.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.VeryLowAverage" crefType="Unqualified"/>—The method sets the pixel value for the cell to the average value of the ninth of the sampled pixels with the lowest pixel values.
            </description>
            		</item>
            	</list>
            	<note type="note">
            If CellSampleSize is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size1x1" crefType="Unqualified"/>, the value of the single sampled pixel always determines the pixel value for the cell and the method ignores this property. 
            </note>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.CellSampleSize">
            <summary>
            Gets or sets the sample size, in pixels, the method should take to determine if each cell is on or off.
            </summary>
            <value>
            The default value is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.AutoDetect" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size1x1" crefType="Unqualified"/>—The method will use a 1×1 sized sample from each cell.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size2x2" crefType="Unqualified"/>—The method will use a 2×2 sized sample from each cell.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size3x3" crefType="Unqualified"/>—The method will use a 3×3 sized sample from each cell.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size4x4" crefType="Unqualified"/>—The method will use a 4×4 sized sample from each cell.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size5x5" crefType="Unqualified"/>—The method will use a 5×5 sized sample from each cell.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size6x6" crefType="Unqualified"/>—The method will use a 6×6 sized sample from each cell.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.Size7x7" crefType="Unqualified"/>—The method will use a 7×7 sized sample from each cell.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.AutoDetect" crefType="Unqualified"/>—The method will try each sample size and use the one which decodes the Data Matrix barcode within the fewest iterations and utilizing the least amount of error correction. 
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.DemodulationMode">
            <summary>
            Gets or sets the mode the method should use to demodulate (determine which cells are on and which cells are off) the Data Matrix barcode. 
            </summary>
            <value>
            The default value is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.AutoDetect" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.All" crefType="Unqualified"/>—The method tries DataMatrixDemodulationModeHistogram, then DataMatrixDemodulationModeLocalContrast and then DataMatrixDemodulationModeCombined, stopping once one mode is successful.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.AutoDetect" crefType="Unqualified"/>—The method will try each demodulation mode and use the one which decodes the Data Matrix barcode within the fewest iterations and utilizing the least amount of error correction. 
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.Combined" crefType="Unqualified"/>—The method uses the histogram of the Data Matrix barcode to calculate a threshold. For cells with pixel values that are sufficiently below or above this threshold, the method will use the threshold to determine if the cell is on or off. If the cell pixel values are close to the threshold, the method will use the DataMatrixDemodulationModeLocalContrast mode to determine if the cell is on or off. This mode is slower, but works with images that contain a Data Matrix barcode with extremely low cell fill percentages or gross print growth errors.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.Histogram" crefType="Unqualified"/>—The method uses a histogram of all of the Data Matrix cells to calculate a threshold. This threshold determines if a cell is on or off. This is the fastest mode, but requires images with consistent levels of contrast.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.LocalContrast" crefType="Unqualified"/>—The method examines each of the cell's neighbors to determine if the cell is on or off. This mode is slower, but works with images that have inconsistent levels of contrast. 
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.EdgeThreshold">
            <summary>
            Gets or sets the minimum contrast a pixel must have in order to be considered part of a Data Matrix barcode cell edge.
            </summary>
            <value>
            The default value is 30.
            </value>
            <remarks>
            The lower this value, the more potential edge candidates the method will examine during the location phase. Setting this value too low will decrease the performance of the method because the method will examine too many potential edge candidates. Setting this value too high may also decrease the performance of the method by removing valid edge candidates, making location require more iterations. Setting this value too high may also cause the method to fail to identify the Data Matrix barcode because all edge candidates are eliminated. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.SkipLocation">
            <summary>
            Gets or sets whether the method should locate the barcode.
            </summary>
            <value>
            The default value is <see langword="false"/>.
            </value>
            <remarks>
            If <see langword="true"/>, specifies that the method should assume that the Data Matrix barcode occupies the entire image (or the entire search region). The method then skips the location phase, moving immediately to extraction and decoding. If <see langword="false"/>, the method does not make any assumptions about the percentage of the image occupied by the Data Matrix barcode. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.RotationMode">
            <summary>
            Gets or sets the amount of Data Matrix barcode rotation the function should allow for.
            </summary>
            <value>
            The default value is <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Unlimited" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Degrees0" crefType="Unqualified"/>—The method allows for ± 5 degrees of rotation.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Degrees180" crefType="Unqualified"/>—The method allows for between 175 and 185 degrees of rotation.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Degrees270" crefType="Unqualified"/>—The method allows for between 265 and 275 degrees of rotation.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Degrees90" crefType="Unqualified"/>—The method allows for between 85 and 95 degrees of rotation.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.DataMatrixRotationMode.Unlimited" crefType="Unqualified"/>—The method allows for unlimited rotation.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DataMatrixReport">
            <summary>
            Provides parameters that describe the results of  reading the data matrix barcode. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixReport.#ctor">
            <summary>
            Initializes a new instance of the DataMatrixReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixReport.GetBinaryData">
            <summary>
            Gets the binary data containing the raw Data Matrix barcode data.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixReport.SetBinaryData(System.Byte[])">
            <summary>
            Sets the binary data containing the raw Data Matrix barcode data.
            </summary>
            <param name="binaryData">
            The binary data to set.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixReport.Equals(NationalInstruments.Vision.Analysis.DataMatrixReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DataMatrixReport.
            </summary>
            <param name="other">
            A DataMatrixReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DataMatrixReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DataMatrixReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DataMatrixReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Iterations">
            <summary>
            Gets or sets the number of iterations the method took in attempting to locate the Data Matrix barcode.
            </summary>
            <value>
            </value>
            <remarks>
            If this number is equal to the <see cref="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.MaximumIterations" crefType="Unqualified"/> 
            property of the DataMatrixSearchOptions input parameter and the method failed to locate the Data Matrix barcode, 
            you may be able to locate the Data Matrix barcode by increasing <see cref="P:NationalInstruments.Vision.Analysis.DataMatrixSearchOptions.MaximumIterations" crefType="Unqualified"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.CellFilterMode">
            <summary>
            Gets or sets the cell filter mode the method used to locate the Data Matrix barcode.
            </summary>
            <value>
            </value>
            <remarks>
            	<para>If CellFill is set to <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFilterMode.AutoDetect" crefType="Unqualified"/> for the 
            <paramref name="DataMatrixSearchOptions"/>
            parameter, this property indicates the
             recommended cell fill  mode for this image.
            </para>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.CellSampleSize">
            <summary>
            Gets or sets the cell sample size the method used to locate the Data Matrix barcode.
            </summary>
            <value>
            </value>
            <remarks>
            	<para>If CellSample is set to <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellSampleSize.AutoDetect" crefType="Unqualified"/> for the 
            <paramref name="DataMatrixSearchOptions"/>
            parameter, this property indicates the
             recommended cell fill  mode for this image.
            </para>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.DemodulationMode">
            <summary>
            Gets or sets the demodulation mode the function used to locate the Data Matrix barcode.
            </summary>
            <value>
            </value>
            <remarks>
            	
            If DemodulationMode is set to <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixDemodulationMode.AutoDetect" crefType="Unqualified"/> 
            in the <paramref name="DataMatrixSearchOptions"/> parameter, this property indicates the recommended demodulation mode for this image.
             
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.MinimumEdgeStrength">
            <summary>
            Gets or sets the strength of the weakest edge the method used to find the coarse location of the Data Matrix barcode in the image.
            </summary>
            <value>
            </value>
            <remarks>
            Use this value as a guide for setting the EdgeThreshold property of the DataMatrixSearchOptions input parameter. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Mirrored">
            <summary>
            Gets or sets whether the Data Matrix barcode appears mirrored in the image. 
            </summary>
            <value>
            </value>
            <remarks>
            If <see langword="true"/>, the Data Matrix barcode appears mirrored in the image. If <see langword="false"/>, the Data Matrix barcode appears normally in the image.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.BorderIntegrity">
            <summary>
            Gets or sets the percentage of the Data Matrix barcode border that appears correctly in the image.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.CellFill">
            <summary>
            Gets or sets the cell fill percentage of the Data Matrix barcode.
            </summary>
            <value>
            </value>
            <remarks>
            	<para>If CellFill is set to <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixCellFillMode.AutoDetect" crefType="Unqualified"/> for the 
            <paramref name="DataMatrixDescriptionOptions"/>
            parameter, this property indicates the
             recommended cell fill  mode for this image.
            </para>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Polarity">
            <summary>
            Gets or sets the polarity of the Data Matrix barcode.
            </summary>
            <value>
            </value>
            <remarks>If Polarity is set to <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixPolarity.AutoDetect" crefType="Unqualified"/> in the
             DataMatrixDescriptionOptions parameter, this property indicates the recommended polarity for this image.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Ecc">
            <summary>
            Gets or sets the ECC (error correction code) used by the Data Matrix barcode.
            </summary>
            <value>
            </value>
            <remarks>
             If Ecc is set to <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.AutoDetect" crefType="Unqualified"/> or 
            <see cref="F:NationalInstruments.Vision.Analysis.DataMatrixEcc.Ecc000To140" crefType="Unqualified"/> in the <paramref name=" DataMatrixDescriptionOptions"/> parameter, this property indicates the recommended ECC for this image.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Columns">
            <summary>
            Gets or sets the number of columns in the Data Matrix barcode.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Rows">
            <summary>
            Gets or sets the number of rows in the Data Matrix barcode.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.AspectRatio">
            <summary>
            Gets or sets the aspect ratio of the Data Matrix barcode in the image, which equals the ratio of the width of a Data Matrix barcode cell (in pixels) divided by the height of a Data Matrix barcode cell (in pixels).
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.ErasuresCorrected">
            <summary>
            Gets or sets the number of erasures the method corrected when decoding the Data Matrix barcode.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.ErrorsCorrected">
            <summary>
            Gets or sets the number of errors the method corrected when decoding the DataMatrix barcode.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Corners">
            <summary>
            Gets the coordinates of the corners of the rectangle surrounding the Data Matrix barcode.
            </summary>
            <value>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.StringData">
            <summary>
            Gets or sets the string containing the decoded Data Matrix barcode data.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Binary">
            <summary>
            Gets or sets whether the data in the Data Matrix barcode is binary.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DataMatrixReport.Found">
            <summary>
            Gets or sets whether the method located and decoded a Data Matrix barcode. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.AimGradeReport">
            <summary>Contains the results of grading a Data Matrix barcode.</summary>
            <remarks>
            If a Data Matrix barcode cannot be located by <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, the function assigns the Data Matrix barcode the value <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/> for all grades and the value 0 for all raw scores.</remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AimGradeReport.#ctor">
            <summary>Initializes a new instance of the AIMGradeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AimGradeReport.Equals(NationalInstruments.Vision.Analysis.AimGradeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified AimGradeReport.
            </summary>
            <param name="other">
            An AimGradeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AimGradeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified AimGradeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of AimGradeReport
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AimGradeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AimGradeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.UnusedErrorCorrection">
            <summary>
            Gets or sets the unused error correction raw score for the Data Matrix barcode, which is based on the extent to which regional or spot damage in the Data Matrix barcode has eroded the reading safety margin provided by the error correction.
            </summary>
            <value>
            	The default value is 0.0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.UnusedErrorCorrectionGrade">
            <summary>
            Gets or sets the unused error correction letter grade for the Data Matrix barcode.
            </summary>
            <value>
            	The default value is <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.AxialNonuniformity">
            <summary>
            Gets or sets the axial nonuniformity raw score for the Data Matrix barcode, which is based on how much the sampling point spacing differs from one axis to another.
            </summary>
            <value>
            	The default value is 0.0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.AxialNonuniformityGrade">
            <summary>Gets or sets the axial nonuniformity grade for the Data Matrix barcode.</summary>
            <value>
            	The default value is F.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.PrintGrowth">
            <summary>
            Gets or sets the print growth raw score for the Data Matrix barcode, which is based on the extent to which dark or light markings appropriately fill their module boundaries.
            </summary>
            <value>
            	The default value is 0.0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.PrintGrowthGrade">
            <summary>
            Gets or sets the print growth letter grade for the Data Matrix barcode.
            </summary>
            <value>
            	The default value is <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.SymbolContrast">
            <summary>
            Gets or sets the symbol contrast raw score representing the percentage difference between the mean of the reflectance of the darkest 10 percent and lightest 10 percent of the Data Matrix barcode.
            </summary>
            <value>
            	The default value is 0.0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.SymbolContrastGrade">
            <summary>
            Gets or sets the letter grade assigned to a Data Matrix barcode based on the symbol contrast raw score.
            </summary>
            <value>
            	The default value is <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.DecodingGrade">
            <summary>
            Gets or sets the letter grade assigned to a Data Matrix barcode based on the success in decoding the Data Matrix barcode. 
            </summary>
            <value>
            	The default value is F.
            </value>
            <remarks>
            The method sets this grade to <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.A" crefType="PartiallyQualified"/> if the method could decode the Data Matrix barcode, otherwise the function sets this grade to <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimGradeReport.OverallGrade">
            <summary>
            Gets or sets the overall letter grade, which is equal to the lowest of the other five letter grades.</summary>
            <value>
            	The default value is <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/>.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CalibReflectanceStruct">
            <summary>Contains the results of grading a Data Matrix barcode.</summary>
            <remarks>
            If a Data Matrix barcode cannot be located by <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, the function assigns the Data Matrix barcode the value <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/> for all grades and the value 0 for all raw scores.</remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibReflectanceStruct.Srtarget">
            <summary>
            
            </summary>
            <value>The default value is .
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibReflectanceStruct.Mlcal">
            <summary>
            
            </summary>
            <value>The default value is .
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibReflectanceStruct.Srcal">
            <summary>
            
            </summary>
            <value>The default value is .
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibReflectanceStruct.Rcal">
            <summary>
            
            </summary>
            <value>The default value is .
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.AimDpmGradeReport">
            <summary>Contains the results of grading a Data Matrix barcode.</summary>
            <remarks>
            If a Data Matrix barcode cannot be located by <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, the function assigns the Data Matrix barcode the value <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/> for all grades and the value 0 for all raw scores.</remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.MinimumReflectance">
            <summary>
            The minimum reflectance raw score for the Data Matrix code, which is the ratio of the parts reflectance to the calibrated reflectance.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.FixedPatternDamage">
            <summary>
            The fixed pattern damage raw score for the Data Matrix code, which is the extent of damage in the finder pattern and quiet zone pattern.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.GridNonUniformity">
            <summary>
            The grid nonuniformity raw score for the Data Matrix code, which is the largest vector deviation of the grid intersections, determined by the reference decode algorithm from the binarized image of a given symbol, from their ideal theoretical position.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.UnusedErrorCorrection">
            <summary>
            The unused error correction raw score for the Data Matrix code, which is based on the extent to which regional or spot damage in the Data Matrix code has eroded the reading safety margin provided by the error correction.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.AxialNonUniformity">
            <summary>
            The axial nonuniformity raw score for the Data Matrix code, which is based on how much the sampling point spacing differs from one axis to another.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.PrintGrowth">
            <summary>
            The print growth raw score for the Data Matrix code, which is based on the extent to which dark or light markings appropriately fill their cell boundaries.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.CellContrast">
            <summary>
            The cell contrast raw score representing the difference between the mean light and the mean dark of the symbol histogram.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.MinimumReflectanceGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the minimum reflectance raw score.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.FixedPatternDamageGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the fixed pattern damage. Fixed pattern damage measures the damage in the finder pattern, quiet zone, clock pattern, and solid area segment regions.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.CellModulationGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the modulation raw score. Modulation is the measure of the uniformity of reflectance of the dark and light modules in the barcode.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.GridNonUniformityGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the grid nonuniformity raw score.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.UnusedErrorCorrectionGrade">
            <summary>
            The unused error correction letter grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.AxialNonUniformityGrade">
            <summary>
            The axial nonuniformity grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.PrintGrowthGrade">
            <summary>
            The print growth letter grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.CellContrastGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the cell contrast raw score.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.DecodingGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the success of the function in decoding the Data Matrix code. The function sets this grade to A if the function could decode the Data Matrix code, otherwise the function sets this grade to F.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AimDpmGradeReport.OverallGrade">
            <summary>
            The overall letter grade, which is equal to the lowest of the other five letter grades.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GradeReportISO15415">
            <summary>Contains the results of grading a Data Matrix barcode.</summary>
            <remarks>
            If a Data Matrix barcode cannot be located by <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, the function assigns the Data Matrix barcode the value <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/> for all grades and the value 0 for all raw scores.</remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.FixedPatternDamage">
            <summary>
            The fixed pattern damage raw score for the Data Matrix code, which is the extent of damage in the finder pattern and quiet zone pattern.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.GridNonUniformity">
            <summary>
            The grid nonuniformity raw score for the Data Matrix code, which is the largest vector deviation of the grid intersections, determined by the reference decode algorithm from the binarized image of a given symbol, from their ideal theoretical position.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.UnusedErrorCorrection">
            <summary>
            The unused error correction raw score for the Data Matrix code, which is based on the extent to which regional or spot damage in the Data Matrix code has eroded the reading safety margin provided by the error correction.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.AxialNonUniformity">
            <summary>
            The axial nonuniformity raw score for the Data Matrix code, which is based on how much the sampling point spacing differs from one axis to another.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.PrintGrowth">
            <summary>
            The print growth raw score for the Data Matrix code, which is based on the extent to which dark or light markings appropriately fill their cell boundaries.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.SymbolContrast">
            <summary>
            The symbol contrast raw score representing the percentage difference between the mean of the reflectance of the darkest 10 percent and lightest 10 percent of the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.FixedPatternDamageGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the fixed pattern damage. Fixed pattern damage measures the damage in the finder pattern, quiet zone, clock pattern, and solid area segment regions.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.ModulationGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the modulation raw score. Modulation is the measure of the uniformity of reflectance of the dark and light modules in the barcode.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.GridNonUniformityGrade">
            <summary>
            The axial nonuniformity grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.UnusedErrorCorrectionGrade">
            <summary>
            The unused error correction letter grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.AxialNonUniformityGrade">
            <summary>
            The axial nonuniformity grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.PrintGrowthGrade">
            <summary>
            The print growth letter grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.SymbolContrastGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the symbol contrast raw score.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.DecodingGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the success of the function in decoding the Data Matrix code. The function sets this grade to A if the function could decode the Data Matrix code, otherwise the function sets this grade to F.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO15415.OverallGrade">
            <summary>
            The overall letter grade, which is equal to the lowest of the other five letter grades.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GradeReportISO16022">
            <summary>Contains the results of grading a Data Matrix barcode.</summary>
            <remarks>
            If a Data Matrix barcode cannot be located by <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ReadDataMatrixBarcode(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/>, the function assigns the Data Matrix barcode the value <see cref="F:NationalInstruments.Vision.Analysis.AimGrade.F" crefType="PartiallyQualified"/> for all grades and the value 0 for all raw scores.</remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.UnusedErrorCorrection">
            <summary>
            The unused error correction raw score for the Data Matrix code, which is based on the extent to which regional or spot damage in the Data Matrix code has eroded the reading safety margin provided by the error correction.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.AxialNonUniformity">
            <summary>
            The axial nonuniformity raw score for the Data Matrix code, which is based on how much the sampling point spacing differs from one axis to another.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.PrintGrowth">
            <summary>
            The print growth raw score for the Data Matrix code, which is based on the extent to which dark or light markings appropriately fill their cell boundaries.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.SymbolContrast">
            <summary>
            
            </summary>
            <value>The default value is .
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.UnusedErrorCorrectionGrade">
            <summary>
            The unused error correction letter grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.AxialNonUniformityGrade">
            <summary>
            The axial nonuniformity grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.PrintGrowthGrade">
            <summary>
            The print growth letter grade for the Data Matrix code.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.SymbolContrastGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the symbol contrast raw score.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.DecodingGrade">
            <summary>
            The letter grade assigned to a Data Matrix code based on the success of the function in decoding the Data Matrix code. The function sets this grade to A if the function could decode the Data Matrix code, otherwise the function sets this grade to F.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GradeReportISO16022.OverallGrade">
            <summary>
            The overall letter grade, which is equal to the lowest of the other five letter grades.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EdgeOptions">
            <summary>
            Defines how the method will find edges.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeOptions.#ctor">
            <summary>
            Initializes a new instance of the EdgeOptions class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeOptions.#ctor(NationalInstruments.Vision.Analysis.EdgePolaritySearchMode)">
            <summary>
            Initializes a new instance of the EdgeOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="polarity">The polarity of the edges to be found. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeOptions.#ctor(NationalInstruments.Vision.Analysis.EdgePolaritySearchMode,System.Double)">
            <summary>
            Initializes a new instance of the EdgeOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="polarity">The polarity of the edges to be found. 
            </param>
            <param name="minimumThreshold">The minimum edge strength, also known as the gradient magnitude, required for a detected edge. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeOptions.#ctor(NationalInstruments.Vision.Analysis.EdgePolaritySearchMode,System.Double,NationalInstruments.Vision.Analysis.InterpolationMethod)">
            <summary>
            Initializes a new instance of the EdgeOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="polarity">The polarity of the edges to be found. 
            </param>
            <param name="minimumThreshold">The minimum edge strength, also known as the gradient magnitude, required for a detected edge. 
            </param>
            <param name="interpolationType">The interpolation method used to locate the edge position.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeOptions.Equals(NationalInstruments.Vision.Analysis.EdgeOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EdgeOptions.
            </summary>
            <param name="other">
            A EdgeOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EdgeOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of EdgeOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeOptions.ColumnProcessingMode">
            <summary>
            Gets or sets the processing mode used to find the straight edge. 
            </summary>
            <value>The default value is Average.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            Average—Uses the average of a column.
            </description>
            		</item>
            		<item>
            			<description>
            Median—Uses the median of a column.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeOptions.InterpolationType">
            <summary>
            Gets or sets the interpolation method used to locate the edge position.
            </summary>
            <value>
            The default value is BilinearFixed.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            Bilinear—The function uses an interpolation method that interpolates new pixel values using a bidirectional average of the neighboring pixels. 
            </description>
            		</item>
            		<item>
            			<description>
            BilinearFixed—The function uses an interpolation method that interpolates new pixel values using bilinear fixed interpolation.
            </description>
            		</item>
            		<item>
            			<description>
            Cubic—The function uses an interpolation method that interpolates new pixel values by fitting them to a cubic spline curve, where the curve is based on known pixel values from the image. 
            </description>
            		</item>
            		<item>
            			<description>
            Quadratic—The function uses an interpolation method that interpolates new pixel values using a quadratic approximating polynomial. 
            </description>
            		</item>
            		<item>
            			<description>
            ZeroOrder—The function uses an interpolation method that interpolates new pixel values using the nearest valid neighboring pixel. 
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeOptions.MinimumThreshold">
            <summary>
            Gets or sets the minimum edge strength, also known as the gradient magnitude, required for a detected edge. 
            </summary>
            <value>
            The default value is 10.0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeOptions.Width">
            <summary>
            Gets or sets the number of pixels averaged perpendicular to the search direction to compute the edge profile strength at each point along the search region. 
            </summary>
            <value>
            The default value is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeOptions.KernelSize">
            <summary>
            Gets or sets the size of the edge detection kernel. 
            </summary>
            <value>
            The default value is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeOptions.Polarity">
            <summary>
            Gets or sets the polarity of the edges to be found. 
            </summary>
            <value>The default value is All.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            All—Search for all edges.
            </description>
            		</item>
            		<item>
            			<description>
            Falling—Search for falling edges.
            </description>
            		</item>
            		<item>
            			<description>
            Rising—Search for rising edges.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EdgeInfo">
            <summary>
            Provides information about a detected edge.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeInfo.#ctor">
            <summary>
            Initializes a new instance of the EdgeInfo class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeInfo.Equals(NationalInstruments.Vision.Analysis.EdgeInfo)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EdgeInfo.
            </summary>
            <param name="other">
            An EdgeInfo instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeInfo.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EdgeInfo.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of EdgeInfo and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeInfo.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeInfo.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeInfo.Polarity">
            <summary>
            Gets or sets the polarity of the edges to be found. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeInfo.NoisePeak">
            <summary>
            Gets or sets the strength of the noise associated with the current edge.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeInfo.Magnitude">
            <summary>
            Gets or sets the intensity contrast at the edge.
            </summary>
            <value>
            </value>
            <remarks>
            This property can be used as the noise level for the detected edge.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeInfo.CalibratedDistance">
            <summary>
            Gets or sets the location of the edge from the first point along the boundary of the input region in calibrated units.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeInfo.Distance">
            <summary>
            Gets or sets the location of the edge from the first point along the boundary of the input region in pixels.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeInfo.CalibratedPosition">
            <summary>
            Gets or sets the position of the edge in the image in real-world coordinates.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeInfo.Position">
            <summary>
            Gets or sets the position of the edge in the image in pixel coordinates.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EdgeReport">
            <summary>
            Provides information about a detected edge.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeReport.#ctor">
            <summary>
            Initializes a new instance of the EdgeReport class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeReport.Equals(NationalInstruments.Vision.Analysis.EdgeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EdgeReport.
            </summary>
            <param name="other">
            An EdgeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EdgeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of EdgeReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeReport.CalibrationValid">
            <summary>
            Gets or sets whether the edges contained in this report have valid calibration data.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeReport.GradientInfo">
            <summary>
            Gets or sets a collection of double-precision values that correspond to the intensity profile of the region used to detect edges.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgeReport.Edges">
            <summary>
            Gets or sets the collection of edges found during edge detection.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SearchArcInfo">
            <summary>
            Describes a search arc used for finding edges.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchArcInfo.#ctor">
            <summary>
            Initializes a new instance of the SearchArcInfo class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchArcInfo.Equals(NationalInstruments.Vision.Analysis.SearchArcInfo)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SearchArcInfo.
            </summary>
            <param name="other">
            A SearchArcInfo instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchArcInfo.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SearchArcInfo.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SearchArcInfo
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchArcInfo.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchArcInfo.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SearchArcInfo.EdgeReport">
            <summary>
            Gets or sets information about the edges found in this search line. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SearchArcInfo.Arc">
            <summary>
            Gets or sets the coordinates of the arc used for edge detection. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ConcentricRakeReport">
            <summary>
            Provides information describing the concentric rake and the edges calculated with the concentric rake.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricRakeReport.#ctor">
            <summary>
            Initializes a new instance of the ConcentricRakeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricRakeReport.Equals(NationalInstruments.Vision.Analysis.ConcentricRakeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ConcentricRakeReport.
            </summary>
            <param name="other">
            A ConcentricRakeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricRakeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ConcentricRakeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ConcentricRakeReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricRakeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricRakeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConcentricRakeReport.SearchArcs">
            <summary>
            Gets or sets the arcs used for edge detection and the edge information for each arc.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConcentricRakeReport.LastEdges">
            <summary>
            Gets or sets the last edge point detected along each search line in the ROI. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConcentricRakeReport.FirstEdges">
            <summary>
            Gets or sets the first edge point detected along each search line in the ROI. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ThresholdData">
            <summary>
            Contains information about a threshold range.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ThresholdData.#ctor(NationalInstruments.Vision.Range)">
            <summary>
            Initializes a new instance of the ThresholdData class.
            </summary>
            <param name="range">
            The range of pixel values to keep.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ThresholdData.#ctor(NationalInstruments.Vision.Range,System.Boolean)">
            <summary>
            Initializes a new instance of the ThresholdData class.
            </summary>
            <param name="range">
            The range of pixel values to keep.
            </param>
            <param name="useNewValue">
            Set this parameter to <see langword="true"/> to set the pixel values within the <format type="italics">range</format> 
            to the value specified in <format type="italics">newValue</format>. Set this parameter to <see langword="false"/> to 
            leave the pixel values unchanged. This parameter has a default value of <see langword="true"/>.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ThresholdData.#ctor(NationalInstruments.Vision.Range,System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the ThresholdData class.
            </summary>
            <param name="range">
            The range of pixel values to keep.
            </param>
            <param name="useNewValue">
            Set this parameter to <see langword="true"/> to set the pixel values within the <format type="italics">range</format> 
            to the value specified in <format type="italics">newValue</format>. Set this parameter to <see langword="false"/> to 
            leave the pixel values unchanged. This parameter has a default value of <see langword="true"/>.
            </param>
            <param name="newValue">
            If <format type="italics">useNewValue</format> is set to true, 
            <format type="italics">newValue</format> is the replacement value for pixels within the 
            <format type="italics">range</format>. If <format type="italics">useNewValue</format> is set to 
            false, the pixel values are not changed. The default value is 1.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ThresholdData.Equals(NationalInstruments.Vision.Analysis.ThresholdData)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ThresholdData.
            </summary>
            <param name="other">
            A ThresholdData instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ThresholdData.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ThresholdData.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ThresholdData and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ThresholdData.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ThresholdData.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ThresholdData.UseNewValue">
            <summary>
            Gets or sets whether the method sets pixel values within the Range to the value specified in NewValue. 
            </summary>
            <value>
            	<see langword="true"/> sets the pixel values to to the value specified in NewValue. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ThresholdData.NewValue">
            <summary>
            Gets or sets the replacement value for pixels within the Range.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ThresholdData.Range">
            <summary>
            Gets or sets the range of pixel values to keep.
            </summary>
            <value>
            The default is (128, 255).
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LocalThresholdOptions">
            <summary>
            Describes the options to use when performing a local threshold.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.#ctor">
            <summary>
            Initializes a new instance of the LocalThresholdOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.#ctor(NationalInstruments.Vision.Analysis.ParticleType)">
            <summary>
            Initializes a new instance of the LocalThresholdOptions class.
            </summary>
            <param name="particleType">
            The type of objects to be detected.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.#ctor(NationalInstruments.Vision.Analysis.ParticleType,NationalInstruments.Vision.Analysis.LocalThresholdMethod)">
            <summary>
            Initializes a new instance of the LocalThresholdOptions class.
            </summary>
            <param name="particleType">
            The type of objects to be detected.
            </param>
            <param name="method">
            The local thresholding method.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.#ctor(NationalInstruments.Vision.Analysis.ParticleType,NationalInstruments.Vision.Analysis.LocalThresholdMethod,System.Double)">
            <summary>
            Initializes a new instance of the LocalThresholdOptions class.
            </summary>
            <param name="particleType">
            The type of objects to be detected.
            </param>
            <param name="method">
            The local thresholding method.
            </param>
            <param name="replaceValue">
            The replacement value for the pixels of the kept objects in the destination image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.#ctor(NationalInstruments.Vision.Analysis.ParticleType,NationalInstruments.Vision.Analysis.LocalThresholdMethod,System.Double,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the LocalThresholdOptions class.
            </summary>
            <param name="particleType">
            The type of objects to be detected.
            </param>
            <param name="method">
            The local thresholding method.
            </param>
            <param name="replaceValue">
            The replacement value for the pixels of the kept objects in the destination image.
            </param>
            <param name="windowWidth">
            The width of the rectangular window around the pixel on which the method performs the local threshold. This number must be at least 3 and cannot be larger than the height of the source image.
            </param>
            <param name="windowHeight">
            The height of the rectangular window around the pixel on which the method performs the local threshold. This number must be at least 3 and cannot be larger than the height of the source image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.Equals(NationalInstruments.Vision.Analysis.LocalThresholdOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LocalThresholdOptions.
            </summary>
            <param name="other">
            A LocalThresholdOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LocalThresholdOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LocalThresholdOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LocalThresholdOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LocalThresholdOptions.DeviationWeight">
            <summary>
            Gets or sets the weight applied to the variance calculation. 
            </summary>
            <value>
            The default is 0.2.
            </value>
            <remarks>
            Valid k constants range from 0 to 1. Settings this value to 0 will increase the performance of the method because the method will not calculate the variance for any of the pixels.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LocalThresholdOptions.WindowHeight">
            <summary>
            Gets or sets the height of the rectangular window around the pixel on which the method performs the local threshold. This number must be at least 3 and cannot be larger than the height of the source image.
            </summary>
            <value>
             The default value is 32.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LocalThresholdOptions.WindowWidth">
            <summary>
            Gets or sets the width of the rectangular window around the pixel on which the method performs the local threshold. This number must be at least 3 and cannot be larger than the width of the source image.
            </summary>
            <value>
             The default value is 32.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LocalThresholdOptions.ReplaceValue">
            <summary>
            Gets or sets the replacement value for the pixels of the kept objects in the destination image.
            </summary>
            <value>
            The default is 1.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LocalThresholdOptions.ParticleType">
            <summary>
            Gets or sets the type of objects to be detected.
            </summary>
            <value>
            The default is Bright.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LocalThresholdOptions.Method">
            <summary>
            Gets or sets the local thresholding method.
            </summary>
            <value>
            The default is NiBlack.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CircleReport">
            <summary>
            Provides information about a detected circle.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleReport.#ctor">
            <summary>
            Initializes a new instance of a CircleReport class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleReport.#ctor(NationalInstruments.Vision.PointContour)">
            <summary>
            Initializes a new instance of a CircleReport class.
            </summary>
            <param name="center">
            Center point of the circle.
            </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleReport.Equals(NationalInstruments.Vision.Analysis.CircleReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircleReport.</summary>
            <param name="other">
            A CircleReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircleReport. </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CircleReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleReport.Area">
            <summary>
            Gets or sets the surface area, in pixels, of the nucleus of the circle as defined by the Danielsson distance map.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleReport.Radius">
            <summary>
            Gets or sets the radius of the circle, in pixels.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleReport.Center">
            <summary>
            Gets ot sets the center point of the circle.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CurveOptions">
            <summary>
            Provides parameters used by various methods to find curves in an image.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.#ctor">
            <summary>
            Initializes a new instance of the CurveOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurveOptions class.
            </summary>
            <param name="onlyClosed">Whether the method identifies only closed curves in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.#ctor(System.Boolean,NationalInstruments.Vision.Analysis.ExtractionMode)">
            <summary>
            Initializes a new instance of the CurveOptions class.
            </summary>
            <param name="onlyClosed">Whether the method identifies only closed curves in the image.
            </param>
            <param name="extractionMode">How the method identifies curves in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.#ctor(System.Boolean,NationalInstruments.Vision.Analysis.ExtractionMode,NationalInstruments.Vision.Analysis.EdgeFilterSize)">
            <summary>
            Initializes a new instance of the CurveOptions class.
            </summary>
            <param name="onlyClosed">Whether the method identifies only closed curves in the image.
            </param>
            <param name="extractionMode">How the method identifies curves in the image.
            </param>
            <param name="filterSize">The width of the edge filter the method uses to identify curves in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.#ctor(System.Boolean,NationalInstruments.Vision.Analysis.ExtractionMode,NationalInstruments.Vision.Analysis.EdgeFilterSize,System.Boolean)">
            <summary>
            Initializes a new instance of the CurveOptions class.
            </summary>
            <param name="onlyClosed">Whether the method identifies only closed curves in the image.
            </param>
            <param name="extractionMode">How the method identifies curves in the image.
            </param>
            <param name="filterSize">The width of the edge filter the method uses to identify curves in the image.
            </param>
            <param name="subpixelAccuracy">Whether the method identifies the location of curves with subpixel accuracy by interpolating between points to find the crossing of the threshold.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.#ctor(System.Boolean,NationalInstruments.Vision.Analysis.ExtractionMode,NationalInstruments.Vision.Analysis.EdgeFilterSize,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CurveOptions class.
            </summary>
            <param name="onlyClosed">Whether the method identifies only closed curves in the image.
            </param>
            <param name="extractionMode">How the method identifies curves in the image.
            </param>
            <param name="filterSize">The width of the edge filter the method uses to identify curves in the image.
            </param>
            <param name="subpixelAccuracy">Whether the method identifies the location of curves with subpixel accuracy by interpolating between points to find the crossing of the threshold.
            </param>
            <param name="threshold">Specifies the threshold.
            </param>
            <param name="rowStepSize">Specifies the row step size.
            </param>
            <param name="colStepSize">Specifies the column step size.
            </param>
            <param name="maximumEndPointGap">Specifies the maximum End Point Gap.
            </param>
            <param name="minimumLength">Specifies the minimum Length.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.Equals(NationalInstruments.Vision.Analysis.CurveOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CurveOptions.
            </summary>
            <param name="other">
            A CurveOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CurveOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CurveOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.SubpixelAccuracy">
            <summary>
            Gets or sets whether the method identifies the location of curves with subpixel accuracy by interpolating between points to find the crossing of the threshold.
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.OnlyClosed">
            <summary>
            Gets or sets whether the method identifies only closed curves in the image.
            </summary>
            <value>
            The default value is <see langword="false"/>, which specifies that the method identifies both open and closed curves.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.MaximumEndPointGap">
            <summary>
            Gets or sets the maximum gap, in pixels, between the endpoints of a curve that the function identifies as a closed curve.
            </summary>
            <value>The default value is 10.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.ColumnStepSize">
            <summary>
            Gets or sets the distance, in the x direction, between columns of pixels in the image that the method inspects for curve seed points.
            </summary>
            <value>
            Valid values for this property range from 1 to 255. The default value is 15.
            </value>
            <remarks>
            Set this value to be smaller than the minimum width of the object you want to detect in the image.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.RowStepSize">
            <summary>
            Gets or sets the distance, in the y direction, between lines that the method inspects for curve seed points.
            </summary>
            <value>The default value is 15.
            Valid values for this property range from 1 to 255. 
            </value>
            <remarks>
            Set this value to be smaller than the minimum height of objects you want to detect in the image. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.MinimumLength">
            <summary>
            Gets or sets the length, in pixels, of the smallest curve the method will extract.
            </summary>
            <value>The default value is 25.
            </value>
            <remarks>
            This property ignores curves that have a length less than MinimumLength pixels.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.FilterSize">
            <summary>
            Gets or sets the width of the edge filter the method uses to identify curves in the image.
            </summary>
            <value>The default value for this property is <see cref="F:NationalInstruments.Vision.Analysis.EdgeFilterSize.Normal" crefType="Unqualified"/>.
            </value>
            <remarks>You can use the following enumeration values with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.EdgeFilterSize.Fine" crefType="Unqualified"/>—Specifies that the function uses a fine, or narrow, edge filter.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.EdgeFilterSize.Normal" crefType="Unqualified"/>—Specifies that the function uses a normal edge filter.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.Threshold">
            <summary>
            Gets or sets the minimum contrast a seed point must have for the method to begin a curve.
            </summary>
            <value>The default value is 75. Valid values for this property range from 1 to 360. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveOptions.ExtractionMode">
            <summary>
            Gets or sets how the method identifies curves in the image.
            </summary>
            <value>The default value is <see cref="F:NationalInstruments.Vision.Analysis.ExtractionMode.NormalImage" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following enumeration values with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.ExtractionMode.NormalImage" crefType="Unqualified"/>—Specifies that the method makes no assumptions about the uniformity of objects in the image or the image background.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.Analysis.ExtractionMode.UniformRegions" crefType="Unqualified"/>—Specifies that the method assumes that either the objects in the image or the image background consists of uniform pixel values. 
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CurveReport">
            <summary>
            Provides information about a curve found by the <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.ExtractCurves(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveReport.#ctor">
            <summary>
            Initializes a new instance of the CurveReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveReport.Equals(NationalInstruments.Vision.Analysis.CurveReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CurveReport.
            </summary>
            <param name="other">
            A CurveReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CurveReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CurveReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveReport.AverageEdgeStrength">
            <summary>
            Gets or sets the average of all edge strengths detected on the curve.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveReport.MaximumEdgeStrength">
            <summary>
            Gets or sets the highest edge strength detected on the curve.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveReport.MinimumEdgeStrength">
            <summary>
            Gets or sets the lowest edge strength detected on the curve.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveReport.CurveLength">
            <summary>
            Gets or sets the length of the curve.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveReport.Closed">
            <summary>
            Gets or sets whether the distance between the endpoints of the curve is less than or equal to <see cref="P:NationalInstruments.Vision.Analysis.CurveOptions.MaximumEndPointGap" crefType="Unqualified"/>.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveReport.Points">
            <summary>
            Gets or sets the location of every point detected on the curve.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LinearAveragesReport">
            <summary>
            Provides information about the linear averages of an image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LinearAveragesReport.#ctor">
            <summary>
            Initializes a new instance of the LinearAveragesReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LinearAveragesReport.Equals(NationalInstruments.Vision.Analysis.LinearAveragesReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LinearAveragesReport.
            </summary>
            <param name="other">
            A LinearAveragesReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LinearAveragesReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LinearAveragesReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LinearAveragesReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LinearAveragesReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LinearAveragesReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LinearAveragesReport.FallingDiagonalAverages">
            <summary>
            Gets or sets a collection containing the mean pixel value of each diagonal running from the upper left to the lower right of the inspected area of the image. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LinearAveragesReport.RisingDiagonalAverages">
            <summary>
            Gets or sets a collection containing the mean pixel value of each diagonal running from the lower left to the upper right of the inspected area of the image. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LinearAveragesReport.RowAverages">
            <summary>
            Gets or sets a collection containing the mean pixel value of each row. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LinearAveragesReport.ColumnAverages">
            <summary>
            Gets or sets a collection containing the mean pixel value of each column.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QuantifyReportItem">
            <summary>
            Contains quantification data relative to a region within the image passed to the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Quantify(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReportItem.#ctor">
            <summary>
            Initializes a new instance of the QuantifyReportItem class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReportItem.Equals(NationalInstruments.Vision.Analysis.QuantifyReportItem)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QuantifyReportItem.
            </summary>
            <param name="other">
            A QuantifyReportItem instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReportItem.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QuantifyReportItem.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of QuantifyReportItem
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReportItem.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReportItem.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QuantifyReportItem.RelativeSize">
            <summary>
            Gets or sets the proportion, expressed as a percentage, of the associated region relative to the whole image. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QuantifyReportItem.PixelArea">
            <summary>
            Gets or sets the analyzed surface area in pixel values.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QuantifyReportItem.CalibratedArea">
            <summary>
            Gets or sets the analyzed surface area in real-world values.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QuantifyReportItem.PixelRange">
            <summary>
            Gets or sets the range of pixel values.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QuantifyReportItem.StandardDeviation">
            <summary>
            Gets or sets the standard deviation of the pixel values. Pixel values are distributed more evenly as 
            the standard deviation increases.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QuantifyReportItem.Mean">
            <summary>
            Gets or sets the mean of the pixel values.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.QuantifyReport">
            <summary>
            A collection of 
            <see cref="T:NationalInstruments.Vision.Analysis.QuantifyReportItem" crefType="Unqualified"/> 
            objects. It contains one item for each region supplied to the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Quantify(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReport.#ctor">
            <summary>
            Initializes a new instance of the QuantifyReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReport.Equals(NationalInstruments.Vision.Analysis.QuantifyReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QuantifyReport.
            </summary>
            <param name="other">
            A QuantifyReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified QuantifyReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of QuantifyReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.QuantifyReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QuantifyReport.Regions">
            <summary>
            Gets or sets a collection of QuantifyReportItem structures containing statistical data about 
            each region of the image. Refer to the mask parameter of the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.Quantify(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> method 
            for more information about the regions. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.QuantifyReport.Global">
            <summary>
            Gets or sets statistical data about the whole image. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MaskToRoiReport">
            <summary>
            Provides information about a mask to ROI transformation.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaskToRoiReport.#ctor">
            <summary>
            Initializes a new instance of the MaskToRoiReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaskToRoiReport.#ctor(NationalInstruments.Vision.Roi,System.Boolean)">
            <summary>
            Initializes a new instance of the MaskToRoiReport class.
            </summary>
            <param name="roi">
            The ROI descriptor.
            </param>
            <param name="withinLimit">
            Specifies whether the ROI is a true representation of the mask. If <see langword="true"/>, 
            the number of points is within the maximum point limit. If <see langword="false"/>, the number 
            of points exceeds the maximum point limit, and the ROI may not represent the mask completely. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaskToRoiReport.Equals(NationalInstruments.Vision.Analysis.MaskToRoiReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MaskToRoiReport.
            </summary>
            <param name="other">
            A MaskToRoiReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaskToRoiReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MaskToRoiReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MaskToRoiReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaskToRoiReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaskToRoiReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MaskToRoiReport.WithinLimit">
            <summary>
            Gets or sets whether the ROI is a true representation of the mask. If <see langword="true"/>, 
            the number of points is within the maximum point limit. If <see langword="false"/>, the number 
            of points exceeds the maximum point limit, and the ROI may not represent the mask completely. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MaskToRoiReport.Roi">
            <summary>
            Gets or sets the ROI descriptor.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RoiProfileReport">
            <summary>
            Provides information about the points along the edge of each contour in the region of interest (ROI).
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RoiProfileReport.#ctor">
            <summary>
            Initializes a new instance of the RoiProfileReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RoiProfileReport.Equals(NationalInstruments.Vision.Analysis.RoiProfileReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RoiProfileReport.
            </summary>
            <param name="other">
            An RoiProfileReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RoiProfileReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RoiProfileReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of RoiProfileReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RoiProfileReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RoiProfileReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RoiProfileReport.Pixels">
            <summary>
            Gets or sets the points along the edge of each contour in the ROI.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RoiProfileReport.Report">
            <summary>
            Gets or sets quantifying information about the points along the edge of each contour in the ROI. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.View3DOptions">
            <summary>
            Specifies how to convert an image to a three-dimensional representation.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.View3DOptions.#ctor">
            <summary>
            Initializes a new instance of the View3DOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.View3DOptions.#ctor(NationalInstruments.Vision.Analysis.Direction3D)">
            <summary>
            Initializes a new instance of the View3DOptions class.
            </summary>
            <param name="direction">
            Defines the 3D orientation. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.View3DOptions.#ctor(NationalInstruments.Vision.Analysis.Direction3D,System.Int32)">
            <summary>
            Initializes a new instance of the View3DOptions class.
            </summary>
            <param name="direction">
            Defines the 3D orientation. 
            </param>
            <param name="sizeReduction">
            A divisor the function uses when determining the final height and width of the 3D image. The function coerces the 
            value if it is negative or greater then one-eighth the height or width of the original image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.View3DOptions.#ctor(NationalInstruments.Vision.Analysis.Direction3D,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the View3DOptions class.
            </summary>
            <param name="direction">
            Defines the 3D orientation. 
            </param>
            <param name="sizeReduction">
            A divisor the function uses when determining the final height and width of the 3D image. The function coerces the 
            value if it is negative or greater then one-eighth the height or width of the original image. 
            </param>
            <param name="maximumHeight">
            Defines the maximum height of a pixel from the image source drawn in 3D. Valid values range from 2 to 256. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.View3DOptions.Equals(NationalInstruments.Vision.Analysis.View3DOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified View3DOptions.
            </summary>
            <param name="other">
            A View3DOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.View3DOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified View3DOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of View3DOptions and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.View3DOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.View3DOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.View3DOptions.Plane">
            <summary>
            Gets or sets the view a function uses to show complex images. 
            </summary>
            <value>
            The default is Magnitude.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.View3DOptions.Background">
            <summary>
            Gets or sets the background color. 
            </summary>
            <value>
            The default is 85.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.View3DOptions.Border">
            <summary>
            Gets or sets the border size. 
            </summary>
            <value>
            The default is 20.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.View3DOptions.Beta">
            <summary>
            Gets or sets the angle between the horizontal and the second baseline. 
            </summary>
            <value>
            The default is 30.
            </value>
            <remarks>
            Valid values range from 15 to 45. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.View3DOptions.Alpha">
            <summary>
            Gets or sets the angle between the horizontal and the baseline. 
            </summary>
            <value>
            The default is 30.
            </value>
            <remarks>
            Valid values range from 15 to 45 degrees.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.View3DOptions.Direction">
            <summary>
            Gets or sets the 3D orientation. 
            </summary>
            <value>
            The default is NorthWest.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.View3DOptions.MaximumHeight">
            <summary>
            Gets or sets the maximum height of a pixel from the image source drawn in 3D. 
            </summary>
            <value>
            The default is 64.
            </value>
            <remarks>
            Valid values range from 2 to 256. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.View3DOptions.SizeReduction">
            <summary>
            Gets or sets a divisor the function uses when determining the final height and width of the 3D image. The function coerces the 
            value if it is negative or greater then one-eighth the height or width of the original image. 
            </summary>
            <value>
            The default is 2.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.BcgOptions">
            <summary>
            Defines the options to use when performing a BCGTransform or a ColorBCGTransform.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BcgOptions.#ctor">
            <summary>
            Initializes a new instance of the BcgOptions class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BcgOptions.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the BcgOptions class.
            </summary>
            <param name="brightness">The brightness of an image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BcgOptions.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the BcgOptions class.
            </summary>
            <param name="brightness">The brightness of an image. 
            </param>
            <param name="contrast">The contrast of an image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BcgOptions.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the BcgOptions class.
            </summary>
            <param name="brightness">The brightness of an image. 
            </param>
            <param name="contrast">The contrast of an image.
            </param>
            <param name="gamma">The gamma correction of an image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BcgOptions.Equals(NationalInstruments.Vision.Analysis.BcgOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified BcgOptions.
            </summary>
            <param name="other">
            A BcgOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BcgOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified BCGOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance.
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of BCGOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BcgOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.BcgOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.BcgOptions.Gamma">
            <summary>
            Gets or sets the gamma correction of an image. 
            </summary>
            <value>
            The default value is 1. 
            </value>
            <remarks>
            The default value of 1.0 is neutral. Values below 1.0 enhance contrast for darker pixels at the expense of brighter pixels. Values above 1.0 enhance contrast for brighter pixels at the expense of darker pixels.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.BcgOptions.Contrast">
            <summary>
            Gets or sets the contrast of an image. 
            </summary>
            <value>
            The default value is 45. 
            </value>
            <remarks>
            The default value of 45 leaves the contrast unchanged. Values below 45 decrease the contrast, and values above 45 increase the contrast.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.BcgOptions.Brightness">
            <summary>
            Gets or sets the brightness of an image. 
            </summary>
            <value>
            The default value is 128.
            </value>
            <remarks>
            The default value of 128 leaves the brightness unchanged. Values below 128 darken the image, and values above 128 brighten the image.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FitCircleOptions">
            <summary>
            Provides the options to use when calling FitCircle.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleOptions.#ctor">
            <summary>
            Initializes a new instance of the FitCircleOptions class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleOptions.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the FitCircleOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="pixelRadius">The acceptable distance, in pixels, that a point determined to belong to the circle can be from the circumference of the circle.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleOptions.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the FitCircleOptions class.
            </summary>
            <remarks>
            </remarks>
            <param name="pixelRadius">The acceptable distance, in pixels, that a point determined to belong to the circle can be from the circumference of the circle.
            </param>
            <param name="minimumScore">The minimum score that the fitted circle can have.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleOptions.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the FitCircleOptions class.
            </summary>
            &gt;
            <remarks>
            </remarks>
            <param name="pixelRadius">The acceptable distance, in pixels, that a point determined to belong to the circle can be from the circumference of the circle.
            </param>
            <param name="minimumScore">The minimum score that the fitted circle can have.
            </param>
            <param name="rejectOutliers">A Boolean indicating whether the algorithm should reject outlying points.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleOptions.Equals(NationalInstruments.Vision.Analysis.FitCircleOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitCircleOptions.
            </summary>
            <param name="other">
            A  FitCircleOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitCircleOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FitCircleOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleOptions.MaximumIterations">
            <summary>
            Gets or sets the number of refining steps the algorithm takes to ensure that the quality of the fit is better than MinimumScore.
            </summary>
            <value>
            The default is 500.
            </value>
            <remarks>
            This is valid only when RejectOutliers is <see langword="true"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleOptions.PixelRadius">
            <summary>
            Gets or sets the acceptable distance, in pixels, that a point determined to belong to the circle can be from the circumference of the circle.
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleOptions.MinimumScore">
            <summary>
            Gets or sets the minimum score that the fitted circle can have.
            </summary>
            <value>
            The default is 500.
            </value>
            <remarks>
            This can vary between 0 and 1000, with 1000 representing a perfect circle. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleOptions.RejectOutliers">
            <summary>
            Gets or sets whether the algorithm should reject outlying points.
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FitCircleReport">
            <summary>
            Provides the circle that best represents a set of points. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleReport.#ctor">
            <summary>
            Initializes a new instance of the FitCircleReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleReport.Equals(NationalInstruments.Vision.Analysis.FitCircleReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitCircleReport.
            </summary>
            <param name="other">
            A FitCircleReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitCircleReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FitCircleReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitCircleReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleReport.Circle">
            <summary>
            Gets or sets the circle detected.
            </summary>
            <value>
            </value>
            <remarks>
             This property is useful for passing directly to <see cref="M:NationalInstruments.Vision.Overlay.AddOval(NationalInstruments.Vision.OvalContour)" crefType="Unqualified"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleReport.PointsUsed">
            <summary>
            Gets or sets the collection of points that the algorithm used when fitting the circle.
            </summary>
            <value>
            </value>
            <remarks>
            This is valid only if RejectOutliers is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleReport.Valid">
            <summary>
            Gets or sets whether the fit is valid.
            </summary>
            <value>
            </value>
            <remarks>
            This is <see langword="true"/> if the quality of the fit is better than MinScore and the fit was attained within MaxIterations. When you call FitCircle, this property is always <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleReport.Error">
            <summary>
            Gets or sets the least square error of the fitted circle to the entire set of points. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleReport.Perimeter">
            <summary>
            Gets or sets the perimeter of the circle.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleReport.Area">
            <summary>
            Gets or sets  the area of the circle.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleReport.Radius">
            <summary>
            Gets or sets the radius of the circle.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitCircleReport.Center">
            <summary>
            Gets or sets the coordinates of the center of the circle.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FitEllipseOptions">
            <summary>
            Defines the options to use when calling FitEllipse.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseOptions.#ctor">
            <summary>
            Initializes a new instance of the FitEllipseOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseOptions.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the FitEllipseOptions class.
            </summary>
            <param name="pixelRadius">The acceptable distance, in pixels, that a point determined to belong to the ellipse can be from the circumference of the ellipse.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseOptions.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the FitEllipseOptions class.
            </summary>
            <param name="pixelRadius">The acceptable distance, in pixels, that a point determined to belong to the ellipse can be from the circumference of the ellipse.
            </param>
            <param name="minimumScore">The minimum score that the fitted ellipse can have.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseOptions.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the FitEllipseOptions class.
            </summary>
            <param name="pixelRadius">The acceptable distance, in pixels, that a point determined to belong to the ellipse can be from the circumference of the ellipse.
            </param>
            <param name="minimumScore">The minimum score that the fitted ellipse can have.
            </param>
            <param name="rejectOutliers">A Boolean indicating whether the algorithm should reject outlying points.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseOptions.Equals(NationalInstruments.Vision.Analysis.FitEllipseOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitEllipseOptions.
            </summary>
            <param name="other">
            A FitEllipseOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitEllipseOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FitEllipseOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseOptions.MaximumIterations">
            <summary>
            Gets or sets the number of refining steps the algorithm takes to ensure that the quality of the fit is better than MinimumScore.
            </summary>
            <value>
            The default is 2000.
            </value>
            <remarks>
            This is valid only when RejectOutliers is <see langword="true"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseOptions.PixelRadius">
            <summary>
            Gets or sets the acceptable distance, in pixels, that a point determined to belong to the ellipse can be from the circumference of the ellipse.
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseOptions.MinimumScore">
            <summary>
            Gets or sets the minimum score that the fitted ellipse can have.
            </summary>
            <value>
            The default is 500.
            </value>
            <remarks>
            This can vary between 0 and 1000, with 1000 representing a perfect ellipse.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseOptions.RejectOutliers">
            <summary>
            Gets or sets whether the algorithm should reject outlying points.
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FitEllipseReport">
            <summary>
            Defines the ellipse that best represents a set of points. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseReport.#ctor">
            <summary>
            Initializes a new instance of the FitEllipseReport class. 
            </summary>
            <remarks>
            You must supply at least six non-colinear points to fit to the edge of the ellipse.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseReport.Equals(NationalInstruments.Vision.Analysis.FitEllipseReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitEllipseReport.
            </summary>
            <param name="other">
            A FitEllipseReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitEllipseReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FitEllipseReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitEllipseReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseReport.PointsUsed">
            <summary>
            Gets or sets the collection of points that the algorithm used when fitting the circle.
            </summary>
            <value>
            </value>
            <remarks>
            This property is valid only if RejectOutliers is <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseReport.Valid">
            <summary>
            Gets or sets whether the fit is valid.
            </summary>
            <value>
            </value>
            <remarks>
            This is <see langword="true"/> if the quality of the fit is better than MinimumScore and the fit was attained within MaximumIterations. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseReport.Error">
            <summary>
            Gets or sets the least square error of the fitted ellipse over every given radial point.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseReport.Perimeter">
            <summary>
            Gets or sets the length of the perimeter of the ellipse.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseReport.Area">
            <summary>
            Gets or sets the area of the ellipse.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseReport.MinorAxis">
            <summary>
            Gets or sets the minor axis of the ellipse.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseReport.MajorAxis">
            <summary>
            Gets or sets the major axis of the ellipse.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitEllipseReport.Center">
            <summary>
            Gets or sets the coordinates of the center of the ellipse.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FitLineOptions">
            <summary>
            Describes how to calculate the best fit line.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineOptions.#ctor">
            <summary>
            Initializes a new instance of the FitLineOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineOptions.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the FitLineOptions class.
            </summary>
            <param name="pixelRadius">The neighborhood pixel relationship for the initial subset of points being used. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineOptions.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the FitLineOptions class.
            </summary>
            <param name="pixelRadius">The neighborhood pixel relationship for the initial subset of points being used. 
            </param>
            <param name="minimumScore">The required quality of the fitted line. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineOptions.Equals(NationalInstruments.Vision.Analysis.FitLineOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitLineOptions.
            </summary>
            <param name="other">
            A FitLineOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitLineOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FitLineOptions and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitLineOptions.MaximumIterations">
            <summary>
            Gets or sets the number of refinement iterations you allow the function to perform on the initial subset of points. 
            </summary>
            <value>The default value is 0.
            </value>
            <remarks>
            You must allow at least one iteration. If this property is set to 0, the method will perform the number of points -2 refinement iterations.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitLineOptions.PixelRadius">
            <summary>
            Gets or sets the neighborhood pixel relationship for the initial subset of points being used. 
            </summary>
            <value>The default value is 3.0.
            </value>
            <remarks>
            During refinement iterations the function ignores points that are farther from the line than <paramref name="PixelRadius"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitLineOptions.MinimumScore">
            <summary>
            Gets or sets the required quality of the fitted line. 
            </summary>
            <value>The default value is 900.0.
            </value>
            <remarks>
            Acceptable values range from 0 to 1,000. A score of 1,000 indicates a perfect fit. 
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LineEquation">
            <summary>
            Defines the three coefficients of the equation in the normal form (ax+by+c=0) of a line.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineEquation.#ctor">
            <summary>
            Initializes a new instance of the LineEquation class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineEquation.Equals(NationalInstruments.Vision.Analysis.LineEquation)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineEquation.
            </summary>
            <param name="other">
            A LineEquation instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineEquation.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineEquation.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LineEquation
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineEquation.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineEquation.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineEquation.C">
            <summary>
            Gets or sets the c coefficient of the line equation. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineEquation.B">
            <summary>
            Gets or sets the b coefficient of the line equation. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineEquation.A">
            <summary>
            Gets or sets the a coefficient of the line equation. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FitLineReport">
            <summary>
            Provides the line best representing a set of points.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineReport.#ctor">
            <summary>
            Initializes a new instance of the FitLineReport class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineReport.Equals(NationalInstruments.Vision.Analysis.FitLineReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitLineReport.
            </summary>
            <param name="other">
            A FitLineReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FitLineReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FitLineReport and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FitLineReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitLineReport.PointsUsed">
            <summary>
            Gets or sets an array returning a subset of the points passed to FitLine that were used to fit the line. 
            </summary>
            <value>
            </value>
            <remarks>
            Some points may be excluded based on the MinimumScore specified.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitLineReport.Error">
            <summary>
            Gets or sets the least-square error of the fitted line to the entire set of points.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitLineReport.Valid">
            <summary>
            Gets or sets whether the MinimumScore was attained within the given MaximumIterations.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitLineReport.Equation">
            <summary>
            Gets or sets the equation of the best line. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FitLineReport.LineSegment">
            <summary>
            Gets or sets the line that represents the intersection of the line equation and the bounding rectangle of the input points.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ContourPoint">
            <summary>
            Describes a point along an edge segment.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourPoint.#ctor">
            <summary>
            Initializes a new instance of the ContourPoint class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourPoint.Equals(NationalInstruments.Vision.Analysis.ContourPoint)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourPoint.
            </summary>
            <param name="other">
            A ContourPoint instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourPoint.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourPoint.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ContourPoint and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourPoint.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourPoint.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourPoint.YDisplacement">
            <summary>
            Gets or sets the y displacement of the current edge pixel from a cubic spline fit of the current edge segment. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourPoint.XDisplacement">
            <summary>
            Gets or sets the x displacement of the current edge pixel from a cubic spline fit of the current edge segment.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourPoint.Curvature">
            <summary>
            Gets or sets the change in slope at this edge point of the segment. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourPoint.Point">
            <summary>
            Gets or sets the value of the coordinate point in the image. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SegmentReport">
            <summary>
            Contains information about a segment.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SegmentReport.#ctor">
            <summary>
            Initializes a new instance of the SegmentReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SegmentReport.Equals(NationalInstruments.Vision.Analysis.SegmentReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SegmentReport.
            </summary>
            <param name="other">
            A SegmentReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SegmentReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SegmentReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SegmentReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SegmentReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SegmentReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SegmentReport.Weight">
            <summary>
            Gets or sets the significance of the edge in terms of the gray values that constitute the edge. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SegmentReport.IsOpen">
            <summary>
            Gets or sets whether a segment is open. When <see langword="true"/>, 
            the segment is open. When <see langword="false"/>, the segment is closed. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SegmentReport.Points">
            <summary>
            Gets or sets the points in the segment.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions">
            <summary>
            Provides the location, amplitude, and second derivative of peaks or valleys in the input array. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.#ctor">
            <summary>
            Initializes a new instance of the DetectPeaksOrValleysOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DetectPeaksOrValleysOptions class.
            </summary>
            <param name="width">
            The number of consecutive data points to use in the quadratic least-squares fit. The value must be greater than or equal to 3 but should be no larger than one-quarter of the approximate width of the peaks or valleys. Large widths may reduce the apparent amplitude and shift the apparent location of peaks.
            This parameter has a default value of 3.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the DetectPeaksOrValleysOptions class.
            </summary>
            <param name="width">
            The number of consecutive data points to use in the quadratic least-squares fit. The value must be greater than or equal to 3 but should be no larger than one-quarter of the approximate width of the peaks or valleys. Large widths may reduce the apparent amplitude and shift the apparent location of peaks.
            This parameter has a default value of 3.
            </param>
            <param name="threshold">
            Rejects peaks or valleys that are too small. Any peak found with a fitted amplitude that is less than threshold is ignored. Valleys are ignored if the fitted trough is greater than threshold.
            This parameter has a default value of 0.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.Equals(NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DetectPeaksOrValleysOptions.
            </summary>
            <param name="other">
            A DetectPeaksOrValleysOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DetectPeaksOrValleysOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DetectPeaksOrValleysOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.Width">
            <summary>
            Gets or sets the number of consecutive data points to use in the quadratic least-squares fit. 
            </summary>
            <value>
            The default value is 3.
            </value>
            <remarks>
            The property value must be greater than or equal to 3 but should be no larger than one-quarter of the approximate width of the peaks or valleys. Large widths may reduce the apparent amplitude and shift the apparent location of peaks.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DetectPeaksOrValleysOptions.Threshold">
            <summary>
            Gets or sets the fitted amplitude of peaks and valleys.
            </summary>
            <value>
            The default value is 0.0.
            </value>
            <remarks>
            Rejects peaks or valleys that are too small. Any peak found with a fitted amplitude that is less than Threshold is ignored. Valleys are ignored if the fitted trough is greater than Threshold.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.PeakValleyReportItem">
            <summary>
            Provides information about a particular peak or valley.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PeakValleyReportItem.#ctor">
            <summary>
            Initializes a new instance of the PeakValleyReportItem class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PeakValleyReportItem.Equals(NationalInstruments.Vision.Analysis.PeakValleyReportItem)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PeakValleyReportItem.
            </summary>
            <param name="other">
            A PeakValleyReportItem instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PeakValleyReportItem.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PeakValleyReportItem.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of PeakValleyReportItem
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PeakValleyReportItem.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PeakValleyReportItem.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PeakValleyReportItem.SecondDerivative">
            <summary>
            Gets or sets the second derivative of a peak or valley.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PeakValleyReportItem.Amplitude">
            <summary>
            Gets or sets the amplitude of a peak or valley.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PeakValleyReportItem.Location">
            <summary>
            Gets or sets the location of the peak or valley found in the current block of data. Locations 
            are reported in indices from the beginning of processing.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindEdgeOptions">
            <summary>
            Describes how you want to search for edges and the information the function overlays to the image.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.#ctor">
            <summary>
            Initializes a new instance of the FindEdgeOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.RakeDirection)">
            <summary>
            Initializes a new instance of the FindEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.RakeDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the FindEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.RakeDirection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.RakeDirection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the function overlays the locations of the edges found on the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.RakeDirection,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the function overlays the locations of the edges found on the image.
            </param>
            <param name="showResult">A Boolean indicating whether the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.Equals(NationalInstruments.Vision.Analysis.FindEdgeOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindEdgeOptions.
            </summary>
            <param name="other">
            A FindEdgeOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindEdgeOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindEdgeOptions and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.StraightEdgeOptions">
            <summary>
            Gets or sets the options used to fit a line in the ROI.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.EdgeOptions">
            <summary>
            Gets or sets the edge detection options along a single search line. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.OverlayGroupName">
            <summary>
            Gets or sets the overlay group name to assign to the overlays. 
            </summary>
            <value>
            The default value is blank.
            Set this element to <see langword="null"/> to add overlays to the default group. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.ResultColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the results. 
            </summary>
            <value>The default value is R = 255, G = 0, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.SearchEdgesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search edges. 
            </summary>
            <value>The default value is R = 255, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.SearchLinesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search lines. 
            </summary>
            <value>The default value is R = 0, G = 0, and B = 255.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.SearchAreaColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search area. 
            </summary>
            <value>The default value is R = 0, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.ShowResult">
            <summary>
            Gets or sets whether the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </summary>
            <value>The default value is <see langword="true"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. When applicable, the function also overlays the location of any measurements made by the function. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.ShowEdgesFound">
            <summary>
            Gets or sets whether the function overlays the locations of the edges found on the image.
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>If <see langword="true"/>, the function overlays the locations of the edges found on the image. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.ShowSearchLines">
            <summary>
            Gets or sets whether the function overlays the search lines used to locate the edges on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.ShowSearchArea">
            <summary>
            Gets or sets whether the function overlays the search area on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeOptions.Direction">
            <summary>
            Gets or sets the direction to search in the ROI. 
            </summary>
            <value>The default value is LeftToRight.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions">
            <summary>
            Describes how you want to search for Circular edges and the information the function
            overlays to the image.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.#ctor">
            <summary>
            Initializes a new instance of the FindCircularEdgeOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.SpokeDirection)">
            <summary>
            Initializes a new instance of the FindCircularEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.SpokeDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the FindCircularEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.SpokeDirection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindCircularEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.SpokeDirection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindCircularEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the function overlays the locations of the edges found on the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.SpokeDirection,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindCircularEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the function overlays the locations of the edges found on the image.
            </param>
            <param name="showResult">A Boolean indicating whether the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.Equals(NationalInstruments.Vision.Analysis.FindCircularEdgeOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindCircularEdgeOptions.
            </summary>
            <param name="other">
            A FindCircularEdgeOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindCircularEdgeOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindCircularEdgeOptions and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.EdgeOptions">
            <summary>
            Gets or sets the edge detection options along a single search line. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.OverlayGroupName">
            <summary>
            Gets or sets the overlay group name to assign to the overlays. 
            </summary>
            <value>
            The default value is blank.
            Set this element to <see langword="null"/> to add overlays to the default group. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.ResultColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the results. 
            </summary>
            <value>The default value is R = 255, G = 0, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.SearchEdgesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search edges. 
            </summary>
            <value>The default value is R = 255, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.SearchLinesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search lines. 
            </summary>
            <value>The default value is R = 0, G = 0, and B = 255.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.SearchAreaColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search area. 
            </summary>
            <value>The default value is R = 0, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.ShowResult">
            <summary>
            Gets or sets whether the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </summary>
            <value>The default value is <see langword="true"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. When applicable, the function also overlays the location of any measurements made by the function. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.ShowEdgesFound">
            <summary>
            Gets or sets whether the function overlays the locations of the edges found on the image.
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>If <see langword="true"/>, the function overlays the locations of the edges found on the image. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.ShowSearchLines">
            <summary>
            Gets or sets whether the function overlays the search lines used to locate the edges on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.ShowSearchArea">
            <summary>
            Gets or sets whether the function overlays the search area on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeOptions.Direction">
            <summary>
            Gets or sets the direction to search in the ROI. 
            </summary>
            <value>The default value is LeftToRight.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions">
            <summary>
            Describes how you want to search for edges and the information the function
            overlays to the image using Annulus ROI.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.#ctor">
            <summary>
            Initializes a new instance of the FindConcentricEdgeOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.ConcentricRakeDirection)">
            <summary>
            Initializes a new instance of the FindConcentricEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.ConcentricRakeDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the FindConcentricEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.ConcentricRakeDirection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindConcentricEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.ConcentricRakeDirection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindConcentricEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the function overlays the locations of the edges found on the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.ConcentricRakeDirection,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindConcentricEdgeOptions class.
            </summary>
            <param name="direction">The direction to search in the ROI. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the function overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the function overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the function overlays the locations of the edges found on the image.
            </param>
            <param name="showResult">A Boolean indicating whether the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.Equals(NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindConcentricEdgeOptions.
            </summary>
            <param name="other">
            A FindConcentricEdgeOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindConcentricEdgeOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindConcentricEdgeOptions and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.EdgeOptions">
            <summary>
            Gets or sets the edge detection options along a single search line. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.OverlayGroupName">
            <summary>
            Gets or sets the overlay group name to assign to the overlays. 
            </summary>
            <value>
            The default value is blank.
            Set this element to <see langword="null"/> to add overlays to the default group. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.ResultColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the results. 
            </summary>
            <value>The default value is R = 255, G = 0, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.SearchEdgesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search edges. 
            </summary>
            <value>The default value is R = 255, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.SearchLinesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search lines. 
            </summary>
            <value>The default value is R = 0, G = 0, and B = 255.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.SearchAreaColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search area. 
            </summary>
            <value>The default value is R = 0, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.ShowResult">
            <summary>
            Gets or sets whether the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </summary>
            <value>The default value is <see langword="true"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. When applicable, the function also overlays the location of any measurements made by the function. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.ShowEdgesFound">
            <summary>
            Gets or sets whether the function overlays the locations of the edges found on the image.
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>If <see langword="true"/>, the function overlays the locations of the edges found on the image. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.ShowSearchLines">
            <summary>
            Gets or sets whether the function overlays the search lines used to locate the edges on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.ShowSearchArea">
            <summary>
            Gets or sets whether the function overlays the search area on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeOptions.Direction">
            <summary>
            Gets or sets the direction to search in the ROI. 
            </summary>
            <value>The default value is Counter Clockwise.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions">
            <summary>
            Specifies the options used to detect Circular edges.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.#ctor">
            <summary>
            Initializes a new instance of the CircularEdgeFitOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.#ctor(NationalInstruments.Vision.Analysis.RakeProcessType)">
            <summary>
            Initializes a new instance of the CircularEdgeFitOptions class.
            </summary>
            <param name="processType">
            Specifies the Rake Process type to to find the edge.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.Equals(NationalInstruments.Vision.Analysis.CircularEdgeFitOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircularEdgeFitOptions.
            </summary>
            <param name="other">
            A CircularEdgeFitOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircularEdgeFitOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CircularEdgeFitOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.ProcessType">
            <summary>
            Gets or sets processType
            </summary>
            <value>
            The default is GetFirstEdges.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.MaxPixelRadius">
            <summary>
            Gets or sets maxPixelRadius
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircularEdgeFitOptions.StepSize">
            <summary>
            Gets or sets stepSize
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions">
            <summary>
            Specifies the options used to detect Straight edges using Annulus ROI.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.#ctor">
            <summary>
            Initializes a new instance of the ConcentricEdgeFitOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.#ctor(NationalInstruments.Vision.Analysis.RakeProcessType)">
            <summary>
            Initializes a new instance of the ConcentricEdgeFitOptions class.
            </summary>
            <param name="processType">
            Specifies the Rake Process type to to find the edge.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.Equals(NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ConcentricEdgeFitOptions.
            </summary>
            <param name="other">
            A ConcentricEdgeFitOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ConcentricEdgeFitOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ConcentricEdgeFitOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.ProcessType">
            <summary>
            Gets or sets processType
            </summary>
            <value>
            The default is GetFirstEdges.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.MaxPixelRadius">
            <summary>
            Gets or sets maxPixelRadius
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConcentricEdgeFitOptions.StepSize">
            <summary>
            Gets or sets stepSize
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.StraightEdgeOptions">
            <summary>
            Specifies the options used to detect straight edges.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeOptions.#ctor">
            <summary>
            Initializes a new instance of the StraightEdgeOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.StraightEdgeSearchMode)">
            <summary>
            Initializes a new instance of the StraightEdgeOptions class.
            </summary>
            <param name="searchMode">
            Specifies the method used to find the straight edge.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.StraightEdgeSearchMode,System.UInt32)">
            <summary>
            Initializes a new instance of the StraightEdgeOptions class.
            </summary>
            <param name="searchMode">
            Specifies the method used to find the straight edge.
            </param>
            <param name="numberOfLines">
            Specifies the number of straight edges to find. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeOptions.Equals(NationalInstruments.Vision.Analysis.StraightEdgeOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified StraightEdgeOptions.
            </summary>
            <param name="other">
            A StraightEdgeOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified StraightEdgeOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of StraightEdgeOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.HoughIterations">
            <summary>
            Gets or sets the number of iterations used in the Hough-based method.
            </summary>
            <value>
            The default is 5.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.MinimumCoverage">
            <summary>
            Gets or sets the minimum number of points as a percentage of the number of search lines that need to be included in the detected straight edge.
            </summary>
            <value>
            The default is 25.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.MinimumSignalToNoiseRatio">
            <summary>
            Gets or sets the minimum signal to noise ratio (SNR) of the edge points used to fit the straight edge.
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.StepSize">
            <summary>
            Gets or sets the gap in pixels between the search lines used with the rake-based methods. 
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.AngleTolerance">
            <summary>
            Gets or sets the expected angular accuracy of the straight edge.
            </summary>
            <value>
            The default is 1 degree.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.AngleRange">
            <summary>
            Gets or sets the +/- range around the orientation within which the straight edge is expected to be found. 
            </summary>
            <value>
            The default is 10 degrees.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.Orientation">
            <summary>
            Gets or sets the angle at which the straight edge is expected to be found. 
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.ScoreRange">
            <summary>
            Gets or sets the range of scores of a detected edge.
            </summary>
            <value>
            The default is (10, 1000).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.SearchMode">
            <summary>
            Gets or sets the method used to find the straight edge. 
            </summary>
            <value>
            The default is BestProjectionEdge.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.NumberOfLines">
            <summary>
            Gets or sets the number of straight edges to find.
            </summary>
            <value>
            The default is 1.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.StraightEdgeReportItem">
            <summary>
            Contains information about the found straight edge(s).
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.#ctor">
            <summary>
            Initializes a new instance of the StraightEdgeReportItem class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.Equals(NationalInstruments.Vision.Analysis.StraightEdgeReportItem)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified StraightEdgeReportItem.
            </summary>
            <param name="other">
            A StraightEdgeReportItem instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified StraightEdgeReportItem.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of StraightEdgeReportItem and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.EdgesUsed">
            <summary>
            Gets or sets an array of edges that were used to determine the straight line. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.CalibrationValid">
            <summary>
            Gets or sets whether the calibration data for the straight edge is valid. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.AverageSignalToNoiseRatio">
            <summary>
            Gets or sets the average signal to noise ratio (SNR) of the detected edge.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.Straightness">
            <summary>
            Gets or sets the straightness value of the detected straight edge. Straightness is defined as the root mean squared error of the fitted line that represents the detected straight edge. A value of 0 indicates a perfectly straight line. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.Score">
            <summary>
            Gets or sets the score of the detected edge. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.CalibratedAngle">
            <summary>
            Gets or sets the angle of the found edge using real-world coordinates. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.Angle">
            <summary>
            Gets or sets the angle of the found edge using the pixel coordinates.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.CalibratedStraightEdge">
            <summary>
            Gets or sets the end points of the detected straight edge in real-world coordinates. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReportItem.StraightEdge">
            <summary>
            Gets or sets the end points of the detected straight edge in pixel coordinates. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindCircularEdgeReport">
            <summary>
            Provides information describing the circular edges found.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.#ctor">
            <summary>
            Initializes a new instance of the FindCircularEdgeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.Equals(NationalInstruments.Vision.Analysis.FindCircularEdgeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindCircularEdgeReport.
            </summary>
            <param name="other">
            A FindCircularEdgeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindCircularEdgeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindCircularEdgeReport and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.Center">
            <summary>
            Gets or sets the Center
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.CenterCalibrated">
            <summary>
            Gets or sets the CenterCalibrated
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.Radius">
            <summary>
            Gets or sets the Radius
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.RadiusCalibrated">
            <summary>
            Gets or sets the RadiusCalibrated
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.AvgSNR">
            <summary>
            Gets or sets the avgSNR
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.AvgStrength">
            <summary>
            Gets or sets the AvgStrength
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.Roundness">
            <summary>
            Gets or sets the Roundness
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindCircularEdgeReport.CircleFound">
            <summary>
            Gets or sets the circleFound
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport">
            <summary>
            Provides information describing the straight edges found using Annulus ROI.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.#ctor">
            <summary>
            Initializes a new instance of the FindCircularEdgeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.Equals(NationalInstruments.Vision.Analysis.FindConcentricEdgeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindConcentricEdgeReport.
            </summary>
            <param name="other">
            A FindConcentricEdgeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindConcentricEdgeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindConcentricEdgeReport and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.StartPt">
            <summary>
            Gets or sets the StartPt
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.EndPt">
            <summary>
            Gets or sets the EndPt
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.StartPtCalibrated">
            <summary>
            Gets or sets the StartPtCalibrated
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.EndPtCalibrated">
            <summary>
            Gets or sets the EndPtCalibrated
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.Angle">
            <summary>
            Gets or sets the Angle
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.AngleCalibrated">
            <summary>
            Gets or sets the AngleCalibrated
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.Straightness">
            <summary>
            Gets or sets the straightness
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.AvgSNR">
            <summary>
            Gets or sets the avgSNR
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.AvgStrength">
            <summary>
            Gets or sets the avgStrength
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindConcentricEdgeReport.LineFound">
            <summary>
            Gets or sets the LineFound
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindEdgeReport">
            <summary>
            Provides information describing the straight edges found.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeReport.#ctor">
            <summary>
            Initializes a new instance of the FindEdgeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeReport.Equals(NationalInstruments.Vision.Analysis.FindEdgeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindEdgeReport.
            </summary>
            <param name="other">
            A FindEdgeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindEdgeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindEdgeReport and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindEdgeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindEdgeReport.StraightEdges">
            <summary>
            Gets or sets a collection of straight edges detected. 
            </summary>
            <value>
            </value>
            <remarks>
            The number of straight edges detected is determined by <see cref="P:NationalInstruments.Vision.Analysis.StraightEdgeOptions.NumberOfLines" crefType="Unqualified"/>.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.AxisReport">
            <summary>
            Specifies the coordinates of the main axis and the secondary axis of a coordinate system.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AxisReport.#ctor">
            <summary>
            Initializes a new instance of the AxisReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AxisReport.Equals(NationalInstruments.Vision.Analysis.AxisReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EqualsReport.
            </summary>
            <param name="other">
            An EqualsReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AxisReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EqualsReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of EqualsReport
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AxisReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.AxisReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AxisReport.MainAxis">
            <summary>
            Gets or sets the end of the main axis, which is the result of the computation of the intersection of the main axis with the rectangular search area. 
            </summary>
            <value>The default value is (0,0) - (0,0).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.AxisReport.SecondaryAxis">
            <summary>
            Gets or sets the end of the secondary axis, which is the result of the computation of the intersection of the secondary axis with the rectangular search area. 
            </summary>
            <value>The default value is (0,0) - (0,0).
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindTransformRectOptions">
            <summary>
            Describes how you want the function to search for edges and the information the function overlays to the image.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.#ctor">
            <summary>
            Initializes a new instance of the FindTransformRectOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection)">
            <summary>
            Initializes a new instance of the FindTransformRectOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the FindTransformRectOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the method overlays the search area on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindTransformRectOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the method overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the method overlays the search lines used to locate the edges on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindTransformRectOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the method overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the method overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the method overlays the locations of the edges found on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindTransformRectOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the method overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the method overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the method overlays the locations of the edges found on the image. 
            </param>
            <param name="showResult">A Boolean indicating whether the method overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.Equals(NationalInstruments.Vision.Analysis.FindTransformRectOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindTransformRectOptions.
            </summary>
            <param name="other">
            A FindTransformRectOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindTransformRectOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindTransformRectOptions and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.StraightEdgeOptions">
            <summary>
            Gets or sets the options used to fit a line in the ROI.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.EdgeOptions">
            <summary>
            Gets or sets the edge detection options along a single search line. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.OverlayGroupName">
            <summary>
            Gets or sets the overlay group name to assign to the overlays. Set this element to <see langword="null"/> to add overlays to the default group. 
            </summary>
            <value>The default value is blank.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.ResultColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the results. 
            </summary>
            <value>The default RGB values are R = 255, G = 0, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.SearchEdgesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search edges. 
            </summary>
            <value>The default RGB values are R = 255, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.SearchLinesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search lines. 
            </summary>
            <value>The default RGB values are R = 0, G = 0, and B = 255.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.SearchAreaColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search area. 
            </summary>
            <value>The default RGB values are R = 0, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.ShowResult">
            <summary>
            Gets or sets whether the method overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </summary>
            <value>The default value is <see langword="true"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. When applicable, the function also overlays the location of any measurements made by the function. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.ShowEdgesFound">
            <summary>
            Gets or sets whether the method overlays the locations of the edges found on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the locations of the edges found on the image. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.ShowSearchLines">
            <summary>
            Gets or sets whether the function overlays the search lines used to locate the edges on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the search lines used to locate the edges on the image. If you do not want
             this information overlaid onto the image, set this element to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.ShowSearchArea">
            <summary>
            Gets or sets whether the function overlays the search area on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the search area on the image. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectOptions.Direction">
            <summary>
            Gets or sets the direction and orientation in which the function searches for the primary axis. 
            </summary>
            <value>The default value is LeftToRightDirect.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindTransformRectsOptions">
            <summary>
            Describes how you want the function to search for edges and the information the function overlays to the image.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.#ctor">
            <summary>
            Initializes a new instance of the FindTransformRectsOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection)">
            <summary>
            Initializes a new instance of the FindTransformRectsOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the FindTransformRectsOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the method overlays the search area on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindTransformRectsOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the method overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the method overlays the search lines used to locate the edges on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindTransformRectsOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the method overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the method overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the method overlays the locations of the edges found on the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.#ctor(NationalInstruments.Vision.Analysis.FindReferenceDirection,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FindTransformRectsOptions class.
            </summary>
            <param name="direction">The direction and orientation in which the method searches for the primary axis. 
            </param>
            <param name="showSearchArea">A Boolean indicating whether the method overlays the search area on the image. 
            </param>
            <param name="showSearchLines">A Boolean indicating whether the method overlays the search lines used to locate the edges on the image. 
            </param>
            <param name="showEdgesFound">A Boolean indicating whether the method overlays the locations of the edges found on the image. 
            </param>
            <param name="showResult">A Boolean indicating whether the method overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.Equals(NationalInstruments.Vision.Analysis.FindTransformRectsOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindTransformRectsOptions.
            </summary>
            <param name="other">
            A FindTransformRectsOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindTransformRectsOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindTransformRectsOptions and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.SecondaryStraightEdgeOptions">
            <summary>
            Gets or sets the options used to fit a line in the secondary ROI.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.PrimaryStraightEdgeOptions">
            <summary>
            Gets or sets the options used to fit a line in the primary ROI.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.SecondaryEdgeOptions">
            <summary>
            Gets or sets the parameters used to compute the edge gradient information and detect the edges for the secondary ROI. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.PrimaryEdgeOptions">
            <summary>
            Gets or sets the parameters used to compute the edge gradient information and detect the edges for the primary ROI. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.OverlayGroupName">
            <summary>
            Gets or sets the overlay group name to assign to the overlays. 
            </summary>
            <value>The default value is blank.
            </value>
            <remarks>
            Set this element to <see langword="null"/> to add overlays to the default group. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.ResultColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the results. 
            </summary>
            <value>The default RGB values are R = 255, G = 0, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.SearchEdgesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search edges. 
            </summary>
            <value>The default RGB values are R = 255, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.SearchLinesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search lines. 
            </summary>
            <value>The default RGB values are R = 0, G = 0, and B = 255.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.SearchAreaColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search area. 
            </summary>
            <value>The default RGB values are R = 0, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.ShowResult">
            <summary>
            Gets or sets whether the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </summary>
            <value>The default value is <see langword="true"/>.
            </value>
            <remarks>
            If <see langword="true"/> , the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. When applicable, the function also overlays the location of any measurements made by the function. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.ShowEdgesFound">
            <summary>
            Gets or sets whether the method overlays the locations of the edges found on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>
            If <see langword="true"/> the method overlays the locations of the edges found on the image. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.ShowSearchLines">
            <summary>
            Gets or sets whether the function overlays the search lines used to locate the edges on the image.
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the search lines used to locate the edges on the image. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.ShowSearchArea">
            <summary>
            Gets or sets whether the function overlays the search area on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the search area on the image. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformRectsOptions.Direction">
            <summary>
            Gets or sets the direction and orientation in which the function searches for the primary axis. 
            </summary>
            <value>The default value is LeftToRightDirect.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FindTransformReport">
            <summary>
            Provides information about a coordinate transform.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformReport.#ctor">
            <summary>
            Initializes a new instance of the FindTransformReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformReport.Equals(NationalInstruments.Vision.Analysis.FindTransformReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindTransformReport.
            </summary>
            <param name="other">
            A FindTransformReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FindTransformReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FindTransformReport and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FindTransformReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformReport.AxisReport">
            <summary>
            Gets or sets the axes detected.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FindTransformReport.Transform">
            <summary>
            Gets or sets the CoordinateTransform detected.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SearchLineInfo">
            <summary>
            Describes a search line used for finding a straight edge.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchLineInfo.#ctor">
            <summary>
            Initializes a new instance of the SearchLineInfo class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchLineInfo.Equals(NationalInstruments.Vision.Analysis.SearchLineInfo)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SearchLineInfo.
            </summary>
            <param name="other">
            A SearchLineInfo instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchLineInfo.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SearchLineInfo.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SearchLineInfo
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchLineInfo.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SearchLineInfo.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SearchLineInfo.EdgeReport">
            <summary>
            Gets or sets information about the edges found in this search line. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SearchLineInfo.Line">
            <summary>
            Gets or sets the coordinates of the search line.
            </summary>
            <value>
            </value>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CVI_Array`1.#ctor">
            <summary>
            Constructs a CVI_Array with no elements
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CVI_Array`1.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Constructs a CVI_Array for accessing the cviPtr for count number of elements
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CVI_Array`1.Item(System.Int32)">
            <summary>
            Accesses an item in the array
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CVI_Array`1.Equals(NationalInstruments.Vision.Analysis.CVI_Array{`0})">
            <summary>
            Test equality with another cvi array
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CVI_Array`1.Count">
            <summary>
            Provides the number of elements available in this array
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport">
            <summary>
            Provides information describing the rake used by the method and the edges the method calculated with the rake.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the FirstEdgeRakeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport.#ctor">
            <summary>
            Initializes a new instance of the FirstEdgeRakeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport.Equals(NationalInstruments.Vision.Analysis.FirstEdgeRakeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FirstEdgeRakeReport.
            </summary>
            <param name="other">
            A FirstEdgeRakeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FirstEdgeRakeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of RakeReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FirstEdgeRakeReport.FirstEdges">
            <summary>
            Gets the first edges
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RakeReport">
            <summary>
            Provides information describing the rake used by the method and the edges the method calculated with the rake.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RakeReport.#ctor">
            <summary>
            Initializes a new instance of the RakeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RakeReport.Equals(NationalInstruments.Vision.Analysis.RakeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RakeReport.
            </summary>
            <param name="other">
            A RakeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RakeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RakeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of RakeReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RakeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RakeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RakeReport.SearchLines">
            <summary>
            Gets or sets the search lines used for edge detection. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RakeReport.LastEdges">
            <summary>
            Gets or sets the last edge point detected along each search line in the ROI. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RakeReport.FirstEdges">
            <summary>
            Gets or sets the first edge point detected along each search line in the ROI. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SimpleEdgeOptions">
            <summary>
            Describes how the method finds edges. 
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.#ctor">
            <summary>
            Initializes a new instance of the SimpleEdgeOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.EdgeProcess)">
            <summary>
            Initializes a new instance of the SimpleEdgeOptions class.
            </summary>
            <param name="process">
            Determines which edges the method looks for.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.#ctor(NationalInstruments.Vision.Analysis.EdgeProcess,System.Boolean)">
            <summary>
            Initializes a new instance of the SimpleEdgeOptions class.
            </summary>
            <param name="process">
            Determines which edges the method looks for.
            </param>
            <param name="subPixel">
            Set this element to <see langword="true"/> to find edges with subpixel accuracy by 
            interpolating between points to find the crossing of the given threshold. Set this 
            parameter to <see langword="false"/> to report an edge as the point nearest the threshold crossing. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.Equals(NationalInstruments.Vision.Analysis.SimpleEdgeOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SimpleEdgeOptions.
            </summary>
            <param name="other">
            A SimpleEdgeOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SimpleEdgeOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SimpleEdgeOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.SubPixel">
            <summary>
            Gets or sets whether to find edges with subpixel accuracy. Set this parameter to <see langword="true"/> to find edges by interpolating between points to find the crossing of the given threshold. Set this parameter to <see langword="true"/> to report an edge as the point nearest the threshold crossing. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.Process">
            <summary>
            Gets or sets which edges the method looks for. 
            </summary>
            <value>
            The default is All.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.Hysteresis">
            <summary>
            Gets or sets a value that helps determine edges in noisy images. If a pixel value crosses 
            the given threshold value but does not exceed the value by the value of hysteresis, the 
            method does not consider the pixel to be part of an edge. 
            </summary>
            <value>
            The default is 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.Threshold">
            <summary>
            Gets or sets the pixel value at which an edge occurs. 
            </summary>
            <value>
            The default is 128.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SimpleEdgeOptions.Type">
            <summary>
            Gets or sets how the method evaluates the threshold and hysteresis values.
            </summary>
            <value>
            The default is Absolute.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.StraightEdgeReport">
            <summary>
            Contains information about the found straight edge(s).
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReport.#ctor">
            <summary>
            Initializes a new instance of the StraightEdgeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReport.Equals(NationalInstruments.Vision.Analysis.StraightEdgeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified StraightEdgeReport.
            </summary>
            <param name="other">
            A StraightEdgeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified StraightEdgeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of StraightEdgeReport and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.StraightEdgeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReport.SearchLines">
            <summary>
            Gets or sets an array of all search lines used in the detection. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.StraightEdgeReport.StraightEdges">
            <summary>
            Gets or sets an array of found straight edges.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SpokeReport">
            <summary>
            Contains information about the edges the function calculated with the spoke.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SpokeReport.#ctor">
            <summary>
            Initializes a new instance of the SpokeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SpokeReport.Equals(NationalInstruments.Vision.Analysis.SpokeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SpokeReport.
            </summary>
            <param name="other">
            A SpokeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SpokeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SpokeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SpokeReport and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SpokeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SpokeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SpokeReport.SearchLines">
            <summary>
            Gets or sets the coordinate location of each of the spoke lines used by the method. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SpokeReport.LastEdges">
            <summary>
            Gets or sets the coordinate location of all edges detected as last edges. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SpokeReport.FirstEdges">
            <summary>
            Gets or sets the coordinate location of all edges detected as first edges.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColorInformation">
            <summary>
            Provides information about the color features contained in a region of an image.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorInformation.#ctor">
            <summary>
            Initializes a new instance of a ColorInformation class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorInformation.#ctor(System.Collections.ObjectModel.Collection{System.Double})">
            <summary>
            Initializes a new instance of a ColorInformation class.
            </summary>
            <param name="information">
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorInformation.Equals(NationalInstruments.Vision.Analysis.ColorInformation)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorInformation.
            </summary>
            <param name="other">
            A ColorInformation instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorInformation.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorInformation.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ColorInformation and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorInformation.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorInformation.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorInformation.Information">
            <summary>
            Gets or sets an array of color information that represents the color spectrum analysis of a region of an image in a compact form. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorInformation.Saturation">
            <summary>
            Gets or sets the saturation level the method uses to learn the color information. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DrawTextOptions">
            <summary>
            Specifies how text is drawn.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DrawTextOptions.#ctor">
            <summary>
            Initializes a new instance of the DrawTextOptions class.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DrawTextOptions.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the DrawTextOptions class.
            </summary>
            <param name="fontName">The name of the font face to use.
            </param>
            <param name="fontSize">The size of the font.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DrawTextOptions.#ctor(System.String,System.Int32,NationalInstruments.Vision.Analysis.FontColor)">
            <summary>
            Initializes a new instance of the DrawTextOptions class.
            </summary>
            <param name="fontName">The name of the font face to use.
            </param>
            <param name="fontSize">The size of the font.
            </param>
            <param name="color">The color of the text.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DrawTextOptions.#ctor(System.String,System.Int32,NationalInstruments.Vision.Analysis.FontColor,NationalInstruments.Vision.HorizontalTextAlignment)">
            <summary>
            Initializes a new instance of the DrawTextOptions class.
            </summary>
            <param name="fontName">The name of the font face to use.
            </param>
            <param name="fontSize">The size of the font.
            </param>
            <param name="color">The color of the text.
            </param>
            <param name="alignment">The horizontal alignment of the text.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DrawTextOptions.Equals(NationalInstruments.Vision.Analysis.DrawTextOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DrawTextOptions.
            </summary>
            <param name="other">
            A DrawTextOptions  instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DrawTextOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DrawTextOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DrawTextOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DrawTextOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DrawTextOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DrawTextOptions.Color">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>
            The default is <see cref="F:NationalInstruments.Vision.Analysis.FontColor.White" crefType="Unqualified"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DrawTextOptions.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <value>
            The default is <see cref="F:NationalInstruments.Vision.HorizontalTextAlignment.Left" crefType="Unqualified"/>.
            </value>
            <remarks>
            You can use the following constants with this data type:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.HorizontalTextAlignment.Center" crefType="Unqualified"/>—Indicates that the origin point is in the center of the text. In other words, half of the text appears to the left of the origin and half is to the right of the origin.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.HorizontalTextAlignment.Left" crefType="Unqualified"/>—Indicates that the text appears to the left of the origin point.
            </description>
            		</item>
            		<item>
            			<description>
            				<see cref="F:NationalInstruments.Vision.HorizontalTextAlignment.Right" crefType="Unqualified"/>—Indicates that the text appears to the right of the origin point.
            </description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DrawTextOptions.TextDecoration">
            <summary>Gets or sets the formatting of the text.
            </summary>
            <value>The default value is false for bold, italic, underline, and strikeout.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DrawTextOptions.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>
            The default is 12.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DrawTextOptions.FontName">
            <summary>
            Gets or sets the name of the font face to use.
            </summary>
            <value>The default value is Arial.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CannyOptions">
            <summary>Gets or sets a description of filter parameters to use in the Canny algorithm.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CannyOptions.#ctor">
            <summary>
            Initializes a new instance of the CannyOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CannyOptions.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the CannyOptions class.
            </summary>
            <param name="sigma">The sigma of the Gaussian smoothing filter that the method applies to the image before edge detection.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CannyOptions.#ctor(System.Double,NationalInstruments.Vision.Range)">
            <summary>
            Initializes a new instance of the CannyOptions class.
            </summary>
            <param name="sigma">The sigma of the Gaussian smoothing filter that the method applies to the image before edge detection.
            </param>
            <param name="thresholdRange">The threshold range of the Gaussian filter that the method applies to the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CannyOptions.#ctor(System.Double,NationalInstruments.Vision.Range,System.Int32)">
            <summary>
            Initializes a new instance of the CannyOptions class.
            </summary>
            <param name="sigma">The sigma of the Gaussian smoothing filter that the method applies to the image before edge detection.
            </param>
            <param name="thresholdRange">The threshold range of the Gaussian filter that the method applies to the image. 
            </param>
            <param name="windowSize">The window size of the Gaussian filter that the method applies to the image. This value must be odd.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CannyOptions.Equals(NationalInstruments.Vision.Analysis.CannyOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CannyOptions.
            </summary>
            <param name="other">
            A CannyOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CannyOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CannyOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CannyOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CannyOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CannyOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CannyOptions.WindowSize">
            <summary>
            Gets or sets the window size of the Gaussian filter that the method applies to the image. This value must be odd.
            </summary>
            <value>
            The default value is 9.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CannyOptions.ThresholdRange">
            <summary>
            Gets or sets the threshold of pixel values in the image from which the edge detection algorithm chooses the seed or starting point of an edge segment.   
            </summary>
            <value>The minimum default value is 0.2. The maximum default value is 0.7. 
            </value>
            <remarks>
            The minimum property is multiplied by the maximum to define a lower threshold for all the pixels in an edge segment.  For the maximum property, you can choose values from 0 to 1.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CannyOptions.Sigma">
            <summary>
            Gets or sets the sigma of the Gaussian smoothing filter that the method applies to the image before edge detection.
            </summary>
            <value>
            The default value is 1.00.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LowPassOptions">
            <summary>
            Describes options for a non-linear filter.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LowPassOptions.#ctor">
            <summary>
            Initializes a new instance of the LowPassOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LowPassOptions.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the LowPassOptions class.
            </summary>
            <param name="width">
            The width of the rectangular neighborhood around the pixel on which the method operates. This number must be odd. 
            </param>
            <param name="height">
            The height of the rectangular neighborhood around the pixel on which the method operates. This number must be odd. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LowPassOptions.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the LowPassOptions class.
            </summary>
            <param name="width">
            The width of the rectangular neighborhood around the pixel on which the method operates. This number must be odd. 
            </param>
            <param name="height">
            The height of the rectangular neighborhood around the pixel on which the method operates. This number must be odd. 
            </param>
            <param name="tolerance">
            The maximum percentage variation allowed. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LowPassOptions.Equals(NationalInstruments.Vision.Analysis.LowPassOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LowPassOptions.
            </summary>
            <param name="other">
            A LowPassOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LowPassOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LowPassOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LowPassOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LowPassOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LowPassOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LowPassOptions.Tolerance">
            <summary>
            Gets or sets the maximum percentage variation allowed. 
            </summary>
            <value>
            The default is 40.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LowPassOptions.Height">
            <summary>
            Gets or sets the height of the rectangular neighborhood around the pixel on which the method operates. This number must be odd. 
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LowPassOptions.Width">
            <summary>
            Gets or sets the width of the rectangular neighborhood around the pixel on which the method operates. This number must be odd. 
            </summary>
            <value>
            The default is 3.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ShapeReport">
            <summary>
            Describes a match to a given template shape.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeReport.#ctor">
            <summary>
            Initializes a new instance of the ShapeReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeReport.Equals(NationalInstruments.Vision.Analysis.ShapeReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ShapeReport.
            </summary>
            <param name="other">
            A ShapeReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ShapeReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ShapeReport and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ShapeReport.Score">
            <summary>
            Gets or sets a value ranging between 1 and 1,000 that specifies how similar the object in the image is to the template. A score of 1,000 indicates a perfect match.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ShapeReport.Size">
            <summary>
            Gets or sets the size of the object in pixels. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ShapeReport.Centroid">
            <summary>
            Gets or sets the coordinate location of the centroid of the object.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ShapeReport.BoundingRectangle">
            <summary>
            Gets or sets the bounding rectangle of the object.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LcdOptions">
            <summary>
            Describes how an LCD is examined.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the LcdOptions class.
            </summary>
            <param name="litSegments">A Boolean indicating whether the segments are brighter than the background.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.#ctor(System.Boolean,System.Double)">
            <summary>Initializes a new instance of the LcdOptions class.
            </summary>
            <param name="litSegments">A Boolean indicating whether the segments are brighter than the background.
            </param>
            <param name="threshold">A threshold value for determining whether a segment is on or off.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.#ctor(System.Boolean,System.Double,System.Boolean)">
            <summary>Initializes a new instance of the LcdOptions class.
            </summary>
            <param name="litSegments">A Boolean indicating whether the segments are brighter than the background.
            </param>
            <param name="threshold">A threshold value for determining whether a segment is on or off.
            </param>
            <param name="sign">A Boolean indicating whether the function must read the sign of the indicator. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.#ctor(System.Boolean,System.Double,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the LcdOptions class.
            </summary>
            <param name="litSegments">A Boolean indicating whether the segments are brighter than the background.
            </param>
            <param name="threshold">A threshold value for determining whether a segment is on or off.
            </param>
            <param name="sign">A Boolean indicating whether the function must read the sign of the indicator. 
            </param>
            <param name="decimalPoint">A Boolean indicating whether to look for a decimal separator after each digit.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.Equals(NationalInstruments.Vision.Analysis.LcdOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LcdOptions.
            </summary>
            <param name="other">
            A LcdOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LcdOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LcdOptions and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdOptions.DecimalPoint">
            <summary>Gets or sets whether to look for a decimal separator after each digit.
            </summary>
            <value>
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdOptions.Sign">
            <summary>Gets or sets whether the function must read the sign of the indicator. 
            </summary>
            <value>
            The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdOptions.Threshold">
            <summary>
            Gets or sets a threshold value for determining whether a segment is on or off.</summary>
            <value>The default value is 8.0.
            </value>
            <remarks>
            A segment is on if the standard deviation of the pixels along a line profile across the segment is greater than threshold.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdOptions.LitSegments">
            <summary>
            Gets or sets whether the segments are brighter than the background.
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LcdSegments">
            <summary>
            Describes which segments of an LCD digit are on. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdSegments.#ctor">
            <summary>
            Initializes a new instance of the LcdSegements class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdSegments.Equals(NationalInstruments.Vision.Analysis.LcdSegments)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LcdSegments.
            </summary>
            <param name="other">
            A LcdSegments instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdSegments.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LcdSegments.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LcdSegments and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdSegments.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdSegments.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdSegments.A">
            <summary>
            Gets or sets whether the <format type="bold">a</format> segment is on.
            </summary>
            <remarks>
            The properties of the segments correspond to the actual position in the LCD, as shown in the following figure.
            <image src="segments.gif"/>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdSegments.B">
            <summary>
            Gets or sets whether the <format type="bold">b</format> segment is on.
            </summary>
            <remarks>
            The properties of the segments correspond to the actual position in the LCD, as shown in the following figure.
            <image src="segments.gif"/>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdSegments.C">
            <summary>
            Gets or sets whether the <format type="bold">c</format> segment is on.
            </summary>
            <remarks>
            The properties of the segments correspond to the actual position in the LCD, as shown in the following figure.
            <image src="segments.gif"/>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdSegments.D">
            <summary>
            Gets or sets whether the <format type="bold">d</format> segment is on.
            </summary>
            <remarks>
            The properties of the segments correspond to the actual position in the LCD, as shown in the following figure.
            <image src="segments.gif"/>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdSegments.E">
            <summary>
            Gets or sets whether the <format type="bold">e</format> segment is on.
            </summary>
            <remarks>
            The properties of the segments correspond to the actual position in the LCD, as shown in the following figure.
            <image src="segments.gif"/>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdSegments.F">
            <summary>
            Gets or sets whether the <format type="bold">f</format> segment is on.
            </summary>
            <remarks>
            The properties of the segments correspond to the actual position in the LCD, as shown in the following figure.
            <image src="segments.gif"/>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdSegments.G">
            <summary>
            Gets or sets whether the <format type="bold">g</format> segment is on.
            </summary>
            <remarks>
            The properties of the segments correspond to the actual position in the LCD, as shown in the following figure.
            <image src="segments.gif"/>
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LcdReport">
            <summary>
            Describes the state of an LCD.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdReport.#ctor">
            <summary>
            Initializes a new instance of the LcdReport option.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdReport.Equals(NationalInstruments.Vision.Analysis.LcdReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LcdReport.
            </summary>
            <param name="other">
            A LcdReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this  instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LcdReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LcdReport and equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LcdReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdReport.SegmentInfo">
            <summary>
            Gets or sets an array of LCDSegment structures describing which segments of each digit are on.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LcdReport.Text">
            <summary>The read LCD values as a string.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MeterArc">
            <summary>
            Describes the arc across which a meter sweeps.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterArc.#ctor">
            <summary>
            Initializes a new instance of the MeterArc class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterArc.Equals(NationalInstruments.Vision.Analysis.MeterArc)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MeterArc.
            </summary>
            <param name="other">
            A MeterArc instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterArc.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MeterArc.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MeterArc
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterArc.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterArc.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterArc.Dispose">
            <summary>
            Releases all resources used by the MeterArc. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MeterReport">
            <summary>
            Provides information about a meter.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterReport.#ctor">
            <summary>
            Initializes a new instance of the MeterReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterReport.Equals(NationalInstruments.Vision.Analysis.MeterReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MeterReport.
            </summary>
            <param name="other">
            A MeterReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MeterReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MeterReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MeterReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MeterReport.EndOfNeedle">
            <summary>
            Gets or sets the location of the endpoint of the needle.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MeterReport.Percentage">
            <summary>
            Gets or sets the current sweep position of the needle in comparison to the 
            maximum sweep position, expressed as a percentage. For example, a value of 
            100 indicates the needle is at the maximum sweep position.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LearnColorPatternOptions">
            <summary>
            Contains parameters used by the 
            <see cref="M:NationalInstruments.Vision.Analysis.Algorithms.LearnColorPattern(NationalInstruments.Vision.VisionImage)" crefType="Unqualified"/> 
            method to learn the template.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.#ctor">
            <summary>
            Initializes a new instance of the LearnColorPatternOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.#ctor(NationalInstruments.Vision.Analysis.LearnMode)">
            <summary>
            Initializes a new instance of the LearnColorPatternOptions class.
            </summary>
            <param name="learnMode">
            The invariance mode to use when learning the pattern.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.#ctor(NationalInstruments.Vision.Analysis.LearnMode,NationalInstruments.Vision.Analysis.ImageFeatureMode)">
            <summary>
            Initializes a new instance of the LearnColorPatternOptions class.
            </summary>
            <param name="learnMode">
            The invariance mode to use when learning the pattern.
            </param>
            <param name="featureMode">
            The color feature mode you want to use when setting up a color learn pattern. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.#ctor(NationalInstruments.Vision.Analysis.LearnMode,NationalInstruments.Vision.Analysis.ImageFeatureMode,NationalInstruments.Vision.Analysis.ColorIgnoreMode)">
            <summary>
            Initializes a new instance of the LearnColorPatternOptions class.
            </summary>
            <param name="learnMode">
            The invariance mode to use when learning the pattern.
            </param>
            <param name="featureMode">
            The color feature mode you want to use when setting up a color learn pattern. 
            </param>
            <param name="ignoreMode">
            Specifies whether black or white colors are excluded from the color features of the template image. Any color excluded during the learning process is also ignored from the template in the match phase. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.#ctor(NationalInstruments.Vision.Analysis.LearnMode,NationalInstruments.Vision.Analysis.ImageFeatureMode,NationalInstruments.Vision.Analysis.ColorIgnoreMode,System.Int32)">
            <summary>
            Initializes a new instance of the LearnColorPatternOptions class.
            </summary>
            <param name="learnMode">
            The invariance mode to use when learning the pattern.
            </param>
            <param name="featureMode">
            The color feature mode you want to use when setting up a color learn pattern. 
            </param>
            <param name="ignoreMode">
            Specifies whether black or white colors are excluded from the color features of the template image. Any color excluded during the learning process is also ignored from the template in the match phase. 
            </param>
            <param name="threshold">
            The threshold used to distinguish between two colors having the same hue values.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.Equals(NationalInstruments.Vision.Analysis.LearnColorPatternOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnColorPatternOptions.
            </summary>
            <param name="other">
            A LearnColorPatternOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LearnColorPatternOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LearnColorPatternOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.ColorsToIgnore">
            <summary>
            Gets or sets information about colors to ignore in the template during the learn phase.
            </summary>
            <value>
            The default is an empty set of spectrums, which indicates that nothing is ignored.
            </value>
            <remarks>
            Any color excluded during the learning process is also ignored from the template in the match phase. Use this property to exclude background colors from the learned template image.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.IgnoreMode">
            <summary>
            Gets or sets whether black or white colors are excluded from the color features of the template image. Any color excluded during the learning process is also ignored from the template in the match phase. 
            </summary>
            <value>
            The default is None.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.Threshold">
            <summary>
            Gets or sets the threshold used to distinguish between two colors having the same hue values.
            </summary>
            <value>
            The default is 80.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.FeatureMode">
            <summary>
            Gets or sets the color feature mode you want to use when setting up a color learn pattern. 
            </summary>
            <value>
            The default is ColorAndShape.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LearnColorPatternOptions.LearnMode">
            <summary>
            Gets or sets the invariance mode to use when learning the pattern.
            </summary>
            <value>
            The default is ShiftInformation.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MatchColorPatternOptions">
            <summary>
            Describes how you want the function to search for the color template image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.#ctor">
            <summary>
            Initializes a new instance of the MatchColorPatternOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.#ctor(NationalInstruments.Vision.Analysis.MatchMode)">
            <summary>
            Initializes a new instance of the MatchColorPatternOptions class.
            </summary>
            <param name="matchMode">
            The method to use when looking for the color pattern in the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.#ctor(NationalInstruments.Vision.Analysis.MatchMode,System.Int32)">
            <summary>
            Initializes a new instance of the MatchColorPatternOptions class.
            </summary>
            <param name="matchMode">
            The method to use when looking for the color pattern in the image. 
            </param>
            <param name="numberOfMatchesRequested">
            The number of valid matches expected. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.#ctor(NationalInstruments.Vision.Analysis.MatchMode,System.Int32,NationalInstruments.Vision.Analysis.ImageFeatureMode)">
            <summary>
            Initializes a new instance of the MatchColorPatternOptions class.
            </summary>
            <param name="matchMode">
            The method to use when looking for the color pattern in the image. 
            </param>
            <param name="numberOfMatchesRequested">
            The number of valid matches expected. 
            </param>
            <param name="featureMode">
            The features to use when looking for the color pattern in the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.#ctor(NationalInstruments.Vision.Analysis.MatchMode,System.Int32,NationalInstruments.Vision.Analysis.ImageFeatureMode,NationalInstruments.Vision.Analysis.ColorSensitivity)">
            <summary>
            Initializes a new instance of the MatchColorPatternOptions class.
            </summary>
            <param name="matchMode">
            The method to use when looking for the color pattern in the image. 
            </param>
            <param name="numberOfMatchesRequested">
            The number of valid matches expected. 
            </param>
            <param name="featureMode">
            The features to use when looking for the color pattern in the image. 
            </param>
            <param name="colorSensitivity">
            The sensitivity of the color information in the image. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.Equals(NationalInstruments.Vision.Analysis.MatchColorPatternOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchColorPatternOptions.
            </summary>
            <param name="other">
            A MatchColorPatternOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified MatchColorPatternOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of MatchColorPatternOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.RotationAngleRanges">
            <summary>
            Gets a collection of angle ranges, where each range specifies how much you expect the color template pattern to rotate in the image. Each range is specified by a lower angle and an upper angle, both of which are expressed in degrees.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.MinimumMatchScore">
            <summary>
            Gets or sets the smallest score a match must have to be considered valid.
            </summary>
            <value>
            The default is 800.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.NumberOfMatchesRequested">
            <summary>
            Gets or sets the number of valid matches expected. 
            </summary>
            <value>
            The default is 1.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.SubpixelAccuracy">
            <summary>
            Gets or sets whether the match results are returned with subpixel accuracy. This 
            option is ignored if FeatureMode is set to Color. Set this parameter to <see langword="true"/> 
            to return areas in the image that match the pattern area with subpixel accuracy. 
            </summary>
            <value>
            The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.MinimumContrast">
            <summary>
            Gets or sets the minimum contrast expected in the shape features of the color image.
            </summary>
            <value>
            The default is 10.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.MatchMode">
            <summary>
            Gets or sets the technique to use when looking for the color template pattern in the color image.
            </summary>
            <value>
            The default is ShiftInvariant.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.FeatureMode">
            <summary>
            Gets or sets the features to use when looking for the color template pattern in the color image. 
            </summary>
            <value>
            The default is ColorAndShape.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.ColorWeight">
            <summary>
            Gets or sets the percent contribution of the color score to the final color pattern matching score. Acceptable values range from 0 to 1000.
            </summary>
            <value>
            The default is 500, indicating that the match score uses an equal combination of the color and shape scores.
            </value>
            <remarks>
            The algorithm uses the color score weight for the final match ranking. For example, if you use a weight of 1000, the algorithm finds each match by using both color and shape information and then ranks the matches based on their color scores. If the weight is 0, the matches are ranked based on their shape scores. 
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.ColorSensitivity">
            <summary>
            Gets or sets the level of sensitivity used to describe the color features in the image. 
            </summary>
            <value>
            The default is Low.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MatchColorPatternOptions.SearchStrategy">
            <summary>
            Gets or sets the search strategy.
            </summary>
            <value>
            The default is Conservative.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CircleDescriptor">
            <summary>
            Provides properties that specify the set of circles to detect.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleDescriptor.#ctor(NationalInstruments.Vision.Range)">
            <summary>
            Initializes a new instance of the CircleDescriptor
            class.
            </summary>
            <param name="radiusRange">
            The range of radius allowed for a detected circle. 
            </param>
            <remarks>
            Use this method in application development environments where object creation may not be straightforward.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleDescriptor.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the CircleDescriptor
            class.
            </summary>
            <param name="minimumRadius">
            Minimum radius allowed for a detected circle.
            </param>
            <param name="maximumRadius">
            Maximum radius allowed for a detected circle.
            </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleDescriptor.Equals(NationalInstruments.Vision.Analysis.CircleDescriptor)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircleDescriptor.
            </summary>
            <param name="other">
            A CircleDescriptor instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleDescriptor.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircleDescriptor.</summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CircleDescriptor and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleDescriptor.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleDescriptor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleDescriptor.RadiusRange">
            <summary>
            Gets or sets the range of radius allowed for a detected circle.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ShapeDetectionOptions">
            <summary>
            Specifies the requirements for shapes that the function detects.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.#ctor">
            <summary>
            Initializes a new instance of the ShapeDetectionOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.#ctor(NationalInstruments.Vision.Analysis.GeometricMatchModes)">
            <summary>
            Initializes a new instance of the ShapeDetectionOptions class.
            </summary>
            <param name="mode">
            The method to use when looking for the shape in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.#ctor(NationalInstruments.Vision.Analysis.GeometricMatchModes,System.Double)">
            <summary>
            Initializes a new instance of the ShapeDetectionOptions class.
            </summary>
            <param name="mode">
            The method to use when looking for the shape in the image.
            </param>
            <param name="minimumMatchScore">
            The minimum score a match can have for the function to consider the match valid. 
            Acceptable values range from 0 to 1,000.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.Equals(NationalInstruments.Vision.Analysis.ShapeDetectionOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ShapeDetectionOptions.
            </summary>
            <param name="other">
            A ShapeDetectionOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ShapeDetectionOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ShapeDetectionOptions and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.MinimumMatchScore">
            <summary>
            Gets or sets the minimum score a match can have for the function to consider the match valid. Acceptable values range from 0 to 1,000.
            </summary>
            <value>
            The default is 800.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.ScaleRange">
            <summary>
            Gets or sets a range that specifies the sizes of the shapes you expect to be in 
            the image, expressed as a ratio percentage representing the size of the pattern 
            in the image divided by size of the original pattern multiplied by 100. The 
            method ignores this range if the Mode does not include ScaleInvariant.
            </summary>
            <value>
            The default is (75, 125).
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.RotationAngleRanges">
            <summary>
            Gets or sets an array of angle ranges, in degrees, where each range specifies how much you expect 
            the shape to be rotated in the image. To decrease the search time, limit the degrees of rotation 
            in which you expect to find the shape in the image. Pass null or Nothing for this element to allow all angles. 
            The ranges are ignored if the Mode does not include RotationInvariant. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ShapeDetectionOptions.Mode">
            <summary>
            Gets or sets the method to use when looking for the shape in the image.
            </summary>
            <value>
            The default is ShiftInvariant.
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CircleMatch">
            <summary>
            Provides information describing a matched circle.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleMatch.#ctor">
            <summary>
            Initializes an instance of the CircleMatch class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleMatch.Equals(NationalInstruments.Vision.Analysis.CircleMatch)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircleMatch.
            </summary>
            <param name="other">
            A CircleMatch instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleMatch.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CircleMatch.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CircleMatch
             and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleMatch.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CircleMatch.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleMatch.Circle">
            <summary>
            Gets or sets the circle detected.
            </summary>
            <value>
            </value>
            <remarks>
            This property is useful for passing directly to <see cref="M:NationalInstruments.Vision.Overlay.AddOval(NationalInstruments.Vision.OvalContour)" crefType="PartiallyQualified"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleMatch.Score">
            <summary>
            Gets or sets the score of the matched score from 0 to 1000, where 1000 represents a perfect match.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleMatch.Radius">
            <summary>
            Gets or sets the radius of the matched circle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CircleMatch.Center">
            <summary>
            Gets or sets the location of the center of the matched circle.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EllipseDescriptor">
            <summary>
            Provides properties that specify the ellipses to detect.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseDescriptor.#ctor(NationalInstruments.Vision.Range,NationalInstruments.Vision.Range)">
            <summary>
            Creates and returns an EllipseDescriptor object.
            </summary>
            <param name="majorRadiusRange">The range of the length of the semi-major axis allowed for a detected elilpse.
            </param>
            <param name="minorRadiusRange">The range of the length of the semi-minor axis allowed for a detected elilpse.
            </param>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseDescriptor.Equals(NationalInstruments.Vision.Analysis.EllipseDescriptor)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EllipseDescriptor.
            </summary>
            <param name="other">
            An EllipseDescriptor instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseDescriptor.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EllipseDescriptor.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of EllipseDescriptor and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseDescriptor.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseDescriptor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseDescriptor.MinorRadiusRange">
            <summary>
            Gets or sets the  range of the length of the semi-minor axis allowed for a detected elilpse.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseDescriptor.MajorRadiusRange">
            <summary>
            Gets or sets the range of the length of the semi-major axis allowed for a detected elilpse.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EllipseMatch">
            <summary>
            Provides information about a particular detected ellipse.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseMatch.#ctor">
            <summary>
            Creates and returns a EllipseMatch object.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseMatch.Equals(NationalInstruments.Vision.Analysis.EllipseMatch)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EllipseMatch.
            </summary>
            <param name="other">
            An EllipseMatch instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseMatch.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EllipseMatch.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of EllipseMatch and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseMatch.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EllipseMatch.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseMatch.Score">
            <summary>
            Gets or sets the score of the detected ellipse. Scores range from 0–1000.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseMatch.Rotation">
            <summary>
            Gets or sets the measure of the angle between the major axis of the detected ellipse and the horizontal axis.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseMatch.MinorRadius">
            <summary>
            Gets or sets the length of the semi-minor axis of the detected ellipse.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseMatch.MajorRadius">
            <summary>
            Gets or sets the length of the semi-major axis of the detected ellipse.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EllipseMatch.Center">
            <summary>
            Gets or sets the position of the center of the detected ellipse.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LineDescriptor">
            <summary>
            Describes the lines the method searches for.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineDescriptor.#ctor(NationalInstruments.Vision.Range)">
            <summary>
            Initializes a new instance of the LineDescriptor class.
            </summary>
            <param name="lengthRange">
            The minimum and maximum length of a line the function will return. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineDescriptor.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the LineDescriptor class.
            </summary>
            <param name="minimumLength">
            The minimum length of a line the function will return. 
            </param>
            <param name="maximumLength">
            The maximum length of a line the function will return. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineDescriptor.Equals(NationalInstruments.Vision.Analysis.LineDescriptor)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineDescriptor.
            </summary>
            <param name="other">
            A LineDescriptor instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineDescriptor.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineDescriptor.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LineDescriptor
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineDescriptor.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineDescriptor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineDescriptor.LengthRange">
            <summary>
            Gets or sets the minimum and maximum length of a line the method will return.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LineMatch">
            <summary>
            Provides information describing a matched line.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineMatch.#ctor">
            <summary>
            Initializes a new instance of the LineMatch class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineMatch.Equals(NationalInstruments.Vision.Analysis.LineMatch)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineMatch.
            </summary>
            <param name="other">
            A LineMatch instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineMatch.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LineMatch.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LineMatch
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineMatch.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LineMatch.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineMatch.Score">
            <summary>
            Gets or sets the score of the matched line. Scores range from 0–1000, where a score of 1000 indicates a perfect match.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineMatch.Rotation">
            <summary>
            Gets or sets the orientation of the matched line. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineMatch.Length">
            <summary>
            Gets or sets the length of the line measured in pixels from the start point to the end point. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LineMatch.Line">
            <summary>
            Gets or sets the coordinates of the detected line.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RectangleDescriptor">
            <summary>
            Provides information about the rectangles the method searches for.
            </summary>
            <remarks>
            Width is defined as the length of the shorter side of a rectangle and height is defined as the longer side of the rectangle you want to search for.
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleDescriptor.#ctor(NationalInstruments.Vision.Range,NationalInstruments.Vision.Range)">
            <summary>
            Initializes a new instance of the RectangleDescriptor class.
            </summary>
            <param name="widthRange">
            Specifies the minimum and maximum width allowed for a detected rectangle.
            </param>
            <param name="heightRange">
            Specifies the minimum and maximum height allowed for a detected rectangle.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleDescriptor.Equals(NationalInstruments.Vision.Analysis.RectangleDescriptor)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RectangleDescriptor.
            </summary>
            <param name="other">
            A RectangleDescriptor instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleDescriptor.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RectangleDescriptor.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of RectangleDescriptor
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleDescriptor.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleDescriptor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleDescriptor.WidthRange">
            <summary>
            Gets or sets the minimum and maximum width allowed for a detected rectangle.
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleDescriptor.HeightRange">
            <summary>
            Gets or sets the minimum and maximum height allowed for a detected rectangle.
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RectangleMatch">
            <summary>
            Provides information describing a matched rectangle.
            </summary>
            <remarks>
            Width is defined as the length of the shorter side of a rectangle and height is defined as the longer side of the rectangle. 
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleMatch.#ctor">
            <summary>
            Initializes a new instance of the RectangleMatch class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleMatch.Equals(NationalInstruments.Vision.Analysis.RectangleMatch)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RectangleMatch.
            </summary>
            <param name="other">
            A RectangleMatch instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleMatch.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RectangleMatch.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of RectangleMatch
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleMatch.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RectangleMatch.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleMatch.Score">
            <summary>
            Gets or sets the score of the matched rectangle. Scores range from 0 to 1000, where a score of 1000 indicates a perfect match. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleMatch.Height">
            <summary>
            Gets or sets the height of the matched rectangle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleMatch.Width">
            <summary>
            Gets or sets the width of the matched rectangle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleMatch.Rotation">
            <summary>
            Gets or sets the orientation of the matched rectangle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RectangleMatch.Corners">
            <summary>
            Gets or sets the corners of the matched rectangle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport">
            <summary>
            Provides the measurements on particles in an image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.#ctor">
            <summary>
            Initializes a new instance of the ParticleMeasurementsReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the ParticleMeasurementsReport class.
            </summary>
            <param name="pixelMeasurements">
            The measurements on the particles in the image, in pixel coordinates. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.#ctor(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the ParticleMeasurementsReport class.
            </summary>
            <param name="pixelMeasurements">
            The measurements on the particles in the image, in pixel coordinates. 
            </param>
            <param name="calibratedMeasurements">
            The measurements on the particles in the image, in real-world coordinates. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.Equals(NationalInstruments.Vision.Analysis.ParticleMeasurementsReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleMeasurementsReport.
            </summary>
            <param name="other">
            A ParticleMeasurementsReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ParticleMeasurementsReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ParticleMeasurementsReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.CalibratedMeasurements">
            <summary>
            Gets the measurements on the particles in the image, in real-world coordinates. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ParticleMeasurementsReport.PixelMeasurements">
            <summary>
            Gets the measurements on the particles in the image, in pixel coordinates. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.TextureFeaturesReport">
            <summary>
            Provides the Texture Features Extracted from the wavelets after the wavelet transformation.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureFeaturesReport.#ctor">
            <summary>
            Initializes a new instance of the TextureFeaturesReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureFeaturesReport.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the TextureFeaturesReport class.
            </summary>
            <param name="textureFeatures">
            The texture features extracted from wavelets. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureFeaturesReport.#ctor(System.Double[0:,0:],System.Collections.ObjectModel.Collection{System.Int32})">
            <summary>
            Initializes a new instance of the TextureFeaturesReport class.
            </summary>
            <param name="textureFeatures">
            The texture features extracted from wavelets. 
            </param>
            <param name="waveletBands">
            The wavelet bands used for Texture Feature extraction. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureFeaturesReport.Equals(NationalInstruments.Vision.Analysis.TextureFeaturesReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified TextureFeaturesReport.
            </summary>
            <param name="other">
            A TextureFeaturesReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureFeaturesReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified TextureFeaturesReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of TextureFeaturesReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureFeaturesReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.TextureFeaturesReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.TextureFeaturesReport.TextureFeatures">
            <summary>
            Gets the texture features extracted. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.TextureFeaturesReport.WaveletBands">
            <summary>
            Gets the wavelet bands used. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.WaveletBandsReport">
            <summary>
            Provides the Wavelet Banks extracted from the wavelets after the wavelet transformation.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletBandsReport.#ctor">
            <summary>
            Initializes a new instance of the WaveletBandsReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletBandsReport.#ctor(System.Single[0:,0:],System.Single[0:,0:],System.Single[0:,0:],System.Single[0:,0:],System.Single[0:,0:],System.Single[0:,0:],System.Single[0:,0:],System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the WaveletBandsReport class.
            </summary>
            <param name="LL">
            2-D Array for LL band
            </param>
            <param name="LH">
            2-D Array for LH band
            </param>
            <param name="HL">
            2-D Array for HL band
            </param>
            <param name="HH">
            2-D Array for HH band
            </param>
            <param name="LLL">
            2-D Array for LLL band
            </param>
            <param name="LLH">
            2-D Array for LLH band
            </param>
            <param name="LHL">
            2-D Array for LHL band
            </param>
            <param name="LHH">
            2-D Array for LHH band
            </param>
            <param name="rows">
            Number of Rows in each Band retrieved
            </param>
            <param name="cols">
            Number of Columns in each Band retrieved
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletBandsReport.Equals(NationalInstruments.Vision.Analysis.WaveletBandsReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified WaveletBandsReport.
            </summary>
            <param name="other">
            A WaveletBandsReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletBandsReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified WaveletBandsReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of WaveletBandsReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletBandsReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.WaveletBandsReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.LL">
            <summary>
            Gets the LL Band. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.LH">
            <summary>
            Gets the LH Band. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.HL">
            <summary>
            Gets the HL Band. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.HH">
            <summary>
            Gets the HH Band. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.LLL">
            <summary>
            Gets the LLL Band. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.LLH">
            <summary>
            Gets the LLH Band. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.LHL">
            <summary>
            Gets the LHL Band. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.LHH">
            <summary>
            Gets the LHH Band. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.Rows">
            <summary>
            Gets the number of Rows of Bands retrieved. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.WaveletBandsReport.Cols">
            <summary>
            Gets the number of Columns of Bands retrieved. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport">
            <summary>
            Provides the Cooccurrence Matrix Report.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport.#ctor">
            <summary>
            Initializes a new instance of the CooccurrenceMatrixReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport.#ctor(System.Double[0:,0:],System.Double[])">
            <summary>
            Initializes a new instance of the CooccurrenceMatrixReport class.
            </summary>
            <param name="cooccurrenceMatrix">
            2-D Array for CooccurrenceMatrix
            </param>
            <param name="featureVector">
            2-D Array for FeatureVector
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport.Equals(NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CooccurrenceMatrixReport.
            </summary>
            <param name="other">
            A CooccurrenceMatrixReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CooccurrenceMatrixReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CooccurrenceMatrixReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport.CooccurrenceMatrix">
            <summary>
            Gets the CooccurrenceMatrix. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CooccurrenceMatrixReport.FeatureVector">
            <summary>
            Gets the featureVector. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CurveParameters">
            <summary>
            Specifies the Curve Parameters used in contour extraction.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.#ctor">
            <summary>
            Initializes a new instance of the CurveParameters class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.#ctor(NationalInstruments.Vision.Analysis.ExtractionMode)">
            <summary>
            Initializes a new instance of the CurveParameters class.
            </summary>
            <param name="extractionMode">How the method identifies curves in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.#ctor(NationalInstruments.Vision.Analysis.ExtractionMode,NationalInstruments.Vision.Analysis.EdgeFilterSize)">
            <summary>
            Initializes a new instance of the CurveParameters class.
            </summary>        
            <param name="extractionMode">How the method identifies curves in the image.
            </param>
            <param name="filterSize">The width of the edge filter the method uses to identify curves in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.#ctor(NationalInstruments.Vision.Analysis.ExtractionMode,NationalInstruments.Vision.Analysis.EdgeFilterSize,System.Boolean)">
            <summary>
            Initializes a new instance of the CurveParameters class.
            </summary>        
            <param name="extractionMode">How the method identifies curves in the image.
            </param>
            <param name="filterSize">The width of the edge filter the method uses to identify curves in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.#ctor(NationalInstruments.Vision.Analysis.ExtractionMode,System.Int32,NationalInstruments.Vision.Analysis.EdgeFilterSize,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the CurveParamter class.
            </summary>
            <param name="extractionMode">How the method identifies curves in the image.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.Equals(NationalInstruments.Vision.Analysis.CurveParameters)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CurveParameters.
            </summary>
            <param name="other">
            A CurveOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CurveParameters.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CurveParameters and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CurveParameters.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveParameters.SubpixelAccuracy">
            <summary>
            Gets or sets whether the method identifies the location of curves with subpixel accuracy by interpolating between points to find the crossing of the threshold.
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveParameters.MaximumEndPointGap">
            <summary>
            Gets or sets the maximum gap, in pixels, between the endpoints of a curve that the function identifies as a closed curve.
            </summary>
            <value>The default value is 10.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveParameters.SearchStepSize">
            <summary>
            Gets or sets the distance, in the y direction, between rows of pixels in the image that the method inspects for curve seed points.
            </summary>
            <value>
            Valid values for this property range from 1 to 255. The default value is 15.
            </value>
            <remarks>
            Set this value to be smaller than the minimum width of the object you want to detect in the image.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveParameters.MinimumLength">
            <summary>
            Gets or sets the length, in pixels, of the smallest curve the method will extract.
            </summary>
            <value>The default value is 25.
            </value>
            <remarks>
            This property ignores curves that have a length less than MinimumLength pixels.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveParameters.FilterSize">
            <summary>
            Gets or sets the width of the edge filter the method uses to identify curves in the image.
            </summary>
            <value>The default value for this property is <see cref="F:NationalInstruments.Vision.Analysis.EdgeFilterSize.Normal" crefType="Unqualified"/>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveParameters.Threshold">
            <summary>
            Gets or sets the minimum contrast a seed point must have for the method to begin a curve.
            </summary>
            <value>The default value is 75. Valid values for this property range from 1 to 360. 
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CurveParameters.ExtractionMode">
            <summary>
            Gets or sets how the method identifies curves in the image.
            </summary>
            <value>The default value is <see cref="F:NationalInstruments.Vision.Analysis.ExtractionMode.NormalImage" crefType="Unqualified"/>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ConnectionConstraint">
            <summary>
            Specifies the Connection constraints of the contour.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConnectionConstraint.#ctor">
            <summary>
            Initializes a new instance of the ConnectionConstraint class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConnectionConstraint.#ctor(NationalInstruments.Vision.Analysis.ConnectionConstraintType)">
            <summary>
            Initializes a new instance of the ConnectionConstraint class.
            </summary>
            <param name="constraintType">specifies what criteria to use to consider two curves part of a contour.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConnectionConstraint.#ctor(NationalInstruments.Vision.Analysis.ConnectionConstraintType,NationalInstruments.Vision.Range)">
            <summary>
            Initializes a new instance of the ConnectionConstraint class.
            </summary>
            <param name="constraintType">specifies what criteria to use to consider two curves part of a contour.
            </param>
            <param name="range">specifies the range for a given Match Constraint.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConnectionConstraint.Equals(NationalInstruments.Vision.Analysis.ConnectionConstraint)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ConnectionConstraint.
            </summary>
            <param name="other">
            A ConnectionConstraint instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConnectionConstraint.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ConnectionConstraint.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ConnectionConstraint and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConnectionConstraint.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ConnectionConstraint.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConnectionConstraint.ConstraintType">
            <summary>
            Constraint Type specifies what criteria to use to consider two curves part of a contour
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ConnectionConstraint.Range">
            <summary>
            Specifies range for a given Match Constraint
            </summary>
            <remarks>
            Make sure max value is greater than the min value.
            </remarks>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ContourOverlaySettings">
            <summary>
            Specifies the Connection constraints of the contour.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourOverlaySettings.#ctor">
            <summary>
            Initializes a new instance of the ContourOverlaySettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourOverlaySettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ContourOverlaySettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourOverlaySettings.#ctor(System.Boolean,NationalInstruments.Vision.Rgb32Value)">
            <summary>
            Initializes a new instance of the ContourOverlaySettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourOverlaySettings.#ctor(System.Boolean,NationalInstruments.Vision.Rgb32Value,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the ContourOverlaySettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourOverlaySettings.Equals(NationalInstruments.Vision.Analysis.ContourOverlaySettings)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourOverlaySettings.
            </summary>
            <param name="other">
            A ContourOverlaySettings instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourOverlaySettings.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourOverlaySettings.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ContourOverlaySettings and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourOverlaySettings.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourOverlaySettings.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourOverlaySettings.Overlay">
            <summary>
            Overlay specifies whether to display the overlay on the image.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourOverlaySettings.Color">
            <summary>
            Color is the color of the overlay.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourOverlaySettings.Width">
            <summary>
            Width specifies the width of the overlay in pixels.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourOverlaySettings.MaintainWidth">
            <summary>
            Maintain Width specifies whether you want the overlay measured in screen pixels or image pixels.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RangeLabel">
            <summary>
            Parameters to classify curvature.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeLabel.#ctor(NationalInstruments.Vision.Range,System.UInt32)">
            <summary>
            Initializes a new instance of the RangeLabel class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeLabel.Equals(NationalInstruments.Vision.Analysis.RangeLabel)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RangeLabel.
            </summary>
            <param name="other">
            A RangeLabel instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeLabel.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RangeLabel.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of RangeLabel and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeLabel.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeLabel.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RangeLabel.Range">
            <summary>
            Range of values.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RangeLabel.Label">
            <summary>
            Label of the range.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.SetupMatchPatternData">
            <summary>
            Setup Match pattern data.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SetupMatchPatternData.#ctor">
            <summary>
            Initializes a new instance of the SetupMatchPatternData class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SetupMatchPatternData.#ctor(System.Collections.ObjectModel.Collection{System.Char})">
            <summary>
            Initializes a new instance of the SetupMatchPatternData class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SetupMatchPatternData.Equals(NationalInstruments.Vision.Analysis.SetupMatchPatternData)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SetupMatchPatternData.
            </summary>
            <param name="other">
            A SetupMatchPatternData instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SetupMatchPatternData.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified SetupMatchPatternData.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of SetupMatchPatternData and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.SetupMatchPatternData.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.SetupMatchPatternData.MatchPatternData">
            <summary>
            Match pattern Data.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifiedCurve">
            <summary>
            Curvature Analysis Report data.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.#ctor">
            <summary>
            Initializes a new instance of the ClassifiedCurve class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ClassifiedCurve class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ClassifiedCurve class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.#ctor(System.Double,System.Double,System.Double,System.Double,System.UInt32)">
            <summary>
            Initializes a new instance of the ClassifiedCurve class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.#ctor(System.Double,System.Double,System.Double,System.Double,System.UInt32,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Initializes a new instance of the ClassifiedCurve class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.Equals(NationalInstruments.Vision.Analysis.ClassifiedCurve)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifiedCurve.
            </summary>
            <param name="other">
            A ClassifiedCurve instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifiedCurve.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClassifiedCurve and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedCurve.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedCurve.Length">
            <summary>
            Specifies the length, in pixels, of the curves within the curvature range.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedCurve.LengthReal">
            <summary>
            Specifies the length, in calibrated units, of the curves within the curvature range
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedCurve.MaxCurvature">
            <summary>
            Specifies the maximum curvature, in pixels, for the selected curvature range
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedCurve.MaxCurvatureReal">
            <summary>
            Specifies the maximum curvature, in calibrated units, for the selected curvature range
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedCurve.Label">
            <summary>
            Specifies the class to which the the sample belongs
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedCurve.CurvePoints">
            <summary>
            Curve Points is a point-coordinate cluster that defines the points of the curve
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.Disparity">
            <summary>
            Curvature Analysis Report data.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Disparity.#ctor">
            <summary>
            Initializes a new instance of the Disparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Disparity.#ctor(NationalInstruments.Vision.PointContour)">
            <summary>
            Initializes a new instance of the Disparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Disparity.#ctor(NationalInstruments.Vision.PointContour,NationalInstruments.Vision.PointContour)">
            <summary>
            Initializes a new instance of the Disparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Disparity.#ctor(NationalInstruments.Vision.PointContour,NationalInstruments.Vision.PointContour,System.Double)">
            <summary>
            Initializes a new instance of the Disparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Disparity.Equals(NationalInstruments.Vision.Analysis.Disparity)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified Disparity.
            </summary>
            <param name="other">
            A Disparity instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Disparity.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified Disparity.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of Disparity and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Disparity.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.Disparity.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Disparity.CurrentPoint">
            <summary>
            Specifies the current point.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Disparity.ReferencePoint">
            <summary>
            Specifies the reference point.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.Disparity.Distance">
            <summary>
            Specifies the current point.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifiedDisparity">
            <summary>
            Classify Distances Report data.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.#ctor">
            <summary>
            Initializes a new instance of the ClassifiedDisparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ClassifiedDisparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ClassifiedDisparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.#ctor(System.Double,System.Double,System.Double,System.Double,System.UInt32)">
            <summary>
            Initializes a new instance of the ClassifiedDisparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.#ctor(System.Double,System.Double,System.Double,System.Double,System.UInt32,System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Initializes a new instance of the ClassifiedDisparity class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.Equals(NationalInstruments.Vision.Analysis.ClassifiedDisparity)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifiedDisparity.
            </summary>
            <param name="other">
            A ClassifiedDisparity instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifiedDisparity.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClassifiedDisparity and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifiedDisparity.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedDisparity.Length">
            <summary>
            Length (pixel) specifies the length, in pixels, of the curves within the curvature range.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedDisparity.LengthReal">
            <summary>
            Length (real) specifies the length, in calibrated units, of the curves within the curvature range.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedDisparity.MaximumDistance">
            <summary>
            Maximum Distance (pixel) specifies the maximum distance, in pixels, between points along the selected contour and the template contour.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedDisparity.MaximumDistanceReal">
            <summary>
            Maximum Distance (pixel) specifies the maximum distance, in calibrated units, between points along the selected contour and the template contour.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedDisparity.Label">
            <summary>
            Class Label specifies the class to which the the sample belongs.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedDisparity.TemplateSubsectionPoints">
            <summary>
            Template subsection points is an array of points that defines the boundary of the template.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifiedDisparity.TargetSubsectionPoints">
            <summary>
            Target subsection points is an array of points that defines the boundary of the target.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ContourMatchMode">
            <summary>
            Identifies the conditions under which you want to find template matches.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourMatchMode.#ctor">
            <summary>
            Initializes a new instance of the GeometricMatchMode class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourMatchMode.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GeometricMatchMode class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourMatchMode.Equals(NationalInstruments.Vision.Analysis.ContourMatchMode)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricMatchMode.
            </summary>
            <param name="other">
            A GeometricMatchMode instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourMatchMode.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricMatchMode.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of GeometricMatchMode and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourMatchMode.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourMatchMode.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourMatchMode.Rotation">
            <summary>
             When enabled, the function searches for occurrences of the template in the inspection image, allowing for template matches to be rotated.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourMatchMode.Scale">
            <summary>
            When enabled, the function searches for occurrences of the template in the inspection image regardless of whether possible matches are of a different size in the inspection image.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourMatchMode.Occlusion">
            <summary>
            specifies whether or not to search for occluded versions of the shape.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.RangeSettings">
            <summary>
            Specifies acceptable ranges for each Match Constraints option
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeSettings.#ctor">
            <summary>
            Initializes a new instance of the RangeSettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeSettings.#ctor(NationalInstruments.Vision.Analysis.SettingType)">
            <summary>
            Initializes a new instance of the RangeSettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeSettings.#ctor(NationalInstruments.Vision.Analysis.SettingType,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the RangeSettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeSettings.Equals(NationalInstruments.Vision.Analysis.RangeSettings)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RangeSettings.
            </summary>
            <param name="other">
            A RangeSettings instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeSettings.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified RangeSettings.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of RangeSettings and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeSettings.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.RangeSettings.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RangeSettings.Type">
            <summary>
            Specifies the match option whose values you want to constrain by the given range.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RangeSettings.Minimum">
            <summary>
            Specifies the minimum value of the range for a given Match Constraint.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.RangeSettings.Maximum">
            <summary>
            specifies the maximum value of the range for a given Match Constraint.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption">
            <summary>
            Specifies options to use during the matching phase
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.#ctor">
            <summary>
            Initializes a new instance of the GeometricAdvancedSetupDataOption class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.#ctor(NationalInstruments.Vision.Analysis.GeometricSetupData)">
            <summary>
            Initializes a new instance of the GeometricAdvancedSetupDataOption class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.#ctor(NationalInstruments.Vision.Analysis.GeometricSetupData,System.Double)">
            <summary>
            Initializes a new instance of the GeometricAdvancedSetupDataOption class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.Equals(NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricAdvancedSetupDataOption.
            </summary>
            <param name="other">
            A GeometricAdvancedSetupDataOption instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the  value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GeometricAdvancedSetupDataOption.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of GeometricAdvancedSetupDataOption and equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.Type">
            <summary>
            Determines the option you want to use during the matching phase
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GeometricAdvancedSetupDataOption.Value">
            <summary>
            Specifies the value for the option you want to use during the matching phase.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ExtractContourReport">
            <summary>
            Provides the Contour Extracted from the image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ExtractContourReport.#ctor">
            <summary>
            Initializes a new instance of the ExtractContourReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ExtractContourReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Initializes a new instance of the ExtractContourReport class.
            </summary>
            <param name="textureFeatures">
            The texture features extracted from wavelets. 
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ExtractContourReport.Equals(NationalInstruments.Vision.Analysis.ExtractContourReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ExtractContourReport.
            </summary>
            <param name="other">
            A ExtractContourReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ExtractContourReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ExtractContourReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of TextureFeaturesReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ExtractContourReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ExtractContourReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ExtractContourReport.ContourPoints">
            <summary>
            Gets the contour points extracted. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ExtractContourReport.SourcePoints">
            <summary>
            Gets the source points extracted. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ContourInfoReport">
            <summary>
            Provides the Contour Info of the image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourInfoReport.#ctor">
            <summary>
            Initializes a new instance of the ContourInfoReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourInfoReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Initializes a new instance of the ContourInfoReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourInfoReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double})">
            <summary>
            Initializes a new instance of the ContourInfoReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourInfoReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double},System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the ContourInfoReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourInfoReport.Equals(NationalInstruments.Vision.Analysis.ContourInfoReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourInfoReport.
            </summary>
            <param name="other">
            A ContourInfoReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourInfoReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourInfoReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ContourInfoReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourInfoReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourInfoReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourInfoReport.ContourPoints">
            <summary>
            Gets the contour points extracted. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourInfoReport.SourcePoints">
            <summary>
            Gets the source points extracted. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourInfoReport.CurvaturePixel">
            <summary>
            Displays the curvature profile for the selected contour, in pixels. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourInfoReport.CurvatureReal">
            <summary>
            Displays the curvature profile for the selected contour, in pixels. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourInfoReport.Length">
            <summary>
            Specifies the length, in pixels, of the curves in the image. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourInfoReport.LengthReal">
            <summary>
            Specifies the length, in calibrated units, of the curves within the curvature range. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourInfoReport.HasEquation">
            <summary>
            Specifies the length, in calibrated units, of the curves within the curvature range. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ComputeCurvatureReport">
            <summary>
            Provides the Curvature Report of the image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeCurvatureReport.#ctor">
            <summary>
            Initializes a new instance of the ComputeCurvatureReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeCurvatureReport.#ctor(System.Collections.ObjectModel.Collection{System.Double},System.Collections.ObjectModel.Collection{System.Double})">
            <summary>
            Initializes a new instance of the ComputeCurvatureReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeCurvatureReport.Equals(NationalInstruments.Vision.Analysis.ComputeCurvatureReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ComputeCurvatureReport.
            </summary>
            <param name="other">
            A ComputeCurvatureReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeCurvatureReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ComputeCurvatureReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ComputeCurvatureReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeCurvatureReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeCurvatureReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ComputeCurvatureReport.CurvaturePixel">
            <summary>
            Displays the curvature profile for the selected contour, in pixels. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ComputeCurvatureReport.CurvatureReal">
            <summary>
            Displays the curvature profile for the selected contour, in pixels. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport">
            <summary>
            Provides the Curvature Analysis Report.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport.#ctor">
            <summary>
            Initializes a new instance of the ClassifyCurvatureReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ClassifiedCurve})">
            <summary>
            Initializes a new instance of the ClassifyCurvatureReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport.Equals(NationalInstruments.Vision.Analysis.ClassifyCurvatureReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifyCurvatureReport.
            </summary>
            <param name="other">
            A ClassifyCurvatureReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifyCurvatureReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClassifyCurvatureReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifyCurvatureReport.Curves">
            <summary>
            Displays the classifies curves report. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ComputeDistanceReport">
            <summary>
            Provides the Compute Distance Report.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeDistanceReport.#ctor">
            <summary>
            Initializes a new instance of the ComputeDistanceReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeDistanceReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.Disparity},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.Disparity})">
            <summary>
            Initializes a new instance of the ComputeDistanceReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeDistanceReport.Equals(NationalInstruments.Vision.Analysis.ComputeDistanceReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ComputeDistanceReport.
            </summary>
            <param name="other">
            A ComputeDistanceReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeDistanceReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ComputeDistanceReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ComputeDistanceReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeDistanceReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ComputeDistanceReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ComputeDistanceReport.Distances">
            <summary>
            Collection containing the computed distances 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ComputeDistanceReport.DistancesReal">
            <summary>
             Collection containing the computed distances in calibrated units 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClassifyDistancesReport">
            <summary>
            Provides the Curvature Analysis Report.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyDistancesReport.#ctor">
            <summary>
            Initializes a new instance of the ClassifyDistancesReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyDistancesReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Analysis.ClassifiedDisparity})">
            <summary>
            Initializes a new instance of the ClassifyDistancesReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyDistancesReport.Equals(NationalInstruments.Vision.Analysis.ClassifyDistancesReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifyDistancesReport.
            </summary>
            <param name="other">
            A ClassifyDistancesReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyDistancesReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClassifyDistancesReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClassifyDistancesReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyDistancesReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClassifyDistancesReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClassifyDistancesReport.ClassifiedDistances">
            <summary>
            Displays the classifies distances report. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ROILabel">
            <summary>
            Provides the ROILabel.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ROILabel.#ctor">
            <summary>
            Initializes a new instance of the ROILabel class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ROILabel.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the ROILabel class.
            </summary>
            <param name="className">
            String specifying the class name for the label.
            </param>
            <param name="label">
            The label index for the Roi label.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ROILabel.Equals(NationalInstruments.Vision.Analysis.ROILabel)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ROILabel.
            </summary>
            <param name="other">
            A ROILabel instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ROILabel.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ROILabel.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ROILabel
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ROILabel.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ROILabel.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ROILabel.ClassName">
            <summary>
            Gets/Sets the ClassName. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ROILabel.Label">
            <summary>
            Gets/Sets the Label. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ColorSegmentationOptions">
            <summary>
            Provides the ColorSegmentationOptions.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.#ctor">
            <summary>
            Initializes a new instance of the ColorSegmentationOptions class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the ColorSegmentationOptions class.
            </summary>
            <param name="windowX">
            Specifies the Window lenght on X direction.
            </param>
            <param name="windowY">
            Specifies the Window lenght on Y direction.
            </param>
            <param name="stepSize">
            Specifies the Distance between windows.
            </param>
            <param name="minParticleArea">
            Specifies the Minimum Cluster/Particle area to be allowed.
            </param>
            <param name="maxParticleArea">
            Specifies the Maximum Cluster/Particle area to be allowed.
            </param>
            <param name="isFineSegment">
            When true, the step processes the boundary pixels of each segmentation cluster using a step size of 1.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.Equals(NationalInstruments.Vision.Analysis.ColorSegmentationOptions)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorSegmentationOptions.
            </summary>
            <param name="other">
            A ColorSegmentationOptions instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ColorSegmentationOptions.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ColorSegmentationOptions
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.WindowX">
            <summary>
            Gets or sets the WindowX. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.WindowY">
            <summary>
            Gets or sets the WindowY. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.StepSize">
            <summary>
            Gets or sets the StepSize. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.MinParticleArea">
            <summary>
            Gets or sets the MinParticleArea. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.MaxParticleArea">
            <summary>
            Gets or sets the MaxParticleArea. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ColorSegmentationOptions.IsFineSegment">
            <summary>
            Gets or sets the IsFineSegment. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.LabelToROIReport">
            <summary>
            Provides the LabelToROIReport.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LabelToROIReport.#ctor">
            <summary>
            Initializes a new instance of the LabelToROIReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LabelToROIReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.Roi},System.Collections.ObjectModel.Collection{System.UInt32},System.Collections.ObjectModel.Collection{System.Boolean})">
            <summary>
            Initializes a new instance of the LabelToROIReport class.
            </summary>
            <param name="rois">
            Collection of Rois.
            </param>
            <param name="labelsOut">
            Collection of label indexes of ROI Labels.
            </param>
            <param name="isTooManyVectors">
            Collection of bool specifying whether there are too many vectors. It is to indicate 
            specific cases where number of points in a contour exceeded the maximum limit.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LabelToROIReport.Equals(NationalInstruments.Vision.Analysis.LabelToROIReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LabelToROIReport.
            </summary>
            <param name="other">
            A LabelToROIReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LabelToROIReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified LabelToROIReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of LabelToROIReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LabelToROIReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.LabelToROIReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LabelToROIReport.Rois">
            <summary>
            Gets or sets the Rois. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LabelToROIReport.LabelsOut">
            <summary>
            Gets or sets the LabelsOut. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.LabelToROIReport.IsTooManyVectors">
            <summary>
            Gets or sets the IsTooManyVectors. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ContourFitLineReport">
            <summary>
            Provides the ContourFitLineReport.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitLineReport.#ctor">
            <summary>
            Initializes a new instance of the ContourFitLineReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitLineReport.#ctor(NationalInstruments.Vision.LineContour,NationalInstruments.Vision.Analysis.LineEquation)">
            <summary>
            Initializes a new instance of the ContourFitLineReport class.
            </summary>
            <param name="lineSegment">
            Defines the initial and the end point of the line.
            </param>
            <param name="equation">
            Defines the constants for the equation of a line.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitLineReport.Equals(NationalInstruments.Vision.Analysis.ContourFitLineReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourFitLineReport.
            </summary>
            <param name="other">
            A ContourFitLineReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitLineReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourFitLineReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ContourFitLineReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitLineReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitLineReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourFitLineReport.lineSegment">
            <summary>
            Gets or sets the lineSegment. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourFitLineReport.equation">
            <summary>
            Gets or sets the equation. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.PartialCircle">
            <summary>
            Provides the PartialCircle.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialCircle.#ctor">
            <summary>
            Initializes a new instance of the PartialCircle class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialCircle.#ctor(NationalInstruments.Vision.PointContour,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PartialCircle class.
            </summary>
            <param name="center">
            Defines the coordinates of the center of the circle.
            </param>
            <param name="radius">
            Defines the radius.
            </param>
            <param name="startAngle">
            Defines the start angle of the partial circle from the horizontal in anticlockwise direction.
            </param>
            <param name="endAngle">
            Defines the end angle of the partial circle from the horizontal in anticlockwise direction.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialCircle.Equals(NationalInstruments.Vision.Analysis.PartialCircle)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PartialCircle.
            </summary>
            <param name="other">
            A PartialCircle instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialCircle.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PartialCircle.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of PartialCircle
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialCircle.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialCircle.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialCircle.Center">
            <summary>
            Gets or sets the Center. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialCircle.Radius">
            <summary>
            Gets or sets the Radius. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialCircle.StartAngle">
            <summary>
            Gets or sets the StartAngle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialCircle.EndAngle">
            <summary>
            Gets or sets the EndAngle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.PartialEllipse">
            <summary>
            Provides the PartialEllipse.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialEllipse.#ctor">
            <summary>
            Initializes a new instance of the PartialEllipse class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialEllipse.#ctor(NationalInstruments.Vision.PointContour,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PartialEllipse class.
            </summary>
            <param name="center">
            Defines the coordinates of the center of the ellipse.
            </param>
            <param name="angle">
            Defines the angle.
            </param>
            <param name="majorRadius">
            Defines the major radius of the ellipse.
            </param>
            <param name="minorRadius">
            Defines the minor radius of the ellipse.
            </param>
            <param name="startAngle">
            Defines the start angle of the partial circle from the horizontal in anticlockwise direction.
            </param>
            <param name="endAngle">
            Defines the end angle of the partial circle from the horizontal in anticlockwise direction.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialEllipse.Equals(NationalInstruments.Vision.Analysis.PartialEllipse)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PartialEllipse.
            </summary>
            <param name="other">
            A PartialEllipse instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialEllipse.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PartialEllipse.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of PartialEllipse
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialEllipse.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PartialEllipse.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialEllipse.Center">
            <summary>
            Gets or sets the Center. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialEllipse.Angle">
            <summary>
            Gets or sets the Angle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialEllipse.MajorRadius">
            <summary>
            Gets or sets the MajorRadius. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialEllipse.MinorRadius">
            <summary>
            Gets or sets the MinorRadius. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialEllipse.StartAngle">
            <summary>
            Gets or sets the StartAngle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PartialEllipse.EndAngle">
            <summary>
            Gets or sets the EndAngle. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ContourFitSplineReport">
            <summary>
            Provides the ContourFitSplineReport.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitSplineReport.#ctor">
            <summary>
            Initializes a new instance of the ContourFitSplineReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitSplineReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Initializes a new instance of the ContourFitSplineReport class.
            </summary>
            <param name="points">
            Defines the collection of points returned yb ContourFit Spline. It has all the points which
            represents the contour fitted by the function.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitSplineReport.Equals(NationalInstruments.Vision.Analysis.ContourFitSplineReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourFitSplineReport.
            </summary>
            <param name="other">
            A ContourFitSplineReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitSplineReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourFitSplineReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ContourFitSplineReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitSplineReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitSplineReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourFitSplineReport.Points">
            <summary>
            Gets or sets the Points. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport">
            <summary>
            Provides the ContourFitPolynomialReport.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport.#ctor">
            <summary>
            Initializes a new instance of the ContourFitPolynomialReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{System.Double})">
            <summary>
            Initializes a new instance of the ContourFitPolynomialReport class.
            </summary>
            <param name="points">
            Defines the collection of points returned yb ContourFit Spline. It has all the points which
            represents the contour fitted by the function.
            </param>
            <param name="polynomialCoefficients">
            Defines the polynomial coefficients of the equation.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport.Equals(NationalInstruments.Vision.Analysis.ContourFitPolynomialReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourFitPolynomialReport.
            </summary>
            <param name="other">
            A ContourFitPolynomialReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ContourFitPolynomialReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ContourFitPolynomialReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport.Points">
            <summary>
            Gets or sets the Points. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ContourFitPolynomialReport.PolynomialCoefficients">
            <summary>
            Gets or sets the PolynomialCoefficients. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.EdgePolarityClamp">
            <summary>
            Provides the EdgePolarityClamp.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgePolarityClamp.#ctor">
            <summary>
            Initializes a new instance of the EdgePolarityClamp class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgePolarityClamp.#ctor(NationalInstruments.Vision.Analysis.EdgePolaritySearchMode,NationalInstruments.Vision.Analysis.EdgePolaritySearchMode)">
            <summary>
            Initializes a new instance of the EdgePolarityClamp class.
            </summary>
            <param name="start">
            Defines the start polarity.
            </param>
            <param name="end">
            Defines the end polarity.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgePolarityClamp.Equals(NationalInstruments.Vision.Analysis.EdgePolarityClamp)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EdgePolarityClamp.
            </summary>
            <param name="other">
            A EdgePolarityClamp instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgePolarityClamp.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified EdgePolarityClamp.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of EdgePolarityClamp
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgePolarityClamp.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.EdgePolarityClamp.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgePolarityClamp.Start">
            <summary>
            Gets or sets the Start polarity. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.EdgePolarityClamp.End">
            <summary>
            Gets or sets the End polarity. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClampSettings">
            <summary>
            The ClampSettings is used to control the behavior of the clamp.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampSettings.#ctor">
            <summary>
            Initializes a new instance of the ClampSettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampSettings.#ctor(NationalInstruments.Vision.Analysis.EdgePolarityClamp,System.Double)">
            <summary>
            Initializes a new instance of the ClampSettings class.
            </summary>
            <param name="edgePolarity">
            Defines the start polarity.
            </param>
            <param name="angleRange">
            Defines the end polarity.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampSettings.Equals(NationalInstruments.Vision.Analysis.ClampSettings)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampSettings.
            </summary>
            <param name="other">
            A ClampSettings instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampSettings.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampSettings.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClampSettings
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampSettings.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampSettings.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampSettings.EdgePolarity">
            <summary>
            Gets or sets the EdgePolarity. 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampSettings.AngleRange">
            <summary>
            Gets or sets the AngleRange. 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClampOverlaySettings">
            <summary>
            Provides the information that is to be overlaid on the result image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.#ctor">
            <summary>
            Initializes a new instance of the ClampOverlaySettings class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ClampOverlaySettings class.
            </summary>
            <param name="showSearchArea">
            Defines the start polarity.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ClampOverlaySettings class.
            </summary>
            <param name="showSearchArea">
            Defines the start polarity.
            </param>
            <param name="showCurves">
            Defines the end polarity.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ClampOverlaySettings class.
            </summary>
            <param name="showSearchArea">
            Defines the start polarity.
            </param>
            <param name="showCurves">
            Defines the end polarity.
            </param>
            <param name="showClampLocations">
            Defines the end polarity.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ClampOverlaySettings class.
            </summary>
            <param name="showSearchArea">
            Defines the start polarity.
            </param>
            <param name="showCurves">
            Defines the end polarity.
            </param>
            <param name="showClampLocations">
            Defines the end polarity.
            </param>
            <param name="showResult">
            Defines the end polarity.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.Equals(NationalInstruments.Vision.Analysis.ClampOverlaySettings)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampOverlaySettings.
            </summary>
            <param name="other">
            A ClampOverlaySettings instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampOverlaySettings.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClampOverlaySettings
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampOverlaySettings.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.ResultColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the results. 
            </summary>
            <value>The default value is R = 255, G = 0, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.ClampLocationsColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the clamp locations. 
            </summary>
            <value>The default value is R = 255, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.CurvesColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the curves. 
            </summary>
            <value>The default value is R = 0, G = 0, and B = 255.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.SearchAreaColor">
            <summary>
            Gets or sets the RGB color value to use to overlay the search area. 
            </summary>
            <value>The default value is R = 0, G = 255, and B = 0.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.ShowResult">
            <summary>
            Gets or sets whether the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. 
            </summary>
            <value>The default value is <see langword="true"/>.
            </value>
            <remarks>
            If <see langword="true"/>, the function overlays the hit lines to the object and the edge used to generate the hit line on the result image. When applicable, the function also overlays the location of any measurements made by the function. If you do not want this information overlaid onto the image, set this element to <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.ShowCurves">
            <summary>
            Gets or sets whether the function overlays the locations of the curves on the image.
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.ShowClampLocations">
            <summary>
            Gets or sets whether the function overlays the clamp locations on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.ShowSearchArea">
            <summary>
            Gets or sets whether the function overlays the search area on the image. 
            </summary>
            <value>The default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampOverlaySettings.OverlayGroupName">
            <summary>
            Gets or sets the overlay group name to assign to the overlays. 
            </summary>
            <value>
            The default value is blank.
            Set this element to <see langword="null"/> to add overlays to the default group. 
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClampResults">
            <summary>
            Provides the ClampResults.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampResults.#ctor">
            <summary>
            Initializes a new instance of the ClampResults class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampResults.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ClampResults class.
            </summary>
            <param name="distancePix">
            Defines the distance in Pixels.
            </param>
            <param name="distanceRealWorld">
            Defines the distance in Real world coordinates.
            </param>
            <param name="angleAbs">
            Defines the absolute angle.
            </param>
            <param name="angleRelative">
            Defines the relative angle.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampResults.Equals(NationalInstruments.Vision.Analysis.ClampResults)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampResults.
            </summary>
            <param name="other">
            A ClampResults instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampResults.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampResults.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClampResults
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampResults.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampResults.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampResults.DistancePix">
            <summary>
            Gets or sets the DistancePix 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampResults.DistanceRealWorld">
            <summary>
            Gets or sets the DistanceRealWorld 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampResults.AngleAbs">
            <summary>
            Gets or sets the AngleAbs 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampResults.AngleRelative">
            <summary>
            Gets or sets the AngleRelative 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.PointPairDouble">
            <summary>
            Provides the PointPairDouble.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PointPairDouble.#ctor">
            <summary>
            Initializes a new instance of the PointPairDouble class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PointPairDouble.#ctor(NationalInstruments.Vision.PointContour,NationalInstruments.Vision.PointContour)">
            <summary>
            Initializes a new instance of the PointPairDouble class.
            </summary>
            <param name="start">
            Defines the start coordinates.
            </param>
            <param name="end">
            Defines the end coordinates.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PointPairDouble.Equals(NationalInstruments.Vision.Analysis.PointPairDouble)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PointPairDouble.
            </summary>
            <param name="other">
            A PointPairDouble instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PointPairDouble.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PointPairDouble.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of PointPairDouble
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PointPairDouble.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PointPairDouble.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PointPairDouble.Start">
            <summary>
            Gets or sets the start coordinate 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PointPairDouble.End">
            <summary>
            Gets or sets the end coordinate 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClampPoints">
            <summary>
            Provides the ClampPoints.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampPoints.#ctor">
            <summary>
            Initializes a new instance of the ClampPoints class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampPoints.#ctor(NationalInstruments.Vision.Analysis.PointPairDouble,NationalInstruments.Vision.Analysis.PointPairDouble)">
            <summary>
            Initializes a new instance of the ClampPoints class.
            </summary>
            <param name="pixels">
            Defines the start coordinates.
            </param>
            <param name="realWorld">
            Defines the end coordinates.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampPoints.Equals(NationalInstruments.Vision.Analysis.ClampPoints)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampPoints.
            </summary>
            <param name="other">
            A ClampPoints instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampPoints.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampPoints.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClampPoints
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampPoints.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampPoints.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampPoints.Pixels">
            <summary>
            Gets or sets the pixel coordinates 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampPoints.RealWorld">
            <summary>
            Gets or sets the real world coordinates 
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ClampMaxReport">
            <summary>
            Provides the ClampMaxReport.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampMaxReport.#ctor">
            <summary>
            Initializes a new instance of the ClampMaxReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampMaxReport.#ctor(NationalInstruments.Vision.Analysis.ClampResults,NationalInstruments.Vision.Analysis.ClampPoints,System.Boolean)">
            <summary>
            Initializes a new instance of the ClampMaxReport class.
            </summary>
            <param name="clampResults">
            Defines the clamp results.
            </param>
            <param name="clampPoints">
            Defines the clamp points.
            </param>
            <param name="calibrationValid">
            Defines whether the calibration is valid or not.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampMaxReport.Equals(NationalInstruments.Vision.Analysis.ClampMaxReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampMaxReport.
            </summary>
            <param name="other">
            A ClampMaxReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampMaxReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ClampMaxReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of ClampMaxReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampMaxReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ClampMaxReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampMaxReport.ClampResults">
            <summary>
            Gets or sets the clamp results 
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampMaxReport.ClampPoints">
            <summary>
            Gets or sets the clamp points
            </summary>
            <value>
            </value>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ClampMaxReport.CalibrationValid">
            <summary>
            Gets or sets the calibrationValid
            </summary>
            <value>
            </value>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.MaxGridSize">
            <summary>
            Specifies the Maximum limit of grid size to be used for pixel and real world points. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaxGridSize.#ctor">
            <summary>
            Initializes a new instance of the MaxGridSize class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaxGridSize.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MaxGridSize class.
            </summary>
            <param name="xMax">
            Defines xMax.
            </param>
            <param name="yMax">
            Defines yMax.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaxGridSize.Equals(NationalInstruments.Vision.Analysis.MaxGridSize)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified instance. 
            </summary>
            <param name="other">
            An ImagePreviewFileDialog instance to compare to this instance.
            </param>
            <returns>
            	<see langword="true"/> if the other parameter equals the value of this instance; otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaxGridSize.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">
            An object to compare with this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is a object that represents the same as the current; otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaxGridSize.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.MaxGridSize.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation. 
            </summary>
            <returns>
            A string representation of the value of this instance. 
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MaxGridSize.XMax">
            <summary>
            maximum x value.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.MaxGridSize.YMax">
            <summary>
            Maximum Y value.
            </summary>        
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ImageSize">
            <summary>
            Maximum grid size
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ImageSize.#ctor">
            <summary>
            Initializes a new instance of the MaxGridSize class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ImageSize.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the MaxGridSize class.
            </summary>
            <param name="xRes">
            Defines x resolution.
            </param>
            <param name="yRes">
            Defines y resolution.
            </param>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ImageSize.Equals(NationalInstruments.Vision.Analysis.ImageSize)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified instance. 
            </summary>
            <param name="other">
            An ImagePreviewFileDialog instance to compare to this instance.
            </param>
            <returns>
            	<see langword="true"/> if the other parameter equals the value of this instance; otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ImageSize.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object. 
            </summary>
            <param name="obj">
            An object to compare with this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is a object that represents the same as the current; otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ImageSize.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
            <returns>
            A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ImageSize.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation. 
            </summary>
            <returns>
            A string representation of the value of this instance. 
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ImageSize.XRes">
            <summary>
            X resolution of the image
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ImageSize.YRes">
            <summary>
            Y resolution of the image
            </summary>        
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CalibrationReferencePoints">
            <summary>
            The set of reference points to use in learning a calibration transformation.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.#ctor">
            <summary>
            Initializes a new instance of the CalibrationReferencePoints class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour})">
            <summary>
            Initializes a new instance of the CalibrationReferencePoints class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.CalibrationUnit)">
            <summary>
            Initializes a new instance of the CalibrationReferencePoints class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.#ctor(System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},System.Collections.ObjectModel.Collection{NationalInstruments.Vision.PointContour},NationalInstruments.Vision.CalibrationUnit,NationalInstruments.Vision.Analysis.ImageSize)">
            <summary>
            Initializes a new instance of the CalibrationReferencePoints class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.Equals(NationalInstruments.Vision.Analysis.CalibrationReferencePoints)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationReferencePoints.
            </summary>
            <param name="other">
            A CalibrationReferencePoints instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationReferencePoints.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CalibrationReferencePoints
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.PixelCoords">
            <summary>
            Gets or sets the coordinates of the pixel reference points. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.RealCoords">
            <summary>
            Gets or sets the measuring unit associated with the image.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.CalibrationUnit">
            <summary>
            Gets or Sets the Calibration Unit. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationReferencePoints.ImageSize">
            <summary>
            Gets or Sets the ImageSize.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CalibrationAxisInfo">
            <summary>
            Defines a Reference Coordinate System for the real-world coordinates.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.#ctor">
            <summary>
            Initializes a new instance of the CalibrationAxisInfo class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.#ctor(NationalInstruments.Vision.PointContour)">
            <summary>
            Initializes a new instance of the CalibrationAxisInfo class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.#ctor(NationalInstruments.Vision.PointContour,System.Single)">
            <summary>
            Initializes a new instance of the CalibrationAxisInfo class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.#ctor(NationalInstruments.Vision.PointContour,System.Single,NationalInstruments.Vision.AxisOrientation)">
            <summary>
            Initializes a new instance of the CalibrationAxisInfo class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.Equals(NationalInstruments.Vision.Analysis.CalibrationAxisInfo)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationAxisInfo.
            </summary>
            <param name="other">
            A CalibrationAxisInfo instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationAxisInfo.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CalibrationAxisInfo
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.Center">
            <summary>
            The origin of the reference coordinate system, expressed in pixel units.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.RotationAngle">
            <summary>
            The angle of the x-axis of the real-world coordinate system, in relation to the horizontal.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationAxisInfo.AxisDirection">
            <summary>
            Direction of the calibraiton axis which is either Direct or Indirect. 
            </summary>        
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll">
            <summary>
            Provides calibration learn setup information.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.#ctor">
            <summary>
            Initializes a new instance of the CalibrationLearnSetupInfoAll class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.#ctor(NationalInstruments.Vision.CalibrationMethod2)">
            <summary>
            Initializes a new instance of the CalibrationLearnSetupInfoAll class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.#ctor(NationalInstruments.Vision.CalibrationMethod2,NationalInstruments.Vision.Analysis.DistortionModel)">
            <summary>
            Initializes a new instance of the CalibrationLearnSetupInfoAll class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.#ctor(NationalInstruments.Vision.CalibrationMethod2,NationalInstruments.Vision.Analysis.DistortionModel,NationalInstruments.Vision.ScalingMethod)">
            <summary>
            Initializes a new instance of the CalibrationLearnSetupInfoAll class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.#ctor(NationalInstruments.Vision.CalibrationMethod2,NationalInstruments.Vision.Analysis.DistortionModel,NationalInstruments.Vision.ScalingMethod,NationalInstruments.Vision.CalibrationCorrectionMode)">
            <summary>
            Initializes a new instance of the CalibrationLearnSetupInfoAll class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.#ctor(NationalInstruments.Vision.CalibrationMethod2,NationalInstruments.Vision.Analysis.DistortionModel,NationalInstruments.Vision.ScalingMethod,NationalInstruments.Vision.CalibrationCorrectionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the CalibrationLearnSetupInfoAll class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.Equals(NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationLearnSetupInfoAll.
            </summary>
            <param name="other">
            A CalibrationLearnSetupInfoAll instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationLearnSetupInfoAll.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CalibrationLearnSetupInfoAll
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.CalibrationMethod">
            <summary>
            The type of calibration method used.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.DistortionModel">
            <summary>
            The type of distortion you can correct when correcting an image.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.ScaleMode">
            <summary>
            The aspect scaling to use when correcting an image.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.CalibrationCorrectionMode">
            <summary>
            The ROI to use when correcting an image.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll.LearnCorrectionTable">
            <summary>
            Set this input to true value if you want the correction table to be determined and stored. The correction table accelerates the process of correcting an image. It is useful if several images are going to be corrected.
            </summary>        
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.ErrorStatistics">
            <summary>
            Error statistics Information.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ErrorStatistics.#ctor">
            <summary>
            Initializes a new instance of the ErrorStatistics class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ErrorStatistics.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ErrorStatistics class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ErrorStatistics.Equals(NationalInstruments.Vision.Analysis.ErrorStatistics)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified ErrorStatistics.
            </summary>
            <param name="other">
            A ErrorStatistics instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ErrorStatistics.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationLearnSetupInfoAll.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CalibrationLearnSetupInfoAll
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ErrorStatistics.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.ErrorStatistics.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ErrorStatistics.Mean">
            <summary>
            Mean value of error.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ErrorStatistics.Maximum">
            <summary>
            Maximum value of error.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ErrorStatistics.StandardDeviation">
            <summary>
            StandardDeviation value of error.
            </summary>        
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.ErrorStatistics.Distortion">
            <summary>
            Distortion value of error.
            </summary>        
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport">
            <summary>
            Provides the calibration information associated with an image.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.#ctor">
            <summary>
            Initializes a new instance of the GetCalibrationInfoReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.#ctor(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi)">
            <summary>
            Initializes a new instance of the GetCalibrationInfoReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.#ctor(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CalibrationAxisInfo)">
            <summary>
            Initializes a new instance of the GetCalibrationInfoReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.#ctor(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CalibrationAxisInfo,NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll)">
            <summary>
            Initializes a new instance of the GetCalibrationInfoReport class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.#ctor(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CalibrationAxisInfo,NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll,NationalInstruments.Vision.GridDescriptor)">
            <summary>
            Initializes a new instance of the GetCalibrationInfoReport class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.#ctor(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CalibrationAxisInfo,NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll,NationalInstruments.Vision.GridDescriptor,System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the GetCalibrationInfoReport class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.#ctor(NationalInstruments.Vision.Roi,NationalInstruments.Vision.Roi,NationalInstruments.Vision.Analysis.CalibrationAxisInfo,NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfoAll,NationalInstruments.Vision.GridDescriptor,System.Single[0:,0:],NationalInstruments.Vision.Analysis.ErrorStatistics)">
            <summary>
            Initializes a new instance of the GetCalibrationInfoReport class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.Equals(NationalInstruments.Vision.Analysis.GetCalibrationInfoReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GetCalibrationInfoReport.
            </summary>
            <param name="other">
            A GetCalibrationInfoReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified GetCalibrationInfoReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of GetCalibrationInfoReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.UserROI">
            <summary>
            Gets or sets the region you specified at the time of calibration.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.CalibrationROI">
            <summary>
            Gets or sets the ROI that corresponds to the region of the image where the calibration information is accurate. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.AxisInfo">
            <summary>
            Gets or sets the reference Coordinate System for the real-world coordinates. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.LearnSetupInfo">
            <summary>
            Gets or sets the learnSetupInfo. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.SimpleGridDescriptor">
            <summary>
            Gets or sets scaling constants used to calibrate the image. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.ErrorMap">
            <summary>
            Gets or sets the error map of calibration template image. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.GetCalibrationInfoReport.ErrorStatistics">
            <summary>
            Gets or sets the errorStatistics. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.PolyModel">
            <summary>
            Provides the learned coefficients of polynomial model.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PolyModel.#ctor">
            <summary>
            Initializes a new instance of the PolyModel class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PolyModel.#ctor(System.Collections.ObjectModel.Collection{System.Single},System.Single,System.Single)">
            <summary>
            Initializes a new instance of the PolyModel class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PolyModel.Equals(NationalInstruments.Vision.Analysis.PolyModel)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PolyModel.
            </summary>
            <param name="other">
            A PolyModel instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PolyModel.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified PolyModel.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of PolyModel
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PolyModel.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.PolyModel.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PolyModel.KCoefficients">
            <summary>
            Gets or sets the learned radial coefficients of polynomial model.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PolyModel.P1">
            <summary>
            Gets or sets the P1(learned tangential coefficients of polynomial model). 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.PolyModel.P2">
            <summary>
            Gets or sets the P2(learned tangential coefficients of polynomial model).
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DivModel">
            <summary>
            Provides the learned coefficient of division model.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DivModel.#ctor">
            <summary>
            Initializes a new instance of the DivModel class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DivModel.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the DivModel class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DivModel.Equals(NationalInstruments.Vision.Analysis.DivModel)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DivModel.
            </summary>
            <param name="other">
            A DivModel instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DivModel.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DivModel.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DivModel
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DivModel.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DivModel.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DivModel.Kappa">
            <summary>
            Gets or sets the learned kappa coefficient of division model. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.DistortionModelParams">
            <summary>
            Provides Distortion Model Coefficients.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DistortionModelParams.#ctor">
            <summary>
            Initializes a new instance of the DistortionModelParams class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DistortionModelParams.#ctor(NationalInstruments.Vision.Analysis.DistortionModel)">
            <summary>
            Initializes a new instance of the DistortionModelParams class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DistortionModelParams.#ctor(NationalInstruments.Vision.Analysis.DistortionModel,NationalInstruments.Vision.Analysis.PolyModel)">
            <summary>
            Initializes a new instance of the DistortionModelParams class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DistortionModelParams.#ctor(NationalInstruments.Vision.Analysis.DistortionModel,NationalInstruments.Vision.Analysis.PolyModel,NationalInstruments.Vision.Analysis.DivModel)">
            <summary>
            Initializes a new instance of the DistortionModelParams class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DistortionModelParams.Equals(NationalInstruments.Vision.Analysis.DistortionModelParams)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DistortionModelParams.
            </summary>
            <param name="other">
            A DistortionModelParams instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DistortionModelParams.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified DistortionModelParams.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of DistortionModelParams
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DistortionModelParams.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.DistortionModelParams.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DistortionModelParams.DistortionModel">
            <summary>
            Gets or sets the type of learned distortion model. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DistortionModelParams.PolyModel">
            <summary>
            Gets or sets the learned coefficients of polynomial model.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.DistortionModelParams.DivModel">
            <summary>
            Gets or sets the learned coefficient of division model. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.FocalLength">
            <summary>
            Provides the focal length in pixel units.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FocalLength.#ctor">
            <summary>
            Initializes a new instance of the FocalLength class.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FocalLength.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the FocalLength class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FocalLength.Equals(NationalInstruments.Vision.Analysis.FocalLength)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FocalLength.
            </summary>
            <param name="other">
            A FocalLength instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FocalLength.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified FocalLength.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of FocalLength
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FocalLength.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.FocalLength.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FocalLength.Fx">
            <summary>
            Gets or sets focal length in x direction.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.FocalLength.Fy">
            <summary>
            Gets or sets focal length in y direction.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.InternalParameters">
            <summary>
            Provides Internal Parameters.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InternalParameters.#ctor">
            <summary>
            Initializes a new instance of the InternalParameters class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InternalParameters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InternalParameters class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InternalParameters.#ctor(System.Boolean,NationalInstruments.Vision.Analysis.FocalLength)">
            <summary>
            Initializes a new instance of the InternalParameters class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InternalParameters.#ctor(System.Boolean,NationalInstruments.Vision.Analysis.FocalLength,NationalInstruments.Vision.PointContour)">
            <summary>
            Initializes a new instance of the InternalParameters class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InternalParameters.Equals(NationalInstruments.Vision.Analysis.InternalParameters)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified InternalParameters.
            </summary>
            <param name="other">
            A InternalParameters instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InternalParameters.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified InternalParameters.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of InternalParameters
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InternalParameters.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.InternalParameters.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InternalParameters.IsInsufficientData">
            <summary>
            Gets or sets the IsInsufficientData. IsInsufficientData is set to true, if number of different projection planes or the angle difference of projection planes are less than required.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InternalParameters.FocalLength">
            <summary>
            Gets or sets the the focal length in pixel units.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.InternalParameters.OpticalCenter">
            <summary>
            Gets or sets the optical center in image. 
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CameraParametersReport">
            <summary>
            Provides the internal and external paramters of learned camera model.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CameraParametersReport.#ctor">
            <summary>
            Initializes a new instance of the CameraParametersReport class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CameraParametersReport.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the CameraParametersReport class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CameraParametersReport.#ctor(System.Double[0:,0:],NationalInstruments.Vision.Analysis.DistortionModelParams)">
            <summary>
            Initializes a new instance of the CameraParametersReport class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CameraParametersReport.#ctor(System.Double[0:,0:],NationalInstruments.Vision.Analysis.DistortionModelParams,NationalInstruments.Vision.Analysis.InternalParameters)">
            <summary>
            Initializes a new instance of the CameraParametersReport class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CameraParametersReport.Equals(NationalInstruments.Vision.Analysis.CameraParametersReport)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CameraParametersReport.
            </summary>
            <param name="other">
            A CameraParametersReport instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CameraParametersReport.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CameraParametersReport.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CameraParametersReport
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CameraParametersReport.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CameraParametersReport.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CameraParametersReport.ProjectionMatrix">
            <summary>
            Gets or sets the projection(homography) matrix of working plane.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CameraParametersReport.Distortion">
            <summary>
            Gets or sets the Distortion Model Coeffiecients. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CameraParametersReport.InternalParams">
            <summary>
            Gets or sets the learned internal paramters of camera model such as focal length and optical center.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CalibrationModelSetup">
            <summary>
            Provides the setup parameters for Camera Model and Distortion Model.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationModelSetup.#ctor">
            <summary>
            Initializes a new instance of the CalibrationModelSetup class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationModelSetup.#ctor(NationalInstruments.Vision.Analysis.DistortionModel)">
            <summary>
            Initializes a new instance of the CalibrationModelSetup class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationModelSetup.#ctor(NationalInstruments.Vision.Analysis.DistortionModel,NationalInstruments.Vision.Analysis.RadialCoefficients)">
            <summary>
            Initializes a new instance of the CalibrationModelSetup class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationModelSetup.#ctor(NationalInstruments.Vision.Analysis.DistortionModel,NationalInstruments.Vision.Analysis.RadialCoefficients,System.Boolean)">
            <summary>
            Initializes a new instance of the CalibrationModelSetup class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationModelSetup.Equals(NationalInstruments.Vision.Analysis.CalibrationModelSetup)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationModelSetup.
            </summary>
            <param name="other">
            A CalibrationModelSetup instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationModelSetup.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationModelSetup.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CalibrationModelSetup
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationModelSetup.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationModelSetup.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationModelSetup.DistortionModel">
            <summary>
            Gets or sets the Distortion Model value
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationModelSetup.RadialCoefficients">
            <summary>
            Gets or sets the Radial Coefficients. 
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationModelSetup.TangentialCoefficients">
            <summary>
            Gets or sets the Int32 Tangential Coefficients.
            </summary>
        </member>
        <member name="T:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo">
            <summary>
            Provides the Calibration learn setup information.
            </summary>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.#ctor">
            <summary>
            Initializes a new instance of the CalibrationModelSetup class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.#ctor(NationalInstruments.Vision.ScalingMethod)">
            <summary>
            Initializes a new instance of the CalibrationLearnSetupInfo class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.#ctor(NationalInstruments.Vision.ScalingMethod,NationalInstruments.Vision.CalibrationCorrectionMode)">
            <summary>
            Initializes a new instance of the CalibrationModelSetup class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.#ctor(NationalInstruments.Vision.ScalingMethod,NationalInstruments.Vision.CalibrationCorrectionMode,System.Boolean)">
            <summary>
            Initializes a new instance of the CalibrationModelSetup class.
            </summary>       
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.Equals(NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationLearnSetupInfo.
            </summary>
            <param name="other">
            A CalibrationLearnSetupInfo instance to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified CalibrationLearnSetupInfo.
            </summary>
            <param name="obj">
            An object to compare to this instance. 
            </param>
            <returns>
            	<see langword="true"/> if <paramref name="obj"/> is an instance of CalibrationLearnSetupInfo
             and equals the value of this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.GetHashCode">
            <summary>
            Returns a hash code for the object.
            </summary>
            <returns>
            A 32-bit signed integer hash code. 
            </returns>
        </member>
        <member name="M:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of this instance.
            </returns>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.ScalingMethod">
            <summary>
            Gets or sets the scaling method
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.CalibrationCorrectionMode">
            <summary>
            Gets or sets the Calibration correction mode.
            </summary>
        </member>
        <member name="P:NationalInstruments.Vision.Analysis.CalibrationLearnSetupInfo.LearnCorrectionTable">
            <summary>
            Gets or sets the Learn correction table.
            </summary>
        </member>
    </members>
</doc>
